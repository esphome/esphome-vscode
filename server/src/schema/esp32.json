{
  "esp32": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "board": {
              "key": "Required",
              "type": "enum",
              "values": [
                "alksesp32",
                "az-delivery-devkit-v4",
                "bpi-bit",
                "briki_abc_esp32",
                "briki_mbc-wb_esp32",
                "d-duino-32",
                "esp320",
                "esp32-c3-devkitm-1",
                "esp32cam",
                "esp32-devkitlipo",
                "esp32dev",
                "esp32doit-devkit-v1",
                "esp32doit-espduino",
                "esp32-evb",
                "esp32-gateway",
                "esp32-poe-iso",
                "esp32-poe",
                "esp32-pro",
                "esp32-s2-kaluga-1",
                "esp32-s2-saola-1",
                "esp32thing_plus",
                "esp32thing",
                "esp32vn-iot-uno",
                "espea32",
                "espectro32",
                "espino32",
                "esp-wrover-kit",
                "etboard",
                "featheresp32-s2",
                "featheresp32",
                "firebeetle32",
                "fm-devkit",
                "frogboard",
                "healthypi4",
                "heltec_wifi_kit_32_v2",
                "heltec_wifi_kit_32",
                "heltec_wifi_lora_32_V2",
                "heltec_wifi_lora_32",
                "heltec_wireless_stick_lite",
                "heltec_wireless_stick",
                "honeylemon",
                "hornbill32dev",
                "hornbill32minima",
                "imbrios-logsens-v1p1",
                "inex_openkb",
                "intorobot",
                "iotaap_magnolia",
                "iotbusio",
                "iotbusproteus",
                "kits-edu",
                "labplus_mpython",
                "lolin32_lite",
                "lolin32",
                "lolin_c3_mini",
                "lolin_d32_pro",
                "lolin_d32",
                "lopy4",
                "lopy",
                "m5stack-atom",
                "m5stack-core2",
                "m5stack-core-esp32",
                "m5stack-coreink",
                "m5stack-fire",
                "m5stack-grey",
                "m5stack-timer-cam",
                "m5stick-c",
                "magicbit",
                "mgbot-iotik32a",
                "mgbot-iotik32b",
                "mhetesp32devkit",
                "mhetesp32minikit",
                "microduino-core-esp32",
                "nano32",
                "nina_w10",
                "node32s",
                "nodemcu-32s",
                "nscreen-32",
                "odroid_esp32",
                "onehorse32dev",
                "oroca_edubot",
                "pico32",
                "piranha_esp32",
                "pocket_32",
                "pycom_gpy",
                "qchip",
                "quantum",
                "sensesiot_weizen",
                "sg-o_airMon",
                "s_odi_ultra",
                "sparkfun_lora_gateway_1-channel",
                "tinypico",
                "ttgo-lora32-v1",
                "ttgo-lora32-v21",
                "ttgo-lora32-v2",
                "ttgo-t1",
                "ttgo-t7-v13-mini32",
                "ttgo-t7-v14-mini32",
                "ttgo-t-beam",
                "ttgo-t-watch",
                "turta_iot_node",
                "vintlabs-devkit-v1",
                "wemosbat",
                "wemos_d1_mini32",
                "wesp32",
                "widora-air",
                "wifiduino32",
                "xinabox_cw02"
              ],
              "docs": "**string**: The PlatformIO board ID that should be used. Choose the appropriate board from [this list](https://registry.platformio.org/packages/platforms/platformio/espressif32/boards) (the icon next to the name can be used to copy the board ID). *This only affects pin aliases, flash size and some internal settings*, if unsure choose a generic board from Espressif such as `esp32dev`.\n\n*See also: [ESP32 Platform](https://esphome.io/components/esp32.html#configuration-variables)*"
            },
            "variant": {
              "key": "Optional",
              "type": "enum",
              "values": [
                "ESP32",
                "ESP32S2",
                "ESP32S3",
                "ESP32C3",
                "ESP32H2"
              ],
              "docs": "**boolean**: The variant of the ESP32 that is used on this board. One of `esp32`, `esp32s2`, `esp32s3`, `esp32c3` and `esp32h2`. Defaults to the variant that is detected from the board, if a board that\u2019s unknown to ESPHome is used, this option is mandatory.\n\n*See also: [ESP32 Platform](https://esphome.io/components/esp32.html#configuration-variables)*"
            },
            "framework": {
              "key": "Optional",
              "default": "{}",
              "type": "typed",
              "types": {
                "esp-idf": {
                  "config_vars": {
                    "version": {
                      "key": "Optional",
                      "default": "recommended",
                      "type": "string",
                      "docs": "**string**: The base framework version number to use, from [ESP32 ESP-IDF releases](https://github.com/espressif/esp-idf/releases). Defaults to `recommended`. Additional values are:\n  * `dev`: Use the latest commit from [https://github.com/espressif/esp-idf](https://github.com/espressif/esp-idf), note this may break at any time\n  \n  * `latest`: Use the latest *release* from [https://github.com/espressif/esp-idf/releases](https://github.com/espressif/esp-idf/releases), even if it hasn\u2019t been recommended yet.\n  \n  * `recommended`: Use the recommended framework version.\n  \n  \n\n*See also: [ESP-IDF framework](https://esphome.io/components/esp32.html#id2)*"
                    },
                    "source": {
                      "key": "Optional",
                      "type": "string",
                      "docs": "**string**: The PlatformIO package or repository to use for the framework. This can be used to use a custom or patched version of the framework.\n\n*See also: [ESP-IDF framework](https://esphome.io/components/esp32.html#id2)*"
                    },
                    "platform_version": {
                      "key": "Optional",
                      "docs": "**string**: The version of the [platformio/espressif32](https://github.com/platformio/platform-espressif32/releases/) package to use.\n\n*See also: [ESP-IDF framework](https://esphome.io/components/esp32.html#id2)*"
                    },
                    "sdkconfig_options": {
                      "key": "String",
                      "default": "{}",
                      "key_type": "string_strict",
                      "type": "schema",
                      "schema": {
                        "config_vars": {
                          "string": {
                            "type": "string"
                          }
                        }
                      },
                      "docs": "**mapping**: Custom sdkconfig options to set in the ESP-IDF project.\n\n*See also: [ESP-IDF framework](https://esphome.io/components/esp32.html#id2)*"
                    },
                    "advanced": {
                      "key": "Optional",
                      "default": "{}",
                      "type": "schema",
                      "schema": {
                        "config_vars": {
                          "ignore_efuse_mac_crc": {
                            "key": "Optional",
                            "default": "False",
                            "type": "boolean",
                            "docs": "**boolean**: Can be set to `true` for devices on which the burnt in MAC address does not match the also burnt in CRC for that MAC address, resulting in an error like `Base MAC address from BLK0 of EFUSE CRC error`.\n\n*See also: [ESP-IDF framework](https://esphome.io/components/esp32.html#id2)*"
                          }
                        }
                      },
                      "docs": "**mapping**: Advanced options for highly specific tweaks.\n  * **ignore_efuse_mac_crc** (*Optional*, boolean): Can be set to `true` for devices on which the burnt in MAC address does not match the also burnt in CRC for that MAC address, resulting in an error like `Base MAC address from BLK0 of EFUSE CRC error`.\n  \n  \n\n*See also: [ESP-IDF framework](https://esphome.io/components/esp32.html#id2)*"
                    }
                  }
                },
                "arduino": {
                  "config_vars": {
                    "version": {
                      "key": "Optional",
                      "default": "recommended",
                      "type": "string",
                      "docs": "**string**: The base framework version number to use, from [ESP32 arduino releases](https://github.com/espressif/arduino-esp32/releases). Defaults to `recommended`. Additional values are:\n  * `dev`: Use the latest commit from [https://github.com/espressif/arduino-esp32](https://github.com/espressif/arduino-esp32), note this may break at any time\n  \n  * `latest`: Use the latest *release* from [https://github.com/espressif/arduino-esp32/releases](https://github.com/espressif/arduino-esp32/releases), even if it hasn\u2019t been recommended yet.\n  \n  * `recommended`: Use the recommended framework version.\n  \n  \n\n*See also: [Arduino framework](https://esphome.io/components/esp32.html#id1)*"
                    },
                    "source": {
                      "key": "Optional",
                      "type": "string",
                      "docs": "**string**: The PlatformIO package or repository to use for framework. This can be used to use a custom or patched version of the framework.\n\n*See also: [Arduino framework](https://esphome.io/components/esp32.html#id1)*"
                    },
                    "platform_version": {
                      "key": "Optional",
                      "docs": "**string**: The version of the [platformio/espressif32](https://github.com/platformio/platform-espressif32/releases/) package to use.\n\n*See also: [Arduino framework](https://esphome.io/components/esp32.html#id1)*"
                    }
                  }
                }
              },
              "typed_key": "type",
              "docs": "Options for the underlying framework used by ESPHome. See [GPIO Pin Numbering](https://esphome.io/components/esp32.html#esp32-arduino-framework) and [ESP-IDF framework](https://esphome.io/components/esp32.html#esp32-espidf-framework).\n\n*See also: [ESP32 Platform](https://esphome.io/components/esp32.html#configuration-variables)*"
            }
          }
        }
      }
    },
    "pin": {
      "type": "schema",
      "schema": {
        "config_vars": {
          "id": {
            "key": "GeneratedID",
            "id_type": "pin"
          },
          "number": {
            "key": "Required",
            "docs": "**pin**: The pin number.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
          },
          "mode": {
            "key": "Optional",
            "default": "{}",
            "type": "schema",
            "schema": {
              "config_vars": {
                "input": {
                  "key": "Optional",
                  "default": "False",
                  "type": "boolean",
                  "docs": "**boolean**: If true, configure the pin as an input.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
                },
                "output": {
                  "key": "Optional",
                  "default": "False",
                  "type": "boolean",
                  "docs": "**boolean**: If true, configure the pin as an output.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
                },
                "open_drain": {
                  "key": "Optional",
                  "default": "False",
                  "type": "boolean",
                  "docs": "**boolean**: Set the pin to open-drain (as opposed to push-pull). The active pin state will then result in a high-impedance state.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
                },
                "pullup": {
                  "key": "Optional",
                  "default": "False",
                  "type": "boolean",
                  "docs": "**boolean**: Activate internal pullup resistors on the pin.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
                },
                "pulldown": {
                  "key": "Optional",
                  "default": "False",
                  "type": "boolean",
                  "docs": "**boolean**: Activate internal pulldown resistors on the pin.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
                }
              }
            },
            "docs": "**string or mapping**: Configures the pin to behave in different modes like input or output. The default value depends on the context. Accepts either a shorthand string or a mapping where each feature can be individually enabled/disabled:\n  * **input** (*Optional*, boolean): If true, configure the pin as an input.\n  \n  * **output** (*Optional*, boolean): If true, configure the pin as an output.\n  \n  * **pullup** (*Optional*, boolean): Activate internal pullup resistors on the pin.\n  \n  * **pulldown** (*Optional*, boolean): Activate internal pulldown resistors on the pin.\n  \n  * **open_drain** (*Optional*, boolean): Set the pin to open-drain (as opposed to push-pull). The active pin state will then result in a high-impedance state.\n  \n  For compatibility some shorthand modes can also be used.\n  * `INPUT`\n  \n  * `OUTPUT`\n  \n  * `OUTPUT_OPEN_DRAIN`\n  \n  * `ANALOG`\n  \n  * `INPUT_PULLUP`\n  \n  * `INPUT_PULLDOWN`\n  \n  \n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
          },
          "inverted": {
            "key": "Optional",
            "default": "False",
            "type": "boolean",
            "docs": "**boolean**: If all read and written values should be treated as inverted. Defaults to `false`.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
          },
          "drive_strength": {
            "key": "Optional",
            "type": "enum",
            "values": [
              5.0,
              10.0,
              20.0,
              40.0
            ],
            "docs": "**string**: On ESP32s with esp-idf framework the pad drive strength, i.e. the maximum amount of current can additionally be set. Defaults to `20mA`. Options are `5mA`, `10mA`, `20mA`, `40mA`.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
          }
        }
      }
    }
  }
}