{
  "esp32": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "board": {
              "key": "Required",
              "type": "enum",
              "values": {
                "4d_systems_esp32s3_gen4_r8n16": {
                  "docs": "4D Systems GEN4-ESP32 16MB (ESP32S3-R8N16)"
                },
                "adafruit_camera_esp32s3": {
                  "docs": "Adafruit pyCamera S3"
                },
                "adafruit_feather_esp32c6": {
                  "docs": "Adafruit Feather ESP32-C6"
                },
                "adafruit_feather_esp32s2": {
                  "docs": "Adafruit Feather ESP32-S2"
                },
                "adafruit_feather_esp32s2_reversetft": {
                  "docs": "Adafruit Feather ESP32-S2 Reverse TFT"
                },
                "adafruit_feather_esp32s2_tft": {
                  "docs": "Adafruit Feather ESP32-S2 TFT"
                },
                "adafruit_feather_esp32s3": {
                  "docs": "Adafruit Feather ESP32-S3 2MB PSRAM"
                },
                "adafruit_feather_esp32s3_nopsram": {
                  "docs": "Adafruit Feather ESP32-S3 No PSRAM"
                },
                "adafruit_feather_esp32s3_reversetft": {
                  "docs": "Adafruit Feather ESP32-S3 Reverse TFT"
                },
                "adafruit_feather_esp32s3_tft": {
                  "docs": "Adafruit Feather ESP32-S3 TFT"
                },
                "adafruit_feather_esp32_v2": {
                  "docs": "Adafruit Feather ESP32 V2"
                },
                "adafruit_funhouse_esp32s2": {
                  "docs": "Adafruit FunHouse"
                },
                "adafruit_itsybitsy_esp32": {
                  "docs": "Adafruit ItsyBitsy ESP32"
                },
                "adafruit_magtag29_esp32s2": {
                  "docs": "Adafruit MagTag 2.9"
                },
                "adafruit_matrixportal_esp32s3": {
                  "docs": "Adafruit MatrixPortal ESP32-S3"
                },
                "adafruit_metro_esp32s2": {
                  "docs": "Adafruit Metro ESP32-S2"
                },
                "adafruit_metro_esp32s3": {
                  "docs": "Adafruit Metro ESP32-S3"
                },
                "adafruit_qtpy_esp32c3": {
                  "docs": "Adafruit QT Py ESP32-C3"
                },
                "adafruit_qtpy_esp32": {
                  "docs": "Adafruit QT Py ESP32"
                },
                "adafruit_qtpy_esp32s2": {
                  "docs": "Adafruit QT Py ESP32-S2"
                },
                "adafruit_qtpy_esp32s3_n4r2": {
                  "docs": "Adafruit QT Py ESP32-S3 (4M Flash 2M PSRAM)"
                },
                "adafruit_qtpy_esp32s3_nopsram": {
                  "docs": "Adafruit QT Py ESP32-S3 No PSRAM"
                },
                "adafruit_qualia_s3_rgb666": {
                  "docs": "Adafruit Qualia ESP32-S3 RGB666"
                },
                "airm2m_core_esp32c3": {
                  "docs": "AirM2M CORE ESP32C3"
                },
                "alksesp32": {
                  "docs": "ALKS ESP32"
                },
                "arduino_nano_esp32": {
                  "docs": "Arduino Nano ESP32"
                },
                "atd147_s3": {
                  "docs": "ArtronShop ATD1.47-S3"
                },
                "atmegazero_esp32s2": {
                  "docs": "EspinalLab ATMegaZero ESP32-S2"
                },
                "aventen_s3_sync": {
                  "docs": "Aventen S3 Sync"
                },
                "az-delivery-devkit-v4": {
                  "docs": "AZ-Delivery ESP-32 Dev Kit C V4"
                },
                "bee_data_logger": {
                  "docs": "Smart Bee Data Logger"
                },
                "bee_motion_mini": {
                  "docs": "Smart Bee Motion Mini"
                },
                "bee_motion": {
                  "docs": "Smart Bee Motion"
                },
                "bee_motion_s3": {
                  "docs": "Smart Bee Motion S3"
                },
                "bee_s3": {
                  "docs": "Smart Bee S3"
                },
                "bpi-bit": {
                  "docs": "BPI-Bit"
                },
                "bpi_leaf_s3": {
                  "docs": "BPI-Leaf-S3"
                },
                "cnrs_aw2eth": {
                  "docs": "CNRS AW2ETH"
                },
                "connaxio_espoir": {
                  "docs": "Connaxio's Espoir"
                },
                "cytron_maker_feather_aiot_s3": {
                  "docs": "Cytron Maker Feather AIoT S3"
                },
                "d-duino-32": {
                  "docs": "D-duino-32"
                },
                "deneyapkart1A": {
                  "docs": "Deneyap Kart 1A"
                },
                "deneyapkart1Av2": {
                  "docs": "Deneyap Kart 1A v2"
                },
                "deneyapkartg": {
                  "docs": "Deneyap Kart G"
                },
                "deneyapkart": {
                  "docs": "Deneyap Kart"
                },
                "deneyapmini": {
                  "docs": "Deneyap Mini"
                },
                "deneyapminiv2": {
                  "docs": "Deneyap Mini v2"
                },
                "denky32": {
                  "docs": "Denky32 (WROOM32)"
                },
                "denky_d4": {
                  "docs": "Denky D4 (PICO-V3-02)"
                },
                "dfrobot_beetle_esp32c3": {
                  "docs": "DFRobot Beetle ESP32-C3"
                },
                "dfrobot_firebeetle2_esp32e": {
                  "docs": "DFRobot Firebeetle 2 ESP32-E"
                },
                "dfrobot_firebeetle2_esp32s3": {
                  "docs": "DFRobot Firebeetle 2 ESP32-S3"
                },
                "dfrobot_romeo_esp32s3": {
                  "docs": "DFRobot Romeo ESP32-S3"
                },
                "dpu_esp32": {
                  "docs": "TAMC DPU ESP32"
                },
                "edgebox-esp-100": {
                  "docs": "Seeed Studio Edgebox-ESP-100"
                },
                "esp320": {
                  "docs": "Electronic SweetPeas ESP320"
                },
                "esp32-c2-devkitm-1": {
                  "docs": "Espressif ESP32-C2-DevKitM-1"
                },
                "esp32-c3-devkitc-02": {
                  "docs": "Espressif ESP32-C3-DevKitC-02"
                },
                "esp32-c3-devkitm-1": {
                  "docs": "Espressif ESP32-C3-DevKitM-1"
                },
                "esp32-c3-m1i-kit": {
                  "docs": "Ai-Thinker ESP-C3-M1-I-Kit"
                },
                "esp32-c6-devkitc-1": {
                  "docs": "Espressif ESP32-C6-DevKitC-1"
                },
                "esp32-c6-devkitm-1": {
                  "docs": "Espressif ESP32-C6-DevKitM-1"
                },
                "esp32cam": {
                  "docs": "AI Thinker ESP32-CAM"
                },
                "esp32-devkitlipo": {
                  "docs": "OLIMEX ESP32-DevKit-LiPo"
                },
                "esp32dev": {
                  "docs": "Espressif ESP32 Dev Module"
                },
                "esp32doit-devkit-v1": {
                  "docs": "DOIT ESP32 DEVKIT V1"
                },
                "esp32doit-espduino": {
                  "docs": "DOIT ESPduino32"
                },
                "esp32-evb": {
                  "docs": "OLIMEX ESP32-EVB"
                },
                "esp32-gateway": {
                  "docs": "OLIMEX ESP32-GATEWAY"
                },
                "esp32-h2-devkitm-1": {
                  "docs": "Espressif ESP32-H2-DevKit"
                },
                "esp32-pico-devkitm-2": {
                  "docs": "Espressif ESP32-PICO-DevKitM-2"
                },
                "esp32-poe-iso": {
                  "docs": "OLIMEX ESP32-PoE-ISO"
                },
                "esp32-poe": {
                  "docs": "OLIMEX ESP32-PoE"
                },
                "esp32-pro": {
                  "docs": "OLIMEX ESP32-PRO"
                },
                "esp32-s2-franzininho": {
                  "docs": "Franzininho WiFi Board"
                },
                "esp32-s2-kaluga-1": {
                  "docs": "Espressif ESP32-S2-Kaluga-1 Kit"
                },
                "esp32-s2-saola-1": {
                  "docs": "Espressif ESP32-S2-Saola-1"
                },
                "esp32s3box": {
                  "docs": "Espressif ESP32-S3-Box"
                },
                "esp32s3camlcd": {
                  "docs": "ESP32S3 CAM LCD"
                },
                "esp32-s3-devkitc-1": {
                  "docs": "Espressif ESP32-S3-DevKitC-1-N8 (8 MB QD, No PSRAM)"
                },
                "esp32-s3-devkitm-1": {
                  "docs": "Espressif ESP32-S3-DevKitM-1"
                },
                "esp32s3_powerfeather": {
                  "docs": "ESP32-S3 PowerFeather"
                },
                "esp32s3usbotg": {
                  "docs": "Espressif ESP32-S3-USB-OTG"
                },
                "esp32-solo1": {
                  "docs": "Espressif Generic ESP32-solo1 4M Flash"
                },
                "esp32thing": {
                  "docs": "SparkFun ESP32 Thing"
                },
                "esp32thing_plus": {
                  "docs": "SparkFun ESP32 Thing Plus"
                },
                "esp32vn-iot-uno": {
                  "docs": "ESP32vn IoT Uno"
                },
                "espea32": {
                  "docs": "April Brother ESPea32"
                },
                "espectro32": {
                  "docs": "ESPectro32"
                },
                "espino32": {
                  "docs": "ESPino32"
                },
                "esp-wrover-kit": {
                  "docs": "Espressif ESP-WROVER-KIT"
                },
                "etboard": {
                  "docs": "ETBoard"
                },
                "featheresp32": {
                  "docs": "Adafruit ESP32 Feather"
                },
                "featheresp32-s2": {
                  "docs": "Adafruit ESP32-S2 Feather Development Board"
                },
                "firebeetle32": {
                  "docs": "FireBeetle-ESP32"
                },
                "fm-devkit": {
                  "docs": "ESP32 FM DevKit"
                },
                "franzininho_wifi_esp32s2": {
                  "docs": "Franzininho WiFi"
                },
                "franzininho_wifi_msc_esp32s2": {
                  "docs": "Franzininho WiFi MSC"
                },
                "frogboard": {
                  "docs": "Frog Board ESP32"
                },
                "healthypi4": {
                  "docs": "ProtoCentral HealthyPi 4"
                },
                "heltec_wifi_kit_32": {
                  "docs": "Heltec WiFi Kit 32"
                },
                "heltec_wifi_kit_32_V3": {
                  "docs": "Heltec WiFi Kit 32 (V3)"
                },
                "heltec_wifi_lora_32": {
                  "docs": "Heltec WiFi LoRa 32"
                },
                "heltec_wifi_lora_32_V2": {
                  "docs": "Heltec WiFi LoRa 32 (V2)"
                },
                "heltec_wifi_lora_32_V3": {
                  "docs": "Heltec WiFi LoRa 32 (V3)"
                },
                "heltec_wireless_stick_lite": {
                  "docs": "Heltec Wireless Stick Lite"
                },
                "heltec_wireless_stick": {
                  "docs": "Heltec Wireless Stick"
                },
                "honeylemon": {
                  "docs": "HONEYLemon"
                },
                "hornbill32dev": {
                  "docs": "Hornbill ESP32 Dev"
                },
                "hornbill32minima": {
                  "docs": "Hornbill ESP32 Minima"
                },
                "imbrios-logsens-v1p1": {
                  "docs": "Imbrios LogSens V1P1"
                },
                "inex_openkb": {
                  "docs": "INEX OpenKB"
                },
                "intorobot": {
                  "docs": "IntoRobot Fig"
                },
                "iotaap_magnolia": {
                  "docs": "IoTaaP Magnolia"
                },
                "iotbusio": {
                  "docs": "oddWires IoT-Bus Io"
                },
                "iotbusproteus": {
                  "docs": "oddWires IoT-Bus Proteus"
                },
                "ioxesp32": {
                  "docs": "ArtronShop IOXESP32"
                },
                "ioxesp32ps": {
                  "docs": "ArtronShop IOXESP32PS"
                },
                "kb32-ft": {
                  "docs": "MakerAsia KB32-FT"
                },
                "kits-edu": {
                  "docs": "KITS ESP32 EDU"
                },
                "labplus_mpython": {
                  "docs": "Labplus mPython"
                },
                "lilka_v2": {
                  "docs": "Lilka v2"
                },
                "lilygo-t-display": {
                  "docs": "LilyGo T-Display"
                },
                "lilygo-t-display-s3": {
                  "docs": "LilyGo T-Display-S3"
                },
                "lionbit": {
                  "docs": "Lion:Bit Dev Board"
                },
                "lionbits3": {
                  "docs": "Lion:Bit S3 STEM Dev Board"
                },
                "lolin32_lite": {
                  "docs": "WEMOS LOLIN32 Lite"
                },
                "lolin32": {
                  "docs": "WEMOS LOLIN32"
                },
                "lolin_c3_mini": {
                  "docs": "WEMOS LOLIN C3 Mini"
                },
                "lolin_d32": {
                  "docs": "WEMOS LOLIN D32"
                },
                "lolin_d32_pro": {
                  "docs": "WEMOS LOLIN D32 PRO"
                },
                "lolin_s2_mini": {
                  "docs": "WEMOS LOLIN S2 Mini"
                },
                "lolin_s2_pico": {
                  "docs": "WEMOS LOLIN S2 PICO"
                },
                "lolin_s3_mini": {
                  "docs": "WEMOS LOLIN S3 Mini"
                },
                "lolin_s3": {
                  "docs": "WEMOS LOLIN S3"
                },
                "lolin_s3_pro": {
                  "docs": "WEMOS LOLIN S3 PRO"
                },
                "lopy4": {
                  "docs": "Pycom LoPy4"
                },
                "lopy": {
                  "docs": "Pycom LoPy"
                },
                "m5stack-atom": {
                  "docs": "M5Stack-ATOM"
                },
                "m5stack-atoms3": {
                  "docs": "M5Stack AtomS3"
                },
                "m5stack-core2": {
                  "docs": "M5Stack Core2"
                },
                "m5stack-core-esp32-16M": {
                  "docs": "M5Stack Core ESP32 16M"
                },
                "m5stack-core-esp32": {
                  "docs": "M5Stack Core ESP32"
                },
                "m5stack-coreink": {
                  "docs": "M5Stack-Core Ink"
                },
                "m5stack-cores3": {
                  "docs": "M5Stack CoreS3"
                },
                "m5stack-fire": {
                  "docs": "M5Stack FIRE"
                },
                "m5stack-grey": {
                  "docs": "M5Stack GREY ESP32"
                },
                "m5stack_paper": {
                  "docs": "M5Stack Paper"
                },
                "m5stack-stamps3": {
                  "docs": "M5Stack StampS3"
                },
                "m5stack-station": {
                  "docs": "M5Stack Station"
                },
                "m5stack-timer-cam": {
                  "docs": "M5Stack Timer CAM"
                },
                "m5stamp-pico": {
                  "docs": "M5Stamp-Pico"
                },
                "m5stick-c": {
                  "docs": "M5Stick-C"
                },
                "magicbit": {
                  "docs": "MagicBit"
                },
                "mgbot-iotik32a": {
                  "docs": "MGBOT IOTIK 32A"
                },
                "mgbot-iotik32b": {
                  "docs": "MGBOT IOTIK 32B"
                },
                "mhetesp32devkit": {
                  "docs": "MH ET LIVE ESP32DevKIT"
                },
                "mhetesp32minikit": {
                  "docs": "MH ET LIVE ESP32MiniKit"
                },
                "microduino-core-esp32": {
                  "docs": "Microduino Core ESP32"
                },
                "micros2": {
                  "docs": "microS2"
                },
                "minimain_esp32s2": {
                  "docs": "Deparment of Alchemy MiniMain ESP32-S2"
                },
                "motorgo_mini_1": {
                  "docs": "MotorGo Mini 1 (ESP32-S3)"
                },
                "namino_arancio": {
                  "docs": "Namino Arancio"
                },
                "namino_rosso": {
                  "docs": "Namino Rosso"
                },
                "nano32": {
                  "docs": "MakerAsia Nano32"
                },
                "nebulas3": {
                  "docs": "Kinetic Dynamics Nebula S3"
                },
                "nina_w10": {
                  "docs": "u-blox NINA-W10 series"
                },
                "node32s": {
                  "docs": "Node32s"
                },
                "nodemcu-32s2": {
                  "docs": "Ai-Thinker NodeMCU-32S2 (ESP-12K)"
                },
                "nodemcu-32s": {
                  "docs": "NodeMCU-32S"
                },
                "nscreen-32": {
                  "docs": "YeaCreate NSCREEN-32"
                },
                "odroid_esp32": {
                  "docs": "ODROID-GO"
                },
                "onehorse32dev": {
                  "docs": "Onehorse ESP32 Dev Module"
                },
                "oroca_edubot": {
                  "docs": "OROCA EduBot"
                },
                "pico32": {
                  "docs": "ESP32 Pico Kit"
                },
                "piranha_esp32": {
                  "docs": "Fishino Piranha ESP-32"
                },
                "pocket_32": {
                  "docs": "Dongsen Tech Pocket 32"
                },
                "pycom_gpy": {
                  "docs": "Pycom GPy"
                },
                "qchip": {
                  "docs": "Qchip"
                },
                "quantum": {
                  "docs": "Noduino Quantum"
                },
                "redpill_esp32s3": {
                  "docs": "Munich Labs RedPill ESP32-S3"
                },
                "roboheart_hercules": {
                  "docs": "RoboHeart Hercules"
                },
                "seeed_xiao_esp32c3": {
                  "docs": "Seeed Studio XIAO ESP32C3"
                },
                "seeed_xiao_esp32s3": {
                  "docs": "Seeed Studio XIAO ESP32S3"
                },
                "sensebox_mcu_esp32s2": {
                  "docs": "senseBox MCU-S2 ESP32-S2"
                },
                "sensesiot_weizen": {
                  "docs": "LOGISENSES Senses Weizen"
                },
                "sg-o_airMon": {
                  "docs": "SG-O AirMon"
                },
                "s_odi_ultra": {
                  "docs": "S.ODI Ultra v1"
                },
                "sparkfun_esp32c6_thing_plus": {
                  "docs": "Sparkfun ESP32-C6 Thing Plus"
                },
                "sparkfun_esp32_iot_redboard": {
                  "docs": "SparkFun ESP32 IoT RedBoard"
                },
                "sparkfun_esp32micromod": {
                  "docs": "SparkFun ESP32 MicroMod"
                },
                "sparkfun_esp32s2_thing_plus_c": {
                  "docs": "SparkFun ESP32 Thing Plus C"
                },
                "sparkfun_esp32s2_thing_plus": {
                  "docs": "SparkFun ESP32-S2 Thing Plus"
                },
                "sparkfun_lora_gateway_1-channel": {
                  "docs": "SparkFun LoRa Gateway 1-Channel"
                },
                "tamc_termod_s3": {
                  "docs": "TAMC Termod S3"
                },
                "tinypico": {
                  "docs": "Unexpected Maker TinyPICO"
                },
                "trueverit-iot-driver-mk2": {
                  "docs": "Trueverit ESP32 Universal IoT Driver MK II"
                },
                "trueverit-iot-driver-mk3": {
                  "docs": "Trueverit ESP32 Universal IoT Driver MK III"
                },
                "trueverit-iot-driver": {
                  "docs": "Trueverit ESP32 Universal IoT Driver"
                },
                "ttgo-lora32-v1": {
                  "docs": "TTGO LoRa32-OLED V1"
                },
                "ttgo-lora32-v21": {
                  "docs": "TTGO LoRa32-OLED v2.1.6"
                },
                "ttgo-lora32-v2": {
                  "docs": "TTGO LoRa32-OLED V2"
                },
                "ttgo-t1": {
                  "docs": "TTGO T1"
                },
                "ttgo-t7-v13-mini32": {
                  "docs": "TTGO T7 V1.3 Mini32"
                },
                "ttgo-t7-v14-mini32": {
                  "docs": "TTGO T7 V1.4 Mini32"
                },
                "ttgo-t-beam": {
                  "docs": "TTGO T-Beam"
                },
                "ttgo-t-oi-plus": {
                  "docs": "TTGO T-OI PLUS RISC-V ESP32-C3"
                },
                "ttgo-t-watch": {
                  "docs": "TTGO T-Watch"
                },
                "turta_iot_node": {
                  "docs": "Turta IoT Node"
                },
                "um_feathers2": {
                  "docs": "Unexpected Maker FeatherS2"
                },
                "um_feathers2_neo": {
                  "docs": "Unexpected Maker FeatherS2 Neo"
                },
                "um_feathers3": {
                  "docs": "Unexpected Maker FeatherS3"
                },
                "um_nanos3": {
                  "docs": "Unexpected Maker NanoS3"
                },
                "um_pros3": {
                  "docs": "Unexpected Maker PROS3"
                },
                "um_rmp": {
                  "docs": "Unexpected Maker RMP"
                },
                "um_tinys2": {
                  "docs": "Unexpected Maker TinyS2"
                },
                "um_tinys3": {
                  "docs": "Unexpected Maker TinyS3"
                },
                "unphone7": {
                  "docs": "unPhone 7"
                },
                "unphone8": {
                  "docs": "unPhone 8"
                },
                "unphone9": {
                  "docs": "unPhone 9"
                },
                "upesy_wroom": {
                  "docs": "uPesy ESP32 Wroom DevKit"
                },
                "upesy_wrover": {
                  "docs": "uPesy ESP32 Wrover DevKit"
                },
                "valtrack_v4_mfw_esp32_c3": {
                  "docs": "Valetron Systems VALTRACK-V4MVF"
                },
                "valtrack_v4_vts_esp32_c3": {
                  "docs": "Valetron Systems VALTRACK-V4VTS"
                },
                "vintlabs-devkit-v1": {
                  "docs": "VintLabs ESP32 Devkit"
                },
                "watchy": {
                  "docs": "SQFMI Watchy v2.0"
                },
                "wemosbat": {
                  "docs": "WeMos WiFi and Bluetooth Battery"
                },
                "wemos_d1_mini32": {
                  "docs": "WEMOS D1 MINI ESP32"
                },
                "wemos_d1_uno32": {
                  "docs": "WEMOS D1 R32"
                },
                "wesp32": {
                  "docs": "Silicognition wESP32"
                },
                "widora-air": {
                  "docs": "Widora AIR"
                },
                "wifiduino32c3": {
                  "docs": "Blinker WiFiduinoV2 (ESP32-C3)"
                },
                "wifiduino32": {
                  "docs": "Blinker WiFiduino32"
                },
                "wifiduino32s3": {
                  "docs": "Blinker WiFiduino32S3"
                },
                "wipy3": {
                  "docs": "Pycom WiPy3"
                },
                "wt32-eth01": {
                  "docs": "Wireless-Tag WT32-ETH01 Ethernet Module"
                },
                "xinabox_cw02": {
                  "docs": "XinaBox CW02"
                }
              },
              "docs": "**string**: The PlatformIO board ID that should be used. Choose the appropriate board from [this list](https://registry.platformio.org/platforms/platformio/espressif32/boards?version=5.3.0) (the icon next to the name can be used to copy the board ID). *This only affects pin aliases, flash size and some internal settings*; if unsure or you cannot find your exact board, using a generic board (from Espressif) such as `esp32dev` almost always works just fine.\n\n*See also: [ESP32 Platform](https://esphome.io/components/esp32.html#configuration-variables)*"
            },
            "flash_size": {
              "key": "Optional",
              "default": "4MB",
              "type": "enum",
              "values": {
                "2MB": null,
                "4MB": null,
                "8MB": null,
                "16MB": null,
                "32MB": null
              },
              "docs": "**string**: The amount of flash memory available on the ESP32 board/module. One of `2MB`, `4MB`, `8MB`, `16MB` or `32MB`. Defaults to `4MB`. **Warning: specifying a size larger than that available on your board will cause the ESP32 to fail to boot.**\n\n*See also: [ESP32 Platform](https://esphome.io/components/esp32.html#configuration-variables)*"
            },
            "partitions": {
              "key": "Optional",
              "docs": "**filename**: The name of (optionally including the path to) the file containing the partitioning scheme to be used. When not specified, partitions are automatically generated based on `flash_size`.\n\n*See also: [ESP32 Platform](https://esphome.io/components/esp32.html#configuration-variables)*"
            },
            "variant": {
              "key": "Optional",
              "type": "enum",
              "values": {
                "ESP32": null,
                "ESP32S2": null,
                "ESP32S3": null,
                "ESP32C2": null,
                "ESP32C3": null,
                "ESP32C6": null,
                "ESP32H2": null
              },
              "docs": "**string**: The variant of the ESP32 that is used on this board. One of `esp32`, `esp32s2`, `esp32s3`, `esp32c3` and `esp32h2`. Defaults to the variant that is detected from the board; if a board that\u2019s unknown to ESPHome is used, this option is mandatory.\n\n*See also: [ESP32 Platform](https://esphome.io/components/esp32.html#configuration-variables)*"
            },
            "framework": {
              "key": "Optional",
              "default": "{}",
              "type": "typed",
              "types": {
                "esp-idf": {
                  "config_vars": {
                    "version": {
                      "key": "Optional",
                      "default": "recommended",
                      "type": "string",
                      "docs": "**string**: The base framework version number to use, from [ESP32 ESP-IDF releases](https://github.com/espressif/esp-idf/releases). Defaults to `recommended`. Additional values are:\n  * `dev`: Use the latest commit from [https://github.com/espressif/esp-idf](https://github.com/espressif/esp-idf), note this may break at any time\n  \n  * `latest`: Use the latest *release* from [https://github.com/espressif/esp-idf/releases](https://github.com/espressif/esp-idf/releases), even if it hasn\u2019t been recommended yet.\n  \n  * `recommended`: Use the recommended framework version.\n  \n  \n\n*See also: [ESP-IDF framework](https://esphome.io/components/esp32.html#id2)*"
                    },
                    "release": {
                      "key": "Optional",
                      "type": "string"
                    },
                    "source": {
                      "key": "Optional",
                      "type": "string",
                      "docs": "**string**: The PlatformIO package or repository to use for the framework. This can be used to use a custom or patched version of the framework.\n\n*See also: [ESP-IDF framework](https://esphome.io/components/esp32.html#id2)*"
                    },
                    "platform_version": {
                      "key": "Optional",
                      "docs": "**string**: The version of the [pioarduino/espressif32](https://github.com/pioarduino/platform-espressif32/releases/) package to use.\n\n*See also: [ESP-IDF framework](https://esphome.io/components/esp32.html#id2)*"
                    },
                    "sdkconfig_options": {
                      "key": "String",
                      "default": "{}",
                      "key_type": "string_strict",
                      "type": "schema",
                      "schema": {
                        "config_vars": {
                          "string": {
                            "type": "string"
                          }
                        }
                      },
                      "docs": "**mapping**: Custom sdkconfig [compiler options](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/kconfig.html#compiler-options) to set in the ESP-IDF project.\n\n*See also: [ESP-IDF framework](https://esphome.io/components/esp32.html#id2)*"
                    },
                    "advanced": {
                      "key": "Optional",
                      "default": "{}",
                      "type": "schema",
                      "schema": {
                        "config_vars": {
                          "ignore_efuse_custom_mac": {
                            "key": "Optional",
                            "default": "False",
                            "type": "boolean"
                          },
                          "ignore_efuse_mac_crc": {
                            "key": "Optional",
                            "type": "boolean"
                          },
                          "enable_idf_experimental_features": {
                            "key": "Optional",
                            "type": "boolean"
                          }
                        }
                      },
                      "docs": "**mapping**: See [Advanced Configuration](https://esphome.io/components/esp32.html#esp32-advanced-configuration) below.\n\n*See also: [ESP-IDF framework](https://esphome.io/components/esp32.html#id2)*"
                    },
                    "components": {
                      "key": "Optional",
                      "default": "[]",
                      "is_list": true,
                      "type": "schema",
                      "schema": {
                        "config_vars": {
                          "name": {
                            "key": "Required",
                            "type": "string"
                          },
                          "source": {
                            "key": "Required",
                            "type": "schema",
                            "schema": {
                              "extends": [
                                "core.SOURCE_SCHEMA"
                              ]
                            }
                          },
                          "path": {
                            "key": "Optional",
                            "type": "string"
                          },
                          "refresh": {
                            "key": "Optional",
                            "default": "1d",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "arduino": {
                  "config_vars": {
                    "version": {
                      "key": "Optional",
                      "default": "recommended",
                      "type": "string",
                      "docs": "**string**: The base framework version number to use, from [ESP32 arduino releases](https://github.com/espressif/arduino-esp32/releases). Defaults to `recommended`. Additional values are:\n  * `dev`: Use the latest commit from [https://github.com/espressif/arduino-esp32](https://github.com/espressif/arduino-esp32), note this may break at any time\n  \n  * `latest`: Use the latest *release* from [https://github.com/espressif/arduino-esp32/releases](https://github.com/espressif/arduino-esp32/releases), even if it hasn\u2019t been recommended yet.\n  \n  * `recommended`: Use the recommended framework version.\n  \n  \n\n*See also: [Arduino framework](https://esphome.io/components/esp32.html#id1)*"
                    },
                    "source": {
                      "key": "Optional",
                      "type": "string",
                      "docs": "**string**: The PlatformIO package or repository to use for framework. This can be used to use a custom or patched version of the framework.\n\n*See also: [Arduino framework](https://esphome.io/components/esp32.html#id1)*"
                    },
                    "platform_version": {
                      "key": "Optional",
                      "docs": "**string**: The version of the [pioarduino/espressif32](https://github.com/pioarduino/platform-espressif32/releases) package to use.\n\n*See also: [Arduino framework](https://esphome.io/components/esp32.html#id1)*"
                    },
                    "advanced": {
                      "key": "Optional",
                      "default": "{}",
                      "type": "schema",
                      "schema": {
                        "config_vars": {
                          "ignore_efuse_custom_mac": {
                            "key": "Optional",
                            "default": "False",
                            "type": "boolean"
                          }
                        }
                      },
                      "docs": "**mapping**: See [Advanced Configuration](https://esphome.io/components/esp32.html#esp32-advanced-configuration) below.\n\n*See also: [Arduino framework](https://esphome.io/components/esp32.html#id1)*"
                    }
                  }
                }
              },
              "typed_key": "type",
              "docs": "Options for the underlying framework used by ESPHome. See [Arduino framework](https://esphome.io/components/esp32.html#esp32-arduino-framework) and [ESP-IDF framework](https://esphome.io/components/esp32.html#esp32-espidf-framework).\n\n*See also: [ESP32 Platform](https://esphome.io/components/esp32.html#configuration-variables)*"
            }
          }
        }
      }
    },
    "pin": {
      "type": "schema",
      "schema": {
        "config_vars": {
          "id": {
            "key": "GeneratedID",
            "id_type": {
              "class": "esp32::ESP32InternalGPIOPin",
              "parents": [
                "InternalGPIOPin",
                "GPIOPin"
              ]
            }
          },
          "number": {
            "key": "Required",
            "docs": "**pin**: The pin number.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
          },
          "allow_other_uses": {
            "key": "Optional",
            "type": "boolean",
            "docs": "**boolean**: If the pin is also specified elsewhere in the configuration. By default multiple uses of the same pin will be flagged as an error. This option will suppress the error and is intended for rare cases where a pin is shared between multiple components. Defaults to `false`.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
          },
          "mode": {
            "key": "Optional",
            "default": "{}",
            "type": "pin",
            "schema": {
              "config_vars": {
                "input": {
                  "key": "Optional",
                  "default": "False",
                  "type": "boolean",
                  "docs": "**boolean**: If true, configure the pin as an input.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
                },
                "output": {
                  "key": "Optional",
                  "default": "False",
                  "type": "boolean",
                  "docs": "**boolean**: If true, configure the pin as an output.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
                },
                "open_drain": {
                  "key": "Optional",
                  "default": "False",
                  "type": "boolean",
                  "docs": "**boolean**: Set the pin to open-drain (as opposed to push-pull). The active pin state will then result in a high-impedance state.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
                },
                "pullup": {
                  "key": "Optional",
                  "default": "False",
                  "type": "boolean",
                  "docs": "**boolean**: Activate internal pullup resistors on the pin.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
                },
                "pulldown": {
                  "key": "Optional",
                  "default": "False",
                  "type": "boolean",
                  "docs": "**boolean**: Activate internal pulldown resistors on the pin.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
                }
              }
            },
            "modes": [],
            "docs": "**string or mapping**: Configures the pin to behave in different modes like input or output. The default value depends on the context. Accepts either a shorthand string or a mapping where each feature can be individually enabled/disabled:\n  * **input** (*Optional*, boolean): If true, configure the pin as an input.\n  \n  * **output** (*Optional*, boolean): If true, configure the pin as an output.\n  \n  * **pullup** (*Optional*, boolean): Activate internal pullup resistors on the pin.\n  \n  * **pulldown** (*Optional*, boolean): Activate internal pulldown resistors on the pin.\n  \n  * **open_drain** (*Optional*, boolean): Set the pin to open-drain (as opposed to push-pull). The active pin state will then result in a high-impedance state.\n  \n  For compatibility some shorthand modes can also be used.\n  * `INPUT`\n  \n  * `OUTPUT`\n  \n  * `OUTPUT_OPEN_DRAIN`\n  \n  * `ANALOG`\n  \n  * `INPUT_PULLUP`\n  \n  * `INPUT_PULLDOWN`\n  \n  * `INPUT_OUTPUT_OPEN_DRAIN`\n  \n  \n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
          },
          "inverted": {
            "key": "Optional",
            "default": "False",
            "type": "boolean",
            "docs": "**boolean**: If all read and written values should be treated as inverted. Defaults to `false`.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
          },
          "ignore_pin_validation_error": {
            "key": "Optional",
            "default": "False",
            "type": "boolean"
          },
          "ignore_strapping_warning": {
            "key": "Optional",
            "default": "False",
            "type": "boolean",
            "docs": "**boolean**: Certain pins on ESP32s are designated *strapping pins* and are read by the chip on reset to configure initial operation, e.g. to enable bootstrap mode. Using such pins for I/O should be avoided and ESPHome will warn if I/O is configured on a strapping pin.For more detail see [Why am I getting a warning about strapping pins?](https://esphome.io/guides/faq.html#strapping-warnings).If you are *absolutely* sure that you are using a strapping pin for I/O in a way that will not cause problems, you can suppress the warning by setting this option to `true` in the pin configuration.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
          },
          "drive_strength": {
            "key": "Optional",
            "default": "20mA",
            "type": "enum",
            "values": {
              "5.0": null,
              "10.0": null,
              "20.0": null,
              "40.0": null
            },
            "docs": "**string**: On ESP32s with esp-idf framework the pad drive strength, i.e. the maximum amount of current can additionally be set. Defaults to `20mA`. Options are `5mA`, `10mA`, `20mA`, `40mA`.\n\n*See also: [Configuration Types](https://esphome.io/guides/configuration-types.html#pin-schema)*"
          }
        }
      }
    }
  }
}