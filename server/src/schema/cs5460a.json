{
  "cs5460a.sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID",
              "id_type": {
                "class": "cs5460a::CS5460AComponent",
                "parents": [
                  "spi::SPIDevice",
                  "Component"
                ]
              }
            },
            "samples": {
              "key": "Optional",
              "default": "4000",
              "type": "integer",
              "docs": "The number of samples that go into each reading \u2013 determines that update interval of the sensors and the accuracy of the readings.  This is the number N from the CS5460A datasheet, defined as the number of *conversion cycles* within a *computation cycle*.  The component reports data at the end of each *computation cycle*.  With the standard 4.096MHz clock rate, each *conversion* takes 0.25ms so setting this to 2000 means 0.5s update interval, 40000 means 10s update interval and so on, similarly for other clock-rates.  It is recommended that the interval be an integer number of the mains AC cycles, so for the 50 Hz AC frequency countries the interval should be a multiple of 20ms, for the 60 Hz countries a multiple of 16.66 ms. Defaults to `4000` (1 second at 4.096MHz).  Admits values from 1 to 16777215.\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
            },
            "phase_offset": {
              "key": "Optional",
              "default": "0",
              "type": "integer",
              "docs": "This can be used to account for a phase offset between the voltage sensing circuit and the current sensing circuit to improve power measurement accuracy.  Admits integer values between -64 to 63, which should be offset by 0.5 and multiplied by about 8.2 CS5460A clock intervals to get the resulting time offset.  With the typical 4.096 MHz clocking this scales to a range of -128 \u03bcs to 128 \u03bcs, or -2.3\u00ba to 2.3\u00ba phase offset at 50Hz and a -2.8\u00ba to 2.8\u00ba phase offset at 60Hz.  Defaults to `0` (i.e. time offset of 4.1 MCLK cycles).  An easy way to find the correct value is to plug in a resisitve load such as an incandescent light-bulb and find the `phase_offset` value that results in the highest power reported by the sensor.\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
            },
            "pga_gain": {
              "key": "Optional",
              "default": "10X",
              "type": "enum",
              "values": {
                "10X": null,
                "50X": null
              },
              "docs": "If set to `10X` (default), the differential voltage at the current inputs must be between -250mV and +250mV.  If set to `50X` it must be within -100mV to +100mV.\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
            },
            "current_gain": {
              "key": "Optional",
              "default": "0.001",
              "type": "schema",
              "schema": {},
              "docs": "Set this to the ratio of the differential voltage at the current inputs (in Volts) vs. the actual line current to be calculated (in Amperes).  When using a shunt resistor as the current sensing element, this is going to simply equal the resistance since the differential voltage is the line current multiplied by the resistance.  When using a current transformer, the value is going to be the burden resistor\u2019s value divided by the number of turns of the transformer winding.  For a 2000 turn current transformer clamp and a 2 Ohm burden resistor this works out to 0.001 (the default if **current_gain** is not specified).\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
            },
            "voltage_gain": {
              "key": "Optional",
              "default": "0.001",
              "data_type": "zero_to_one_float",
              "docs": "Set this to the ratio of the voltage at the voltage input pins of CS5460A to the line voltage.  When using a simple voltage divider, this is the divider\u2019s ratio. When using a voltage transformer this is the secondary turns to primary turns ratio.  When using a current transformer (such as the ZMPT101B) this is equals `(secondary turns * burden resistor value) / (primary turns * limiting resistor value)`, and similarly for combinations of transfomers and voltage dividers.  Defaults to `0.001`.  Must be a positive number.\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
            },
            "current_hpf": {
              "key": "Optional",
              "default": "True",
              "type": "boolean",
              "docs": "Enables and disables the High-pass Filter on the current processing path in the CS5460A.  Defaults to `true` (enabled).\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
            },
            "voltage_hpf": {
              "key": "Optional",
              "default": "True",
              "type": "boolean",
              "docs": "Enables and disables the High-pass Filter on the voltage processing path in the CS5460A.  Defaults to `true` (enabled).\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
            },
            "pulse_energy": {
              "key": "Optional",
              "default": "10.0",
              "docs": "Sets the energy (in Watt-hours) per individual pulse on the CS5460A\u2019s EOUT pin that can be used to driver external counters / meters or a LED.  The allowed range depends on the gain parameters, defaults to `10 Wh`.\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
            },
            "voltage": {
              "key": "Optional",
              "type": "schema",
              "schema": {
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ],
                "config_vars": {
                  "unit_of_measurement": {
                    "default": "V"
                  },
                  "accuracy_decimals": {
                    "default": "0"
                  },
                  "device_class": {
                    "default": "voltage"
                  }
                }
              },
              "docs": "The sensor subcomponent that will report RMS voltage values in Volts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).  See note below about throttling.\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
            },
            "current": {
              "key": "Optional",
              "type": "schema",
              "schema": {
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ],
                "config_vars": {
                  "unit_of_measurement": {
                    "default": "A"
                  },
                  "accuracy_decimals": {
                    "default": "1"
                  },
                  "device_class": {
                    "default": "current"
                  }
                }
              },
              "docs": "The sensor subcomponent that will report RMS current values in Amperes. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).  See note below about throttling.\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
            },
            "power": {
              "key": "Optional",
              "type": "schema",
              "schema": {
                "extends": [
                  "sensor.SENSOR_SCHEMA"
                ],
                "config_vars": {
                  "unit_of_measurement": {
                    "default": "W"
                  },
                  "accuracy_decimals": {
                    "default": "0"
                  },
                  "device_class": {
                    "default": "power"
                  }
                }
              },
              "docs": "The sensor subcomponent that will report the power readings in Watts. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).  See note below about throttling.\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#configuration-variables)*"
            },
            "spi_id": {
              "key": "GeneratedID",
              "use_id_type": "spi::SPIComponent",
              "type": "use_id"
            },
            "data_rate": {
              "key": "Optional",
              "type": "enum",
              "values": {
                "80000000.0": null,
                "40000000.0": null,
                "20000000.0": null,
                "10000000.0": null,
                "8000000.0": null,
                "5000000.0": null,
                "4000000.0": null,
                "2000000.0": null,
                "1000000.0": null,
                "200000.0": null,
                "75000.0": null,
                "1000.0": null
              }
            },
            "spi_mode": {
              "key": "Optional",
              "type": "enum",
              "values": {
                "MODE0": null,
                "MODE1": null,
                "MODE2": null,
                "MODE3": null,
                "0": null,
                "1": null,
                "2": null,
                "3": null
              }
            },
            "cs_pin": {
              "key": "Optional",
              "schema": true,
              "modes": [
                "output"
              ],
              "type": "pin"
            }
          },
          "extends": [
            "core.COMPONENT_SCHEMA"
          ]
        }
      }
    }
  },
  "cs5460a": {
    "action": {
      "restart": {
        "type": "schema",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "cs5460a::CS5460AComponent",
              "type": "use_id"
            }
          }
        },
        "docs": "This action can be used in automations to interrupt the current *computation cycle* and start a new one.  This is useful if you\u2019re measuring multiple current/power values using a single CS5460A chip and a signal multiplexer.  As an example you can measure the power usage on up to wall sockets in a house by using one voltage transformer and 16 current transformers, each on the cable leading to the corresponding wall socket.  One side of all the current transformers connects directly to your CS5460A current input terminal (plus any filtering and protection circuitry as recommended in the datasheet), while the other side each connects to one channel of a CD74HC4067 analog multiplexer.  The multiplexer\u2019s single signal pin then connects to the CS5460A\u2019s second current input terminal.  Every time the CS5460A sensor publishes a new power value, an automation can switch the multiplexer to the next channel but it needs to interrupt the *computation cycle* automatically started when the previous one ended, and start a new cycle that uses current samples only from the new CD74HC4067 multiplexer channel.\n\n*See also: [`cs5460a.restart` Action](https://esphome.io/components/sensor/cs5460a.html#cs5460a-restart-action)*"
      }
    }
  }
}