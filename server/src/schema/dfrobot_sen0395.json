{
  "dfrobot_sen0395": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID",
              "id_type": {
                "class": "dfrobot_sen0395::DfrobotSen0395Component",
                "parents": [
                  "Component"
                ]
              },
              "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation. Necessary if you want to define multiple instances of this component.\n\n*See also: [Hub Component](https://esphome.io/components/dfrobot_sen0395.html#configuration-variables)*"
            },
            "uart_id": {
              "key": "GeneratedID",
              "use_id_type": "uart::UARTComponent",
              "type": "use_id",
              "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Bus](https://esphome.io/components/uart.html) if you want to use multiple UART buses.\n\n*See also: [Hub Component](https://esphome.io/components/dfrobot_sen0395.html#configuration-variables)*"
            }
          }
        },
        "is_list": true
      }
    },
    "action": {
      "reset": {
        "type": "schema",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID",
              "use_id_type": "dfrobot_sen0395::DfrobotSen0395Component",
              "type": "use_id",
              "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the mmWave component. Useful when multiple instances of this component are defined.\n\n*See also: [dfrobot_sen0395 Switch](https://esphome.io/components/dfrobot_sen0395.html#id4)*"
            }
          }
        },
        "docs": "Restart the sensor.\n\n*See also: [`dfrobot_sen0395.reset` Action](https://esphome.io/components/dfrobot_sen0395.html#dfrobot-sen0395-reset-action)*"
      },
      "settings": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID",
              "use_id_type": "dfrobot_sen0395::DfrobotSen0395Component",
              "type": "use_id",
              "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the mmWave sensor on which settings should be changed. If only one radar is defined, this is optional.\n\n*See also: [dfrobot_sen0395 Switch](https://esphome.io/components/dfrobot_sen0395.html#id3)*"
            },
            "factory_reset": {
              "key": "Optional",
              "templatable": true,
              "type": "boolean",
              "docs": "**boolean**: If set to true, a factory reset of the sensor will be performed (before changing other options if present). Ignored if not set or set to `false`.\n\n*See also: [dfrobot_sen0395 Switch](https://esphome.io/components/dfrobot_sen0395.html#id3)*"
            },
            "detection_segments": {
              "key": "Optional",
              "docs": "**list**: A list of detection segments. A segment specifies from where to where detection should trigger. One to four segments and ranges from 0cm to 9m may be specified. Distances should be defined in steps of 15cm. Note that the specified ranges are rounded internally. Segments can be defined in a one or two dimensional list. Pairs of values must be defined (from distance to distance). The default is one range from 0cm to 3m.**Examples**\n  \n  ```\n  detection_segments:\n    - [0cm, 3m]\n    - [5.1m, 6.6m]\n  ```\n  In the above example, if a person was present in the range between 0cm and 3m (distance from the sensor) or between 5.1m and 6.6m the sensor would trigger (meaning a person was detected). If a person is present between 3.1m and 5m or 6.7m and 9m it would not trigger.\n  \n  ```\n  detection_segments:\n    - !lambda |-\n        return 0;\n    - !lambda |-\n        return return id(mwave_max_distance).state;\n  ```\n  Section values can be defined using lambdas, so you can set the distances depending on other entities. Distances are defined as a float in meters (10cm = 0.1). If you return a negative value (-1) the segment will not be set.\n\n*See also: [dfrobot_sen0395 Switch](https://esphome.io/components/dfrobot_sen0395.html#id3)*"
            },
            "output_latency": {
              "key": "Optional",
              "type": "schema",
              "schema": {
                "config_vars": {
                  "delay_after_detect": {
                    "key": "Required",
                    "templatable": true,
                    "type": "schema",
                    "schema": {
                      "extends": [
                        "core.positive_time_period_milliseconds"
                      ]
                    },
                    "docs": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Time to wait before signaling that a person was detected. Specify in steps of 25 ms. Factory default is 2.5s. Value is tempatable: Return seconds value (100 ms = 0.1). Returning -1 keeps the value unchanged.\n\n*See also: [dfrobot_sen0395 Switch](https://esphome.io/components/dfrobot_sen0395.html#id3)*"
                  },
                  "delay_after_disappear": {
                    "key": "Required",
                    "templatable": true,
                    "type": "schema",
                    "schema": {
                      "extends": [
                        "core.positive_time_period_milliseconds"
                      ]
                    },
                    "docs": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Time to wait before signaling that a person is no longer detected. Specify in steps of 25 ms. Factory default is 10 s. Value is tempatable: Return seconds value (100 ms = 0.1). Returning -1 keeps the value unchanged.\n\n*See also: [dfrobot_sen0395 Switch](https://esphome.io/components/dfrobot_sen0395.html#id3)*"
                  }
                }
              },
              "docs": "**dictionary**: Time to wait before signaling that a person was detected. Specify in steps of 25 ms. Factory default is 2.5s. Value is tempatable: Return seconds value (100 ms = 0.1). Returning -1 keeps the value unchanged.\n  \n  * **delay_after_disappear** (**Required**, [Time](https://esphome.io/guides/configuration-types.html#config-time)): Time to wait before signaling that a person is no longer detected. Specify in steps of 25 ms. Factory default is 10 s. Value is tempatable: Return seconds value (100 ms = 0.1). Returning -1 keeps the value unchanged.\n  \n  \n\n*See also: [dfrobot_sen0395 Switch](https://esphome.io/components/dfrobot_sen0395.html#id3)*"
            },
            "sensitivity": {
              "key": "Optional",
              "templatable": true,
              "type": "integer",
              "docs": "**int**: Set the sensitivity of the sensor. Ranges from 0 to 9. Value is tempatable: Return 0-9. Returning -1 keeps the value unchanged.\n\n*See also: [dfrobot_sen0395 Switch](https://esphome.io/components/dfrobot_sen0395.html#id3)*"
            }
          }
        },
        "docs": "Each change to the configuration of the mmWave radar triggers a write to its internal flash/EEPROM. Write cycles to this memory are limited, so avoid the practice of changing settings frequently. Determine the appropriate settings for your device and avoid changing them unless absolutely necessary.\n\n*See also: [`dfrobot_sen0395.settings` Action](https://esphome.io/components/dfrobot_sen0395.html#dfrobot-sen0395-settings-action)*"
      }
    }
  },
  "dfrobot_sen0395.binary_sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "extends": [
            "binary_sensor.BINARY_SENSOR_SCHEMA"
          ],
          "config_vars": {
            "device_class": {
              "default": "motion"
            },
            "dfrobot_sen0395_id": {
              "key": "GeneratedID",
              "use_id_type": "dfrobot_sen0395::DfrobotSen0395Component",
              "type": "use_id",
              "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the DFRobot mmWave component defined above. Required when multiple instances of the `dfrobot_sen0395` component are defined.\n\n*See also: [dfrobot_sen0395 Binary Sensor](https://esphome.io/components/dfrobot_sen0395.html#id1)*"
            }
          }
        }
      }
    }
  },
  "dfrobot_sen0395.switch": {
    "schemas": {
      "_SWITCH_SCHEMA": {
        "type": "schema",
        "schema": {
          "extends": [
            "switch._SWITCH_SCHEMA",
            "core.COMPONENT_SCHEMA"
          ],
          "config_vars": {
            "restore_mode": {
              "key": "Optional",
              "default": "ALWAYS_OFF",
              "type": "enum",
              "values": {
                "RESTORE_DEFAULT_OFF": null,
                "RESTORE_DEFAULT_ON": null,
                "ALWAYS_OFF": null,
                "ALWAYS_ON": null,
                "RESTORE_INVERTED_DEFAULT_OFF": null,
                "RESTORE_INVERTED_DEFAULT_ON": null,
                "DISABLED": null
              }
            },
            "entity_category": {
              "default": "config"
            },
            "dfrobot_sen0395_id": {
              "key": "GeneratedID",
              "use_id_type": "dfrobot_sen0395::DfrobotSen0395Component",
              "type": "use_id"
            }
          }
        }
      },
      "CONFIG_SCHEMA": {
        "type": "typed",
        "types": {
          "sensor_active": {
            "extends": [
              "dfrobot_sen0395.switch._SWITCH_SCHEMA"
            ],
            "config_vars": {
              "id": {
                "key": "GeneratedID",
                "id_type": {
                  "class": "dfrobot_sen0395::Sen0395PowerSwitch",
                  "parents": [
                    "dfrobot_sen0395::DfrobotSen0395Switch",
                    "switch_::Switch",
                    "EntityBase",
                    "Component",
                    "Parented<dfrobot_sen0395::DfrobotSen0395Component>",
                    "Parented"
                  ]
                }
              }
            }
          },
          "turn_on_led": {
            "extends": [
              "dfrobot_sen0395.switch._SWITCH_SCHEMA"
            ],
            "config_vars": {
              "id": {
                "key": "GeneratedID",
                "id_type": {
                  "class": "dfrobot_sen0395::Sen0395LedSwitch",
                  "parents": [
                    "dfrobot_sen0395::DfrobotSen0395Switch",
                    "switch_::Switch",
                    "EntityBase",
                    "Component",
                    "Parented<dfrobot_sen0395::DfrobotSen0395Component>",
                    "Parented"
                  ]
                }
              }
            }
          },
          "presence_via_uart": {
            "extends": [
              "dfrobot_sen0395.switch._SWITCH_SCHEMA"
            ],
            "config_vars": {
              "id": {
                "key": "GeneratedID",
                "id_type": {
                  "class": "dfrobot_sen0395::Sen0395UartPresenceSwitch",
                  "parents": [
                    "dfrobot_sen0395::DfrobotSen0395Switch",
                    "switch_::Switch",
                    "EntityBase",
                    "Component",
                    "Parented<dfrobot_sen0395::DfrobotSen0395Component>",
                    "Parented"
                  ]
                }
              }
            }
          },
          "start_after_boot": {
            "extends": [
              "dfrobot_sen0395.switch._SWITCH_SCHEMA"
            ],
            "config_vars": {
              "id": {
                "key": "GeneratedID",
                "id_type": {
                  "class": "dfrobot_sen0395::Sen0395StartAfterBootSwitch",
                  "parents": [
                    "dfrobot_sen0395::DfrobotSen0395Switch",
                    "switch_::Switch",
                    "EntityBase",
                    "Component",
                    "Parented<dfrobot_sen0395::DfrobotSen0395Component>",
                    "Parented"
                  ]
                }
              }
            }
          }
        },
        "typed_key": "type",
        "docs": "One of:\n  * `presence_via_uart`: when enabled, the module sends presence information via both the serial connection and GPIO pin; when disabled, presense is indicated only via the GPIO pin.\n  \n  * `sensor_active`: when enabled, presence detection is reported; when disabled, presense will not be reported.\n  \n  * `start_after_boot`: when enabled, the sensor will start immediately after power-on; when disabled, the sensor must be manually started.\n  \n  * `turn_on_led`: when enabled, the mmWave sensor\u2019s LED blinks during operation; when disabled, the LED will always remain off.\n  \n  \n\n*See also: [dfrobot_sen0395 Switch](https://esphome.io/components/dfrobot_sen0395.html#id2)*"
      }
    }
  }
}