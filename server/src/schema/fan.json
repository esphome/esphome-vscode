{
  "fan": {
    "components": {
      "bedjet": {
        "dependencies": [
          "bedjet"
        ],
        "docs": "The `fan` platform exposes the BedJet\u2019s fan-related functionality, including on/off and speed control.\n\n*See also: [bedjet Fan](https://esphome.io/components/climate/bedjet.html#bedjet-fan)*"
      },
      "binary": {
        "docs": "The `binary` fan platform lets you represent any binary [Output Component](https://esphome.io/components/output/index.html#output) as a fan.\n\n*See also: [Binary Fan](https://esphome.io/components/fan/binary.html#binary-fan)*"
      },
      "copy": {
        "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The fan that should be mirrored.\n\n*See also: [Copy Fan](https://esphome.io/components/copy.html#copy-fan)*"
      },
      "hbridge": {
        "docs": "The `hbridge` fan platform allows you to use a compatible *h-bridge* (L298N, DRV8871, MX1508, BTS7960, L9110S, DRV8833, TB6612, etc.) to control a fan (or motor/solenoid).\n\n*See also: [H-bridge Fan](https://esphome.io/components/fan/hbridge.html#h-bridge-fan)*"
      },
      "speed": {
        "docs": "The `speed` fan platform lets you represent any float [Output Component](https://esphome.io/components/output/index.html#output) as a fan that supports speed settings.\n\n*See also: [Speed Fan](https://esphome.io/components/fan/speed.html#speed-fan)*"
      },
      "template": {
        "docs": "The `template` fan platform lets you create a fan interface using only triggers.\n\n*See also: [Template Fan](https://esphome.io/components/fan/template.html#template-fan)*"
      },
      "tuya": {
        "dependencies": [
          "tuya"
        ],
        "docs": "The `tuya` fan platform creates a variable speed fan from a tuya component.\n\n*See also: [Tuya Fan](https://esphome.io/components/fan/tuya.html#tuya-fan)*"
      }
    },
    "schemas": {
      "FAN_SCHEMA": {
        "type": "schema",
        "schema": {
          "extends": [
            "core.ENTITY_BASE_SCHEMA",
            "core.MQTT_COMMAND_COMPONENT_SCHEMA"
          ],
          "config_vars": {
            "web_server": {
              "key": "Optional",
              "type": "schema",
              "schema": {
                "config_vars": {
                  "web_server_id": {
                    "key": "Optional",
                    "use_id_type": "web_server::WebServer",
                    "type": "use_id"
                  },
                  "sorting_weight": {
                    "key": "Optional"
                  },
                  "sorting_group_id": {
                    "key": "Optional",
                    "use_id_type": "int",
                    "type": "use_id"
                  }
                }
              }
            },
            "id": {
              "key": "GeneratedID",
              "id_type": {
                "class": "fan::Fan",
                "parents": [
                  "EntityBase"
                ]
              },
              "docs": "**string**: Manually specify the ID for code generation. At least one of **id** and **name** must be specified.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "restore_mode": {
              "key": "Optional",
              "default": "ALWAYS_OFF",
              "type": "enum",
              "values": {
                "NO_RESTORE": {
                  "docs": "Don\u2019t restore any state."
                },
                "ALWAYS_OFF": null,
                "ALWAYS_ON": {
                  "docs": "Always initialize the fan as ON on bootup."
                },
                "RESTORE_DEFAULT_OFF": {
                  "docs": "Attempt to restore state and default to OFF if not possible to restore."
                },
                "RESTORE_DEFAULT_ON": {
                  "docs": "Attempt to restore state and default to ON."
                },
                "RESTORE_INVERTED_DEFAULT_OFF": {
                  "docs": "Attempt to restore state inverted from the previous state and default to OFF."
                },
                "RESTORE_INVERTED_DEFAULT_ON": {
                  "docs": "Attempt to restore state inverted from the previous state and default to ON."
                }
              },
              "docs": "Control how the fan attempts to restore state on boot.\n  * `NO_RESTORE` - Don\u2019t restore any state.\n  \n  * `RESTORE_DEFAULT_OFF` - Attempt to restore state and default to OFF if not possible to restore.\n  \n  * `RESTORE_DEFAULT_ON` - Attempt to restore state and default to ON.\n  \n  * `RESTORE_INVERTED_DEFAULT_OFF` - Attempt to restore state inverted from the previous state and default to OFF.\n  \n  * `RESTORE_INVERTED_DEFAULT_ON` - Attempt to restore state inverted from the previous state and default to ON.\n  \n  * `ALWAYS_OFF` (Default) - Always initialize the fan as OFF on bootup.\n  \n  * `ALWAYS_ON` - Always initialize the fan as ON on bootup.\n  \n  \n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "mqtt_id": {
              "key": "Optional",
              "id_type": {
                "class": "mqtt::MQTTFanComponent",
                "parents": [
                  "mqtt::MQTTComponent",
                  "Component"
                ]
              }
            },
            "oscillation_state_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to publish fan oscillation state changes to.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "oscillation_command_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to receive oscillation commands on.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "speed_level_state_topic": {
              "key": "Optional",
              "docs": "**int**: The topic to publish numeric fan speed state changes to (range: 0 to speed count).\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "speed_level_command_topic": {
              "key": "Optional",
              "docs": "**int**: The topic to receive numeric speed commands on (range: 0 to speed count).\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "speed_state_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to publish fan speed state changes to (options: LOW, MEDIUM, HIGH).\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "speed_command_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to receive speed commands on (options: LOW, MEDIUM, HIGH).\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "on_state": {
              "key": "Optional",
              "type": "trigger",
              "docs": "**[Action](https://esphome.io/automations/actions.html#config-action)**: An automation to perform when the fan state is changed. See [fan.on_state Trigger](https://esphome.io/components/fan/index.html#fan-on-state-trigger).\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "on_turn_on": {
              "key": "Optional",
              "type": "trigger",
              "docs": "**[Action](https://esphome.io/automations/actions.html#config-action)**: An automation to perform when the fan is turned on. See [fan.on_turn_on / fan.on_turn_off Trigger](https://esphome.io/components/fan/index.html#fan-on-turn-on-off-trigger).\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "on_turn_off": {
              "key": "Optional",
              "type": "trigger",
              "docs": "**[Action](https://esphome.io/automations/actions.html#config-action)**: An automation to perform when the fan is turned off. See [fan.on_turn_on / fan.on_turn_off Trigger](https://esphome.io/components/fan/index.html#fan-on-turn-on-off-trigger).\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "on_direction_set": {
              "key": "Optional",
              "type": "trigger",
              "docs": "**[Action](https://esphome.io/automations/actions.html#config-action)**: An automation to perform when the fan direction is changed. See [fan.on_direction_set Trigger](https://esphome.io/components/fan/index.html#fan-on-direction-set-trigger).\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "on_oscillating_set": {
              "key": "Optional",
              "type": "trigger",
              "docs": "**[Action](https://esphome.io/automations/actions.html#config-action)**: An automation to perform when the fan oscillating state is changed. See [fan.on_oscillating_set Trigger](https://esphome.io/components/fan/index.html#fan-on-oscillating-set-trigger).\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "on_speed_set": {
              "key": "Optional",
              "type": "trigger",
              "docs": "**[Action](https://esphome.io/automations/actions.html#config-action)**: An automation to perform when the fan speed is changed. See [fan.on_speed_set Trigger](https://esphome.io/components/fan/index.html#fan-on-speed-set-trigger).\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            },
            "on_preset_set": {
              "key": "Optional",
              "type": "trigger",
              "docs": "**[Action](https://esphome.io/automations/actions.html#config-action)**: An automation to perform when the fan preset mode is changed. See [fan.on_preset_set Trigger](https://esphome.io/components/fan/index.html#fan-on-preset-set-trigger).\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#base-fan-configuration)*"
            }
          }
        }
      },
      "_PRESET_MODES_SCHEMA": {
        "is_list": true,
        "type": "string"
      },
      "FAN_ACTION_SCHEMA": {
        "type": "schema",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "fan::Fan",
              "type": "use_id"
            }
          }
        }
      }
    },
    "action": {
      "toggle": {
        "type": "schema",
        "schema": {
          "extends": [
            "fan.FAN_ACTION_SCHEMA"
          ]
        },
        "docs": "Toggles the ON/OFF state of the fan with the given ID when executed.\n\n*See also: [`fan.toggle` Action](https://esphome.io/components/fan/index.html#fan-toggle-action)*"
      },
      "turn_off": {
        "type": "schema",
        "schema": {
          "extends": [
            "fan.FAN_ACTION_SCHEMA"
          ]
        },
        "docs": "Turns the fan with the given ID off when executed.\n\n*See also: [`fan.turn_off` Action](https://esphome.io/components/fan/index.html#fan-turn-off-action)*"
      },
      "turn_on": {
        "type": "schema",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "fan::Fan",
              "type": "use_id",
              "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the fan.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#fan-turn-on-action)*"
            },
            "oscillating": {
              "key": "Optional",
              "templatable": true,
              "type": "boolean",
              "docs": "**boolean, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Set the oscillation state of the fan. Defaults to not affecting oscillation.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#fan-turn-on-action)*"
            },
            "speed": {
              "key": "Optional",
              "templatable": true,
              "type": "integer",
              "docs": "**int, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Set the speed level of the fan. Can be a number between 1 and the maximum speed level of the fan.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#fan-turn-on-action)*"
            },
            "direction": {
              "key": "Optional",
              "templatable": true,
              "type": "enum",
              "values": {
                "FORWARD": null,
                "REVERSE": null
              },
              "docs": "**string, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Set the direction of the fan. Can be either `forward` or `reverse`. Defaults to not changing the direction.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#fan-turn-on-action)*"
            }
          }
        },
        "docs": "Turns the fan with the given ID on when executed.\n\n*See also: [`fan.turn_on` Action](https://esphome.io/components/fan/index.html#fan-turn-on-action)*"
      },
      "cycle_speed": {
        "type": "schema",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "fan::Fan",
              "type": "use_id",
              "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the fan.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#fan-cycle-speed-action)*"
            },
            "off_speed_cycle": {
              "key": "Optional",
              "default": "True",
              "type": "boolean",
              "docs": "**boolean, [templatable](https://esphome.io/automations/templates.html#config-templatable)**: Determines if the fan will cycle off after cycling though its highest speed. Can be `true` or `false`. If `false` fan will cycle to its lowest speed instead of turning off.  Defaults to `true`.\n\n*See also: [Fan Component](https://esphome.io/components/fan/index.html#fan-cycle-speed-action)*"
            }
          }
        },
        "docs": "Increments through speed levels of the fan with the given ID when executed. If the fan\u2019s speed level is set to maximum when executed, fan will cycle off unless `off_speed_cycle` is set to `false`.\n\n*See also: [`fan.cycle_speed` Action](https://esphome.io/components/fan/index.html#fan-cycle-speed-action)*"
      }
    },
    "condition": {
      "is_off": {
        "type": "schema",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "fan::Fan",
              "type": "use_id"
            }
          }
        }
      },
      "is_on": {
        "type": "schema",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "fan::Fan",
              "type": "use_id"
            }
          }
        }
      }
    }
  }
}