{
  "api": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID",
              "id_type": {
                "class": "api::APIServer",
                "parents": [
                  "Component",
                  "Controller"
                ]
              },
              "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            },
            "port": {
              "key": "Optional",
              "default": "6053",
              "type": "integer",
              "data_type": "port",
              "docs": "**int**: The port to run the API Server on. Defaults to `6053`.\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            },
            "password": {
              "key": "Optional",
              "default": "",
              "type": "string",
              "docs": "****Deprecated**, string**: The password to protect the API Server with. Defaults to no password. It is recommended to use the `encryption` -> `key` above instead of the the `password`.\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            },
            "reboot_timeout": {
              "key": "Optional",
              "default": "15min",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              },
              "docs": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: The amount of time to wait before rebooting when no client connects to the API. This is needed because sometimes the low level ESP functions report that the ESP is connected to the network, when in fact it is not - only a full reboot fixes it. Can be disabled by setting this to `0s`. Defaults to `15min`.\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            },
            "services": {
              "key": "Optional",
              "type": "schema",
              "schema": {
                "extends": [
                  "api.ACTIONS_SCHEMA"
                ]
              }
            },
            "actions": {
              "key": "Optional",
              "type": "schema",
              "schema": {
                "extends": [
                  "api.ACTIONS_SCHEMA"
                ]
              },
              "docs": "**list**: A list of user-defined actions. See [User-defined Actions](https://esphome.io/components/api.html#api-device-actions).\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            },
            "encryption": {
              "key": "Optional",
              "docs": "Enable transport encryption of the API layer.\n  * **key** (**Required**, string): The pre-shared key for the encryption. This is a 32-byte base64 encoded string. Below you can copy a key randomly generated in your browser:<input type=\"text\" id=\"api-key\" onclick=\"this.focus();this.select()\" style=\"width: 350px; max-width: 75vw;\" readonly=\"readonly\"> <script>   // https://stackoverflow.com/a/62362724   function bytesArrToBase64(arr) {     const abc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"; // base64 alphabet     const bin = n => n.toString(2).padStart(8,0); // convert num to 8-bit binary string     const l = arr.length     let result = '';      for(let i=0; i<=(l-1)/3; i++) {       let c1 = i*3+1>=l; // case when \"=\" is on end       let c2 = i*3+2>=l; // case when \"=\" is on end       let chunk = bin(arr[3*i]) + bin(c1? 0:arr[3*i+1]) + bin(c2? 0:arr[3*i+2]);       let r = chunk.match(/.{1,6}/g).map((x,j)=> j==3&&c2 ? '=' :(j==2&&c1 ? '=':abc[+('0b'+x)]));       result += r.join('');     }      return result;   }    let array = new Uint8Array(32);   window.crypto.getRandomValues(array);   document.getElementById(\"api-key\").value = bytesArrToBase64(array); </script>\n  \n  \n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            },
            "on_client_connected": {
              "key": "Optional",
              "type": "trigger",
              "docs": "**[Action](https://esphome.io/automations/actions.html#config-action)**: An automation to perform when a client connects to the API. See [on_client_connected Trigger](https://esphome.io/components/api.html#api-on-client-connected-trigger).\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            },
            "on_client_disconnected": {
              "key": "Optional",
              "type": "trigger",
              "docs": "**[Action](https://esphome.io/automations/actions.html#config-action)**: An automation to perform when a client disconnects from the API. See [on_client_disconnected Trigger](https://esphome.io/components/api.html#api-on-client-disconnected-trigger).\n\n*See also: [Native API Component](https://esphome.io/components/api.html#configuration-variables)*"
            }
          },
          "extends": [
            "core.COMPONENT_SCHEMA"
          ]
        }
      },
      "ACTIONS_SCHEMA": {
        "type": "trigger",
        "schema": {
          "config_vars": {
            "service": {
              "key": "Optional",
              "type": "string"
            },
            "action": {
              "key": "Optional",
              "type": "string"
            },
            "variables": {
              "key": "String",
              "default": "{}",
              "key_type": "validate_id_name",
              "type": "schema",
              "schema": {
                "config_vars": {
                  "string": {
                    "type": "enum",
                    "values": {
                      "bool": null,
                      "int": null,
                      "float": null,
                      "string": null,
                      "bool[]": null,
                      "int[]": null,
                      "float[]": null,
                      "string[]": null
                    }
                  }
                }
              }
            },
            "then": {
              "type": "trigger"
            }
          }
        },
        "has_required_var": true
      },
      "KEY_VALUE_SCHEMA": {
        "key": "String",
        "key_type": "string",
        "type": "schema",
        "schema": {
          "config_vars": {
            "string": {
              "templatable": true,
              "type": "string"
            }
          }
        }
      },
      "HOMEASSISTANT_ACTION_ACTION_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID",
              "use_id_type": "api::APIServer",
              "type": "use_id"
            },
            "service": {
              "key": "Optional",
              "templatable": true,
              "type": "string"
            },
            "action": {
              "key": "Optional",
              "templatable": true,
              "type": "string",
              "docs": "**string**: The Home Assistant [Action](https://www.home-assistant.io/docs/scripts/service-calls/) to perform.\n\n*See also: [Native API Component](https://esphome.io/components/api.html#id2)*"
            },
            "data": {
              "key": "Optional",
              "default": "{}",
              "type": "schema",
              "schema": {
                "extends": [
                  "api.KEY_VALUE_SCHEMA"
                ]
              },
              "docs": "**mapping**: Optional *static* data to perform the action with.\n\n*See also: [Native API Component](https://esphome.io/components/api.html#id2)*"
            },
            "data_template": {
              "key": "Optional",
              "default": "{}",
              "type": "schema",
              "schema": {
                "extends": [
                  "api.KEY_VALUE_SCHEMA"
                ]
              },
              "docs": "**mapping**: Optional template data to perform the action with. This is evaluated on the Home Assistant side with Home Assistant\u2019s templating engine.\n\n*See also: [Native API Component](https://esphome.io/components/api.html#id2)*"
            },
            "variables": {
              "key": "String",
              "default": "{}",
              "key_type": "string",
              "type": "schema",
              "schema": {
                "config_vars": {
                  "string": {}
                }
              },
              "docs": "**mapping**: Optional variables that can be used in the `data_template`. Values are [lambdas](https://esphome.io/automations/templates.html#config-lambda) and will be evaluated before sending the request.\n\n*See also: [Native API Component](https://esphome.io/components/api.html#id2)*"
            }
          }
        }
      }
    },
    "condition": {
      "connected": {
        "docs": "This [Condition](https://esphome.io/automations/actions.html#config-condition) checks if at least one client is connected to the ESPHome native API. Please note client not only includes Home Assistant, but also ESPHome\u2019s OTA log output if logs are shown remotely.\n\n*See also: [`api.connected` Condition](https://esphome.io/components/api.html#api-connected-condition)*"
      }
    }
  }
}