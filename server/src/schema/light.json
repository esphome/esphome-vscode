{
  "light": {
    "components": {
      "beken_spi_led_strip": {
        "dependencies": [
          "libretiny"
        ],
        "docs": "This is a component using the Beken SPI DMA interface to drive addressable LED strips.\n\n*See also: [Beken SPI LED Strip](https://esphome.io/components/light/beken_spi_led_strip.html#beken-spi-led-strip)*"
      },
      "binary": {
        "docs": "The `binary` light platform creates a simple ON/OFF-only light from a [binary output component](https://esphome.io/components/output/index.html#output).\n\n*See also: [Binary Light](https://esphome.io/components/light/binary.html#binary-light)*"
      },
      "color_temperature": {
        "docs": "The `color_temperature` light platform creates a Color Temperature light from 2 [float output components](https://esphome.io/components/output/index.html#output). One channel controls the LED temperature, and the other channel controls the brightness.\n\n*See also: [Color Temperature Light](https://esphome.io/components/light/color_temperature.html#color-temperature-light)*"
      },
      "custom": {},
      "cwww": {
        "docs": "The `cwww` light platform creates a cold white + warm white light from 2 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel). The two channels can be controlled individually or together.\n\n*See also: [Cold White + Warm White Light](https://esphome.io/components/light/cwww.html#cold-white-warm-white-light)*"
      },
      "esp32_rmt_led_strip": {
        "dependencies": [
          "esp32"
        ],
        "docs": "This is a component using the ESP32 RMT peripheral to drive most addressable LED strips.\n\n*See also: [ESP32 RMT LED Strip](https://esphome.io/components/light/esp32_rmt_led_strip.html#esp32-rmt-led-strip)*"
      },
      "fastled_clockless": {
        "docs": "The `fastled_clockless` light platform allows you to create RGB lights in ESPHome for a [number of supported chipsets](https://esphome.io/components/light/fastled.html#fastled-clockless-chipsets).\n\n*See also: [Clockless](https://esphome.io/components/light/fastled.html#clockless)*"
      },
      "fastled_spi": {
        "docs": "The `fastled_spi` light platform allows you to create RGB lights in ESPHome for a [number of supported chipsets](https://esphome.io/components/light/fastled.html#fastled-spi-chipsets).\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#spi)*"
      },
      "hbridge": {
        "docs": "The `hbridge` light platform creates a dual color brightness controlled light from two [float output component](https://esphome.io/components/output/index.html#output).\n\n*See also: [H-bridge Light](https://esphome.io/components/light/hbridge.html#h-bridge-light)*"
      },
      "lvgl": {
        "docs": "The `lvgl` light platform creates a light from an LVGL widget and requires [LVGL](https://esphome.io/components/lvgl/index.html) to be configured.\n\n*See also: [LVGL Light](https://esphome.io/components/light/lvgl.html#lvgl-light)*"
      },
      "m5stack_8angle": {},
      "monochromatic": {
        "docs": "The `monochromatic` light platform creates a simple brightness-only light from an [float output component](https://esphome.io/components/output/index.html#output).\n\n*See also: [Monochromatic Light](https://esphome.io/components/light/monochromatic.html#monochromatic-light)*"
      },
      "neopixelbus": {
        "docs": "NeoPixelBus does **not** work with ESP-IDF.\n\n*See also: [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html#neopixelbus-light)*"
      },
      "partition": {
        "docs": "The `partition` light platform allows you to combine multiple addressable light segments (like [FastLED Light](https://esphome.io/components/light/fastled.html) or [NeoPixelBus Light](https://esphome.io/components/light/neopixelbus.html)) and/or individual lights (like [RGB Light](https://esphome.io/components/light/rgb.html)) into a single addressable light. This platform also allows splitting up an addressable light into multiple segments, so that segments can be individually controlled.\n\n*See also: [Light Partition](https://esphome.io/components/light/partition.html#light-partition)*"
      },
      "rgb": {
        "docs": "The `rgb` light platform creates an RGB light from 3 [float output components](https://esphome.io/components/output/index.html#output) (one for each color channel).\n\n*See also: [RGB Light](https://esphome.io/components/light/rgb.html#rgb-light)*"
      },
      "rgbct": {
        "docs": "The `rgbct` light platform creates an RGBWT (color temperature + white brightness) light from 5 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel).\n\n*See also: [RGBCT Light](https://esphome.io/components/light/rgbct.html#rgbct-light)*"
      },
      "rgbw": {
        "docs": "The `rgbw` light platform creates an RGBW light from 4 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel).\n\n*See also: [RGBW Light](https://esphome.io/components/light/rgbw.html#rgbw-light)*"
      },
      "rgbww": {
        "docs": "The `rgbww` light platform creates an RGBWW (cold white + warm white) light from 5 [float output components](https://esphome.io/components/output/index.html#output) (one for each channel). The cold and warm white channels can be controlled individually or together, see [Mixing](https://esphome.io/components/light/cwww.html#cwww-mixing) for more information.\n\n*See also: [RGBWW Light](https://esphome.io/components/light/rgbww.html#rgbww-light)*"
      },
      "rp2040_pio_led_strip": {
        "dependencies": [
          "rp2040"
        ],
        "docs": "This is a component using the RP2040 PIO peripheral to drive most addressable LED strips.\n\n*See also: [RP2040 PIO LED Strip](https://esphome.io/components/light/rp2040_pio_led_strip.html#rp2040-pio-led-strip)*"
      },
      "shelly_dimmer": {
        "dependencies": [
          "uart",
          "esp8266"
        ],
        "docs": "The `shelly_dimmer` component adds support for the dimming and power-metering functionality that can be found the [Shelly Dimmer 2](https://shelly.cloud/knowledge-base/devices/shelly-dimmer-2/). The interaction with mains is done via an STM32 microcontroller that is automatically (when configured) flashed with an [open source firmware](https://github.com/jamesturton/shelly-dimmer-stm32). A detailed analysis of the Shelly Dimmer 2 hardware is given [here](https://github.com/arendst/Tasmota/issues/6914).\n\n*See also: [Shelly Dimmer](https://esphome.io/components/light/shelly_dimmer.html#shelly-dimmer)*"
      },
      "sonoff_d1": {
        "dependencies": [
          "uart",
          "light"
        ],
        "docs": "The `sonoff_d1` light platform creates a simple brightness-only light for the hardware found in [Sonoff D1 dimmer](https://itead.cc/product/sonoff-d1-smart-dimmer-switch/). Installations with Sonoff RM433 433MHz radio remotes are also supported. Use this component to integrate Sonoff D1 dimmer into ESPHome / Home Assistant ecosystem.\n\n*See also: [Sonoff D1 Dimmer](https://esphome.io/components/light/sonoff_d1.html#sonoff-d1-dimmer)*"
      },
      "spi_led_strip": {
        "docs": "The `spi_led_strip` light platform drives one or more SPI interfaced RGB LEDs. These LEDs are often used in strips, where each LED is individually addressable. This component requires an SPI interface to be configured.\n\n*See also: [SPI LED Strip Light](https://esphome.io/components/light/spi_led_strip.html#spi-led-strip-light)*"
      },
      "status_led": {
        "docs": "The `status_led` light platform allows to share a single LED for indicating the status of the device (when on error/warning state) or as binary light (when on OK state). This is useful for devices with only one LED available. You can also use a binary [Output Component](https://esphome.io/components/output/index.html#output).\n\n*See also: [Status LED Light](https://esphome.io/components/light/status_led.html#status-led-light)*"
      },
      "tuya": {
        "dependencies": [
          "tuya"
        ],
        "docs": "The `tuya` light platform creates a simple brightness-only light from a tuya serial component.\n\n*See also: [Tuya Dimmer](https://esphome.io/components/light/tuya.html#tuya-dimmer)*"
      }
    },
    "schemas": {
      "LIGHT_STATE_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "color_mode": {
              "key": "Optional",
              "type": "enum",
              "values": {
                "ON_OFF": null,
                "BRIGHTNESS": null,
                "WHITE": null,
                "COLOR_TEMPERATURE": null,
                "COLD_WARM_WHITE": null,
                "RGB": null,
                "RGB_WHITE": null,
                "RGB_COLOR_TEMPERATURE": null,
                "RGB_COLD_WARM_WHITE": null
              }
            },
            "state": {
              "key": "Optional",
              "templatable": true,
              "type": "boolean"
            },
            "brightness": {
              "key": "Optional",
              "templatable": true
            },
            "color_brightness": {
              "key": "Optional",
              "templatable": true
            },
            "red": {
              "key": "Optional",
              "templatable": true
            },
            "green": {
              "key": "Optional",
              "templatable": true
            },
            "blue": {
              "key": "Optional",
              "templatable": true
            },
            "white": {
              "key": "Optional",
              "templatable": true
            },
            "color_temperature": {
              "key": "Optional",
              "templatable": true
            },
            "cold_white": {
              "key": "Optional",
              "templatable": true
            },
            "warm_white": {
              "key": "Optional",
              "templatable": true
            }
          }
        }
      },
      "LIGHT_SCHEMA": {
        "type": "schema",
        "schema": {
          "extends": [
            "core.ENTITY_BASE_SCHEMA",
            "core.MQTT_COMMAND_COMPONENT_SCHEMA"
          ],
          "config_vars": {
            "web_server": {
              "key": "Optional",
              "type": "schema",
              "schema": {
                "config_vars": {
                  "web_server_id": {
                    "key": "Optional",
                    "use_id_type": "web_server::WebServer",
                    "type": "use_id"
                  },
                  "sorting_weight": {
                    "key": "Optional"
                  },
                  "sorting_group_id": {
                    "key": "Optional",
                    "use_id_type": "int",
                    "type": "use_id"
                  }
                }
              }
            },
            "id": {
              "key": "GeneratedID",
              "id_type": {
                "class": "light::LightState",
                "parents": [
                  "EntityBase",
                  "Component"
                ]
              }
            },
            "mqtt_id": {
              "key": "Optional",
              "id_type": {
                "class": "mqtt::MQTTJSONLightComponent",
                "parents": [
                  "mqtt::MQTTComponent",
                  "Component"
                ]
              }
            },
            "restore_mode": {
              "key": "Optional",
              "default": "ALWAYS_OFF",
              "type": "enum",
              "values": {
                "RESTORE_DEFAULT_OFF": null,
                "RESTORE_DEFAULT_ON": null,
                "ALWAYS_OFF": null,
                "ALWAYS_ON": null,
                "RESTORE_INVERTED_DEFAULT_OFF": null,
                "RESTORE_INVERTED_DEFAULT_ON": null,
                "RESTORE_AND_OFF": null,
                "RESTORE_AND_ON": null
              }
            },
            "on_turn_on": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_turn_off": {
              "key": "Optional",
              "type": "trigger"
            },
            "on_state": {
              "key": "Optional",
              "type": "trigger"
            },
            "initial_state": {
              "key": "Optional",
              "type": "schema",
              "schema": {
                "extends": [
                  "light.LIGHT_STATE_SCHEMA"
                ]
              }
            }
          }
        }
      },
      "BINARY_LIGHT_SCHEMA": {
        "type": "schema",
        "schema": {
          "extends": [
            "light.LIGHT_SCHEMA"
          ],
          "config_vars": {
            "effects": {
              "key": "Optional",
              "type": "registry",
              "registry": "light.effects",
              "filter": [
                "lambda",
                "automation",
                "strobe"
              ]
            }
          }
        }
      },
      "BRIGHTNESS_ONLY_LIGHT_SCHEMA": {
        "type": "schema",
        "schema": {
          "extends": [
            "light.LIGHT_SCHEMA"
          ],
          "config_vars": {
            "gamma_correct": {
              "key": "Optional",
              "default": "2.8",
              "data_type": "positive_float"
            },
            "default_transition_length": {
              "key": "Optional",
              "default": "1s",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "flash_transition_length": {
              "key": "Optional",
              "default": "0s",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "effects": {
              "key": "Optional",
              "type": "registry",
              "registry": "light.effects",
              "filter": [
                "lambda",
                "automation",
                "pulse",
                "random",
                "strobe",
                "flicker"
              ]
            }
          }
        }
      },
      "RGB_LIGHT_SCHEMA": {
        "type": "schema",
        "schema": {
          "extends": [
            "light.BRIGHTNESS_ONLY_LIGHT_SCHEMA"
          ],
          "config_vars": {
            "effects": {}
          }
        }
      },
      "ADDRESSABLE_LIGHT_SCHEMA": {
        "type": "schema",
        "schema": {
          "extends": [
            "light.RGB_LIGHT_SCHEMA"
          ],
          "config_vars": {
            "id": {
              "id_type": {
                "class": "light::AddressableLightState",
                "parents": [
                  "light::LightState",
                  "EntityBase",
                  "Component"
                ]
              }
            },
            "effects": {
              "filter": [
                "lambda",
                "automation",
                "pulse",
                "random",
                "strobe",
                "flicker",
                "addressable_lambda",
                "addressable_rainbow",
                "addressable_color_wipe",
                "addressable_scan",
                "addressable_twinkle",
                "addressable_random_twinkle",
                "addressable_fireworks",
                "addressable_flicker",
                "adalight",
                "e131",
                "wled"
              ],
              "docs": "**list**: A list of [light effects](https://esphome.io/components/light/index.html#light-effects) to use for this light.\n\n*See also: [SPI](https://esphome.io/components/light/fastled.html#id1)*"
            },
            "color_correct": {
              "key": "Optional"
            },
            "power_supply": {
              "key": "Optional",
              "use_id_type": "power_supply::PowerSupply",
              "type": "use_id"
            }
          }
        }
      }
    },
    "action": {
      "toggle": {
        "type": "schema",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "light::LightState",
              "type": "use_id"
            },
            "transition_length": {
              "key": "Optional",
              "templatable": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            }
          }
        }
      },
      "control": {
        "type": "schema",
        "schema": {
          "extends": [
            "light.LIGHT_STATE_SCHEMA"
          ],
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "light::LightState",
              "type": "use_id"
            },
            "transition_length": {
              "key": "Optional",
              "templatable": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "flash_length": {
              "key": "Optional",
              "templatable": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "effect": {
              "key": "Optional",
              "templatable": true,
              "type": "string"
            }
          }
        }
      },
      "turn_on": {
        "type": "schema",
        "maybe": "id",
        "schema": {
          "extends": [
            "light.LIGHT_STATE_SCHEMA"
          ],
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "light::LightState",
              "type": "use_id"
            },
            "transition_length": {
              "key": "Optional",
              "templatable": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "flash_length": {
              "key": "Optional",
              "templatable": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "effect": {
              "key": "Optional",
              "templatable": true,
              "type": "string"
            },
            "state": {
              "default": "True"
            }
          }
        }
      },
      "turn_off": {
        "type": "schema",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "light::LightState",
              "type": "use_id"
            },
            "transition_length": {
              "key": "Optional",
              "templatable": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "state": {
              "key": "Optional",
              "default": "False"
            }
          }
        }
      },
      "dim_relative": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "light::LightState",
              "type": "use_id"
            },
            "relative_brightness": {
              "key": "Required",
              "templatable": true
            },
            "transition_length": {
              "key": "Optional",
              "templatable": true,
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "brightness_limits": {
              "key": "Optional",
              "type": "schema",
              "schema": {
                "config_vars": {
                  "min_brightness": {
                    "key": "Optional",
                    "default": "0%"
                  },
                  "max_brightness": {
                    "key": "Optional",
                    "default": "100%"
                  },
                  "limit_mode": {
                    "key": "Optional",
                    "default": "CLAMP",
                    "type": "enum",
                    "values": {
                      "CLAMP": null,
                      "DO_NOTHING": null
                    }
                  }
                }
              }
            }
          }
        }
      },
      "addressable_set": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "light::AddressableLightState",
              "type": "use_id"
            },
            "range_from": {
              "key": "Optional",
              "templatable": true,
              "type": "integer",
              "data_type": "positive_int"
            },
            "range_to": {
              "key": "Optional",
              "templatable": true,
              "type": "integer",
              "data_type": "positive_int"
            },
            "color_brightness": {
              "key": "Optional",
              "templatable": true
            },
            "red": {
              "key": "Optional",
              "templatable": true
            },
            "green": {
              "key": "Optional",
              "templatable": true
            },
            "blue": {
              "key": "Optional",
              "templatable": true
            },
            "white": {
              "key": "Optional",
              "templatable": true
            }
          }
        }
      }
    },
    "condition": {
      "is_off": {
        "type": "schema",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "light::LightState",
              "type": "use_id"
            }
          }
        }
      },
      "is_on": {
        "type": "schema",
        "maybe": "id",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "light::LightState",
              "type": "use_id"
            }
          }
        }
      }
    },
    "effects": {
      "lambda": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "lambda": {
              "key": "Required"
            },
            "update_interval": {
              "key": "Optional",
              "default": "0ms"
            },
            "name": {
              "key": "Optional",
              "default": "Lambda",
              "type": "string"
            }
          }
        }
      },
      "automation": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "sequence": {
              "key": "Required",
              "type": "trigger"
            },
            "name": {
              "key": "Optional",
              "default": "Automation",
              "type": "string"
            }
          }
        }
      },
      "pulse": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "transition_length": {
              "key": "Optional",
              "default": "1s",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ],
                "config_vars": {
                  "on_length": {
                    "key": "Required",
                    "type": "schema",
                    "schema": {
                      "extends": [
                        "core.positive_time_period_milliseconds"
                      ]
                    }
                  },
                  "off_length": {
                    "key": "Required",
                    "type": "schema",
                    "schema": {
                      "extends": [
                        "core.positive_time_period_milliseconds"
                      ]
                    }
                  }
                }
              }
            },
            "update_interval": {
              "key": "Optional",
              "default": "1s",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "min_brightness": {
              "key": "Optional",
              "default": "0%"
            },
            "max_brightness": {
              "key": "Optional",
              "default": "100%"
            },
            "name": {
              "key": "Optional",
              "default": "Pulse",
              "type": "string"
            }
          }
        }
      },
      "random": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "transition_length": {
              "key": "Optional",
              "default": "7.5s",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "update_interval": {
              "key": "Optional",
              "default": "10s",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "name": {
              "key": "Optional",
              "default": "Random",
              "type": "string"
            }
          }
        }
      },
      "strobe": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "colors": {
              "key": "Optional",
              "default": "[{'state': True, 'duration': '0.5s'}, {'state': False, 'duration': '0.5s'}]",
              "is_list": true,
              "type": "schema",
              "schema": {
                "config_vars": {
                  "state": {
                    "key": "Optional",
                    "default": "True",
                    "type": "boolean"
                  },
                  "brightness": {
                    "key": "Optional",
                    "default": "1.0"
                  },
                  "color_mode": {
                    "key": "Optional",
                    "type": "enum",
                    "values": {
                      "ON_OFF": null,
                      "BRIGHTNESS": null,
                      "WHITE": null,
                      "COLOR_TEMPERATURE": null,
                      "COLD_WARM_WHITE": null,
                      "RGB": null,
                      "RGB_WHITE": null,
                      "RGB_COLOR_TEMPERATURE": null,
                      "RGB_COLD_WARM_WHITE": null
                    }
                  },
                  "color_brightness": {
                    "key": "Optional",
                    "default": "1.0"
                  },
                  "red": {
                    "key": "Optional",
                    "default": "1.0"
                  },
                  "green": {
                    "key": "Optional",
                    "default": "1.0"
                  },
                  "blue": {
                    "key": "Optional",
                    "default": "1.0"
                  },
                  "white": {
                    "key": "Optional",
                    "default": "1.0"
                  },
                  "color_temperature": {
                    "key": "Optional"
                  },
                  "cold_white": {
                    "key": "Optional",
                    "default": "1.0"
                  },
                  "warm_white": {
                    "key": "Optional",
                    "default": "1.0"
                  },
                  "duration": {
                    "key": "Required",
                    "type": "schema",
                    "schema": {
                      "extends": [
                        "core.positive_time_period_milliseconds"
                      ]
                    }
                  },
                  "transition_length": {
                    "key": "Optional",
                    "default": "0s",
                    "type": "schema",
                    "schema": {
                      "extends": [
                        "core.positive_time_period_milliseconds"
                      ]
                    }
                  }
                }
              }
            },
            "name": {
              "key": "Optional",
              "default": "Strobe",
              "type": "string"
            }
          }
        }
      },
      "flicker": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "alpha": {
              "key": "Optional",
              "default": "0.95"
            },
            "intensity": {
              "key": "Optional",
              "default": "0.015"
            },
            "name": {
              "key": "Optional",
              "default": "Flicker",
              "type": "string"
            }
          }
        }
      },
      "addressable_lambda": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "lambda": {
              "key": "Required"
            },
            "update_interval": {
              "key": "Optional",
              "default": "0ms",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "name": {
              "key": "Optional",
              "default": "Addressable Lambda",
              "type": "string"
            }
          }
        }
      },
      "addressable_rainbow": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "speed": {
              "key": "Optional",
              "default": "10",
              "type": "integer",
              "data_type": "uint32_t"
            },
            "width": {
              "key": "Optional",
              "default": "50",
              "type": "integer",
              "data_type": "uint32_t"
            },
            "name": {
              "key": "Optional",
              "default": "Rainbow",
              "type": "string"
            }
          }
        }
      },
      "addressable_color_wipe": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "colors": {
              "key": "Optional",
              "default": "[{'num_leds': 1, 'random': True}]",
              "is_list": true,
              "type": "schema",
              "schema": {
                "config_vars": {
                  "red": {
                    "key": "Optional",
                    "default": "1.0"
                  },
                  "green": {
                    "key": "Optional",
                    "default": "1.0"
                  },
                  "blue": {
                    "key": "Optional",
                    "default": "1.0"
                  },
                  "white": {
                    "key": "Optional",
                    "default": "1.0"
                  },
                  "random": {
                    "key": "Optional",
                    "default": "False",
                    "type": "boolean"
                  },
                  "num_leds": {
                    "key": "Required",
                    "type": "integer",
                    "data_type": "uint32_t"
                  },
                  "gradient": {
                    "key": "Optional",
                    "default": "False",
                    "type": "boolean"
                  }
                }
              }
            },
            "add_led_interval": {
              "key": "Optional",
              "default": "0.1s",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "reverse": {
              "key": "Optional",
              "default": "False",
              "type": "boolean"
            },
            "name": {
              "key": "Optional",
              "default": "Color Wipe",
              "type": "string"
            }
          }
        }
      },
      "addressable_scan": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "move_interval": {
              "key": "Optional",
              "default": "0.1s",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "scan_width": {
              "key": "Optional",
              "default": "1",
              "type": "integer"
            },
            "name": {
              "key": "Optional",
              "default": "Scan",
              "type": "string"
            }
          }
        }
      },
      "addressable_twinkle": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "twinkle_probability": {
              "key": "Optional",
              "default": "5%"
            },
            "progress_interval": {
              "key": "Optional",
              "default": "4ms",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "name": {
              "key": "Optional",
              "default": "Twinkle",
              "type": "string"
            }
          }
        }
      },
      "addressable_random_twinkle": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "twinkle_probability": {
              "key": "Optional",
              "default": "5%"
            },
            "progress_interval": {
              "key": "Optional",
              "default": "32ms",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "name": {
              "key": "Optional",
              "default": "Random Twinkle",
              "type": "string"
            }
          }
        }
      },
      "addressable_fireworks": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "update_interval": {
              "key": "Optional",
              "default": "32ms",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "spark_probability": {
              "key": "Optional",
              "default": "10%"
            },
            "use_random_color": {
              "key": "Optional",
              "default": "False",
              "type": "boolean"
            },
            "fade_out_rate": {
              "key": "Optional",
              "default": "120",
              "type": "integer",
              "data_type": "uint8_t"
            },
            "name": {
              "key": "Optional",
              "default": "Fireworks",
              "type": "string"
            }
          }
        }
      },
      "addressable_flicker": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "update_interval": {
              "key": "Optional",
              "default": "16ms",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "intensity": {
              "key": "Optional",
              "default": "5%"
            },
            "name": {
              "key": "Optional",
              "default": "Addressable Flicker",
              "type": "string"
            }
          }
        }
      },
      "adalight": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "uart_id": {
              "key": "GeneratedID",
              "use_id_type": "uart::UARTComponent",
              "type": "use_id"
            },
            "name": {
              "key": "Optional",
              "default": "Adalight",
              "type": "string"
            }
          }
        }
      },
      "e131": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "e131_id": {
              "key": "GeneratedID",
              "use_id_type": "e131::E131Component",
              "type": "use_id"
            },
            "universe": {
              "key": "Required",
              "type": "integer"
            },
            "channels": {
              "key": "Optional",
              "default": "RGB",
              "type": "enum",
              "values": {
                "MONO": null,
                "RGB": null,
                "RGBW": null
              }
            },
            "name": {
              "key": "Optional",
              "default": "E1.31",
              "type": "string"
            }
          }
        }
      },
      "wled": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "port": {
              "key": "Optional",
              "default": "21324",
              "type": "integer",
              "data_type": "port"
            },
            "sync_group_mask": {
              "key": "Optional",
              "default": "0",
              "type": "integer"
            },
            "blank_on_start": {
              "key": "Optional",
              "default": "True",
              "type": "boolean"
            },
            "name": {
              "key": "Optional",
              "default": "WLED",
              "type": "string"
            }
          }
        }
      }
    }
  }
}