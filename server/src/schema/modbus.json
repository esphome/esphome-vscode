{
  "modbus": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID",
              "id_type": {
                "class": "modbus::Modbus",
                "parents": [
                  "Component",
                  "uart::UARTDevice"
                ]
              },
              "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n*See also: [Modbus Component](https://esphome.io/components/modbus.html#configuration-variables)*"
            },
            "role": {
              "key": "Optional",
              "default": "client",
              "type": "enum",
              "values": {
                "client": null,
                "server": null
              },
              "docs": "**string**: The role of this component, `client` or `server`. Defaults to `client`.\n\n*See also: [Modbus Component](https://esphome.io/components/modbus.html#configuration-variables)*"
            },
            "flow_control_pin": {
              "key": "Optional",
              "schema": true,
              "modes": [
                "output"
              ],
              "type": "pin",
              "docs": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin used to switch flow control. This is useful for RS485 transceivers that do not have automatic flow control switching, like the common MAX485.\n\n*See also: [Modbus Component](https://esphome.io/components/modbus.html#configuration-variables)*"
            },
            "send_wait_time": {
              "key": "Optional",
              "default": "250ms",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              },
              "docs": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Time in milliseconds before the next ModBUS command is sent when an answer from a previous command has not yet started (i.e. when to timeout and assume no response is coming). Defaults to 250 ms. Set this value to the maximum time required for the slowest device on the bus to begin responding (time to first byte). If a device starts responding within this time, the next command will be queued and sent after the response is finished, no matter how long the response.\n\n*See also: [Modbus Component](https://esphome.io/components/modbus.html#configuration-variables)*"
            },
            "disable_crc": {
              "key": "Optional",
              "default": "False",
              "type": "boolean",
              "docs": "**boolean**: Ignores a bad CRC if set to `true`. Defaults to `false`\n\n*See also: [Modbus Component](https://esphome.io/components/modbus.html#configuration-variables)*"
            },
            "uart_id": {
              "key": "GeneratedID",
              "use_id_type": "uart::UARTComponent",
              "type": "use_id",
              "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID of the [UART Component](https://esphome.io/components/uart.html#uart) if you want to use multiple UART buses.\n\n*See also: [Modbus Component](https://esphome.io/components/modbus.html#configuration-variables)*"
            }
          },
          "extends": [
            "core.COMPONENT_SCHEMA"
          ]
        },
        "is_list": true
      }
    }
  }
}