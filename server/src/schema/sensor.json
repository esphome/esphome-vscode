{
  "sensor": {
    "components": {
      "a01nyub": {
        "dependencies": [
          "uart"
        ],
        "docs": "This sensor allows you to use A01NYUB waterproof ultrasonic sensor by DFRobot ([datasheet](https://wiki.dfrobot.com/A01NYUB%20Waterproof%20Ultrasonic%20Sensor%20SKU:%20SEN0313)) with ESPHome to measure distances. This sensor can measure ranges between 28 centimeters and 750 centimeters with a resolution of 1 milimeter.\n\n*See also: [A01NYUB Waterproof Ultrasonic Sensor](https://esphome.io/components/sensor/a01nyub.html#a01nyub-waterproof-ultrasonic-sensor)*"
      },
      "a02yyuw": {
        "dependencies": [
          "uart"
        ],
        "docs": "This sensor allows you to use A02YYUW waterproof ultrasonic sensor by DFRobot ([datasheet](https://wiki.dfrobot.com/_A02YYUW_Waterproof_Ultrasonic_Sensor_SKU_SEN0311)) with ESPHome to measure distances. This sensor can measure ranges between 3 centimeters and 450 centimeters with a resolution of 1 milimeter.\n\n*See also: [A02YYUW Waterproof Ultrasonic Sensor](https://esphome.io/components/sensor/a02yyuw.html#a02yyuw-waterproof-ultrasonic-sensor)*"
      },
      "absolute_humidity": {
        "docs": "The `absolute_humidity` platform allows you to calculate absolute humidity from air temperature and relative humidity.\n\n*See also: [Absolute Humidity](https://esphome.io/components/sensor/absolute_humidity.html#absolute-humidity)*"
      },
      "adc": {
        "docs": "The Analog To Digital (`adc`) Sensor allows you to use the built-in ADC in your device to measure a voltage on certain pins.\n\n*See also: [Analog To Digital Sensor](https://esphome.io/components/sensor/adc.html#analog-to-digital-sensor)*"
      },
      "adc128s102": {
        "dependencies": [
          "adc128s102"
        ],
        "docs": "The `adc128s102` sensor allows you to use your ADC128S102 12-Bit A/D Converter sensors with ESPHome. First, setup a [ADC128S102 Hub](https://esphome.io/components/sensor/adc128s102.html#adc128s102-component) for your ADC128S102 sensor and then use this sensor platform to create individual sensors that will report the voltage to Home Assistant.\n\n*See also: [adc128s102 Sensor](https://esphome.io/components/sensor/adc128s102.html#sensor)*"
      },
      "ade7880": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ade7880` sensor platform allows you to use ADE7880 voltage/current/power sensors ([datasheet](https://www.analog.com/media/en/technical-documentation/data-sheets/ADE7880.pdf)) with ESPHome. This sensor chip is commonly found in Shelly 3EM and 3EM Pro devices.\n\n*See also: [ADE7880 Power Sensor](https://esphome.io/components/sensor/ade7880.html#ade7880-power-sensor)*"
      },
      "ade7953": {},
      "ade7953_i2c": {
        "dependencies": [
          "i2c"
        ]
      },
      "ade7953_spi": {
        "dependencies": [
          "spi"
        ]
      },
      "ads1115": {
        "dependencies": [
          "ads1115"
        ],
        "docs": "The `ads1115` sensor allows you to use your ADS1115 sigma-delta ADC sensors ([datasheet](http://www.ti.com/lit/ds/symlink/ads1115.pdf), [Adafruit_ADS1115](https://www.adafruit.com/product/1085)) or your ADS1015 sigma-delta ADC sensors ([datasheet](http://www.ti.com/lit/ds/symlink/ads1015.pdf), [Adafruit_ADS1015](https://www.adafruit.com/product/1083)) with ESPHome. First, setup an [ADS1115 Hub](https://esphome.io/components/sensor/ads1115.html#ads1115-component) for your ADS1115 sensor and then use this sensor platform to create individual sensors that will report the voltage to Home Assistant.\n\n*See also: [ads1115 Sensor](https://esphome.io/components/sensor/ads1115.html#sensor)*"
      },
      "ads1118": {
        "dependencies": [
          "ads1118"
        ],
        "docs": "The `ads1118` sensor allows you to use your ADS1118 delta-sigma ADC sensors ([datasheet](https://www.ti.com/lit/ds/symlink/ads1118.pdf)) with ESPHome. First, setup an [ADS1118 Hub](https://esphome.io/components/sensor/ads1118.html#ads1118-component) for your ADS1118 sensor and then use this sensor platform to create individual sensors that will report the voltage.\n\n*See also: [ads1118 Sensor](https://esphome.io/components/sensor/ads1118.html#sensor)*"
      },
      "ags10": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ags10` sensor platform VOC sensor allows you to use your ASAIR AGS10 ([datasheet](http://www.aosong.com/userfiles/files/Datasheet%20AGS10.pdf), [ASAIR](http://www.aosong.com/en/products-86.html) ) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [AGS10 Volatile Organic Compound (VOC) Sensor](https://esphome.io/components/sensor/ags10.html#ags10-volatile-organic-compound-voc-sensor)*"
      },
      "aht10": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `aht10` Temperature+Humidity sensor allows you to use your AHT10 ([datasheet](http://www.aosong.com/userfiles/files/media/aht10%E8%A7%84%E6%A0%BC%E4%B9%A6v1_1%EF%BC%8820191015%EF%BC%89.pdf)), AHT20 ([datasheet](https://cdn-learn.adafruit.com/assets/assets/000/091/676/original/AHT20-datasheet-2020-4-16.pdf?1591047915)) or AHT30 ([datasheet](https://eleparts.co.kr/data/goods_attach/202306/good-pdf-12751003-1.pdf)) [I\u00b2C](https://esphome.io/components/i2c.html#i2c)-based sensor with ESPHome.\n\n*See also: [AHT10 Temperature+Humidity Sensor](https://esphome.io/components/sensor/aht10.html#aht10-temperature-humidity-sensor)*"
      },
      "airthings_wave_mini": {
        "dependencies": [
          "ble_client"
        ],
        "docs": "AirThings Wave Mini tracks airborne chemicals, temperature, pressure and humidity.\n\n*See also: [Airthings Wave Mini Sensor](https://esphome.io/components/sensor/airthings_ble.html#airthings-wave-mini-sensor)*"
      },
      "airthings_wave_plus": {
        "dependencies": [
          "ble_client"
        ],
        "docs": "AirThings Wave Plus tracks radon (24h and long term), airborne chemicals, CO2, temperature, atmospheric pressure and humidity.\n\n*See also: [Airthings Wave Plus Sensor](https://esphome.io/components/sensor/airthings_ble.html#airthings-wave-plus-sensor)*"
      },
      "alpha3": {
        "docs": "The `alpha3` component allows you to monitor a Grundfos Alpha3 Model B circulator pump over BLE.\n\n*See also: [Grundfos Alpha3](https://esphome.io/components/sensor/alpha3.html#grundfos-alpha3)*"
      },
      "am2315c": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `am2315c` Temperature+Humidity sensor allows you to use your AM2315C ([datasheet](https://cdn-shop.adafruit.com/product-files/5182/5182_AM2315C.pdf)) I\u00b2C-based sensor with ESPHome.\n\n*See also: [AM2315C Temperature+Humidity Sensor](https://esphome.io/components/sensor/am2315c.html#am2315c-temperature-humidity-sensor)*"
      },
      "am2320": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `am2320` Temperature+Humidity sensor allows you to use your AM2320 ([datasheet](https://akizukidenshi.com/download/ds/aosong/AM2320.pdf)) I\u00b2C-based sensor with ESPHome.\n\n*See also: [AM2320 Temperature+Humidity Sensor](https://esphome.io/components/sensor/am2320.html#am2320-temperature-humidity-sensor)*"
      },
      "am43": {
        "docs": "The `am43` sensor platform allows you to read the light and battery sensors on an AM43 BLE cover motor. The platform connects to the device over the ESP32\u2019s BLE peripheral.\n\n*See also: [AM43 Sensor](https://esphome.io/components/sensor/am43.html#am43-sensor)*"
      },
      "apds9306": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `apds9306` sensor component allows you to use APDS9306 ambient light sensors ([datasheet](https://docs.broadcom.com/doc/AV02-4755EN), [Broadcom](https://www.broadcom.com/products/optical-sensors/ambient-light-photo-sensors/apds-9306-065)) with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [APDS9306 Sensor](https://esphome.io/components/sensor/apds9306.html#apds9306-sensor)*"
      },
      "apds9960": {
        "dependencies": [
          "apds9960"
        ],
        "docs": "The `apds9960` sensor allows you to use your [APDS9960 Sensor to perform different measurements.\n\n*See also: [apds9960 Sensor](https://esphome.io/components/sensor/apds9960.html#sensor)*"
      },
      "arduino_port_expander": {},
      "as3935": {
        "dependencies": [
          "as3935"
        ],
        "docs": "A sensor platform to read lightning data\n\n*See also: [as3935 Sensor](https://esphome.io/components/sensor/as3935.html#sensor)*"
      },
      "as5600": {
        "dependencies": [
          "as5600"
        ],
        "docs": "The `as5600` sensor allows you to publish the angle/position measurement from your AS5600 with ESPHome. First, setup an [AS5600 Hub](https://esphome.io/components/sensor/as5600.html#as5600-component) for your AS5600 sensor and then use this sensor platform to create individual sensors that will report the position to Home Assistant.\n\n*See also: [as5600 Sensor](https://esphome.io/components/sensor/as5600.html#sensor)*"
      },
      "as7341": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `as7341` sensor platform allows you to use your AS7341 spectral color sensor ([datasheet](https://look.ams-osram.com/m/24266a3e584de4db/original/AS7341-DS000504.pdf), [Adafruit](https://www.adafruit.com/product/4698)) with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [AS7341 Spectral Color Sensor](https://esphome.io/components/sensor/as7341.html#as7341-spectral-color-sensor)*"
      },
      "atc_mithermometer": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "atm90e26": {
        "docs": "The `atm90e26` sensor platform allows you to use your ATM90E26 voltage/current and power sensors ([datasheet](https://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-46002-SE-M90E26-Datasheet.pdf)) with ESPHome. This sensor is found in the [DitroniX GTEM ESP32](https://ditronix.net/wiki/gtem-esp32-atm90e26-sdk-v1-specification/) energy meter and other devices.\n\n*See also: [ATM90E26 Power Sensor](https://esphome.io/components/sensor/atm90e26.html#atm90e26-power-sensor)*"
      },
      "atm90e32": {
        "docs": "The `atm90e32` sensor platform allows you to use your ATM90E32 voltage/current and power sensors ([datasheet](http://ww1.microchip.com/downloads/en/devicedoc/Atmel-46003-SE-M90E32AS-Datasheet.pdf)) with ESPHome. This sensor is commonly found in CircuitSetup 2 and 6 channel energy meters and the [Gelidus Research](https://www.gelidus.ca/) 2 channel power meter.\n\n*See also: [ATM90E32 Power Sensor](https://esphome.io/components/sensor/atm90e32.html#atm90e32-power-sensor)*"
      },
      "bedjet": {
        "dependencies": [
          "bedjet"
        ],
        "docs": "The `sensor` platform exposes the BedJet\u2019s various temperature readings as sensors.\n\n*See also: [bedjet Sensor](https://esphome.io/components/climate/bedjet.html#bedjet-sensor)*"
      },
      "bh1750": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `bh1750` sensor platform allows you to use your BH1750 ([datasheet](http://www.mouser.com/ds/2/348/bh1750fvi-e-186247.pdf)) ambient light sensor with ESPHome. The [I\u00b2C bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BH1750 Ambient Light Sensor](https://esphome.io/components/sensor/bh1750.html#bh1750-ambient-light-sensor)*"
      },
      "binary_sensor_map": {
        "dependencies": [
          "binary_sensor"
        ]
      },
      "bl0906": {
        "dependencies": [
          "uart"
        ],
        "docs": "The `bl0906` sensor platform allows you to use your BL0906 voltage/current/power and energy sensors with ESPHome. This sensor is commonly found in [Athom EM2 Energy Meter](https://www.athom.tech/blank-1/2-ch-energy-meter-made-for-esphome) and [Athom EM6 Energy Meter](https://www.athom.tech/blank-1/6-ch-energy-meter-made-for-esphome)\n\n*See also: [Belling BL0906 Energy Monitor](https://esphome.io/components/sensor/bl0906.html#belling-bl0906-energy-monitor)*"
      },
      "bl0939": {
        "dependencies": [
          "uart"
        ],
        "docs": "The `bl0939` sensor platform allows you to use your BL0939 voltage/current/power and energy sensors with ESPHome. This sensor is commonly found in Sonoff Dual R3 v2.\n\n*See also: [BL0939 Power Sensor](https://esphome.io/components/sensor/bl0939.html#bl0939-power-sensor)*"
      },
      "bl0940": {
        "dependencies": [
          "uart"
        ],
        "docs": "This page is incomplete and could some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:\n\n*See also: [Belling BL0940 Energy Monitor](https://esphome.io/components/sensor/bl0940.html#belling-bl0940-energy-monitor)*"
      },
      "bl0942": {
        "dependencies": [
          "uart"
        ],
        "docs": "The `bl0942` sensor platform allows you to use BL0942 energy monitors sensors with ESPHome. These are used in some Tuya-devices (e.g. Aubess Tuya WiFi Mini Smart Switch With Energy Monitor)\n\n*See also: [Belling BL0942 Energy Monitor](https://esphome.io/components/sensor/bl0942.html#belling-bl0942-energy-monitor)*"
      },
      "ble_client": {
        "dependencies": [
          "ble_client"
        ],
        "docs": "The `ble_client` component is a sensor platform that can query BLE devices for RSSI or specific values of service characteristics.\n\n*See also: [BLE Client Sensor](https://esphome.io/components/sensor/ble_client.html#ble-client-sensor)*"
      },
      "ble_rssi": {
        "dependencies": [
          "esp32_ble_tracker"
        ],
        "docs": "The `ble_rssi` sensor platform lets you track the RSSI value or signal strength of a BLE device. See [the binary sensor setup](https://esphome.io/components/binary_sensor/ble_presence.html#esp32-ble-tracker-setting-up-devices) for instructions for setting up this platform.\n\n*See also: [ESP32 Bluetooth Low Energy RSSI Sensor](https://esphome.io/components/sensor/ble_rssi.html#esp32-bluetooth-low-energy-rssi-sensor)*"
      },
      "bme280_i2c": {
        "dependencies": [
          "i2c"
        ]
      },
      "bme280_spi": {
        "dependencies": [
          "spi"
        ]
      },
      "bme680": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `bme680` sensor platform allows you to use your BME680 ([datasheet](https://cdn-shop.adafruit.com/product-files/3660/BME680.pdf), [Adafruit](https://www.adafruit.com/product/3660)) temperature, pressure and humidity sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BME680 Temperature+Pressure+Humidity+Gas Sensor](https://esphome.io/components/sensor/bme680.html#bme680-temperature-pressure-humidity-gas-sensor)*"
      },
      "bme680_bsec": {
        "dependencies": [
          "bme680_bsec"
        ],
        "docs": "Configuration variables:\n\n*See also: [bme680_bsec Sensor](https://esphome.io/components/sensor/bme680_bsec.html#sensor)*"
      },
      "bme68x_bsec2": {
        "dependencies": [
          "bme68x_bsec2"
        ],
        "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the `bme68x_bsec2_i2c` component sensors will refer to. Useful when multiple devices are present in your configuration.\n\n*See also: [bme68x_bsec2 Sensor](https://esphome.io/components/sensor/bme68x_bsec2.html#sensor)*"
      },
      "bmi160": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `bmi160` sensor platform allows you to use your BMI160 Accelerometer/Gyroscope ([datasheet](https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmi160-ds000.pdf), [SparkFun](https://www.sparkfun.com/products/18794)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BMI160 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/bmi160.html#bmi160-accelerometer-gyroscope-sensor)*"
      },
      "bmp085": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The BMP085 sensor platform allows you to use your BMP085 ([datasheet](https://www.sparkfun.com/datasheets/Components/General/BST-BMP085-DS000-05.pdf), [Adafruit](https://www.adafruit.com/product/391)) and BMP180 ([datasheet](https://cdn-shop.adafruit.com/datasheets/BST-BMP180-DS000-09.pdf), [Adafruit](https://www.adafruit.com/product/1603)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [BMP085 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp085.html#bmp085-temperature-pressure-sensor)*"
      },
      "bmp280": {},
      "bmp280_i2c": {
        "dependencies": [
          "i2c"
        ]
      },
      "bmp280_spi": {
        "dependencies": [
          "spi"
        ]
      },
      "bmp3xx": {},
      "bmp3xx_i2c": {
        "dependencies": [
          "i2c"
        ]
      },
      "bmp3xx_spi": {
        "dependencies": [
          "spi"
        ]
      },
      "bmp581": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `bmp581` sensor platform allows you to use your BMP581 ([datasheet](https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmp581-ds004.pdf), [SparkFun](https://www.sparkfun.com/products/20170)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) bus is required to be set up in your configuration for this sensor to work.\n\n*See also: [BMP581 Temperature+Pressure Sensor](https://esphome.io/components/sensor/bmp581.html#bmp581-temperature-pressure-sensor)*"
      },
      "b_parasite": {
        "dependencies": [
          "esp32_ble_tracker"
        ],
        "docs": "[b-parasite](https://github.com/rbaron/b-parasite) is an open source soil moisture and ambient temperature/humidity/light sensor.\n\n*See also: [b-parasite](https://esphome.io/components/sensor/b_parasite.html#b-parasite)*"
      },
      "ccs811": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ccs811` sensor platform allows you to use CCS811 eCO_2 and volatile organic compound sensors ([Adafruit](https://www.adafruit.com/product/3566)) with ESPHome.\n\n*See also: [CCS811 eCO_2 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/ccs811.html#ccs811-eco-2-and-volatile-organic-compound-sensor)*"
      },
      "cd74hc4067": {
        "dependencies": [
          "cd74hc4067"
        ],
        "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The source sensor to measure voltage values from, e.g. [ADC sensor](https://esphome.io/components/sensor/adc.html).\n\n*See also: [cd74hc4067 Sensor](https://esphome.io/components/sensor/cd74hc4067.html#sensor)*"
      },
      "combination": {
        "docs": "The `combination` sensor platform allows you to combine the state of several sensors into one. To use this sensor, specify the combination type and add your source sensors.\n\n*See also: [Combine the state of several sensors](https://esphome.io/components/sensor/combination.html#combine-the-state-of-several-sensors)*"
      },
      "copy": {
        "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The sensor that should be mirrored.\n\n*See also: [Copy Sensor](https://esphome.io/components/copy.html#copy-sensor)*"
      },
      "cs5460a": {
        "dependencies": [
          "spi"
        ],
        "docs": "The `cs5460a` sensor platform allows you to use a CS5460A AC voltage, current and power meter chip ([datasheet](https://statics.cirrus.com/pubs/proDatasheet/CS5460A_F5.pdf)) with ESPHome. The chip is usually sold on a breakout board with a 4.096 MHz crystal.  However it requires a few extra components, specifically a current sensing circuit and a voltage sensing circuit.\n\n*See also: [CS5460A Power Sensor](https://esphome.io/components/sensor/cs5460a.html#cs5460a-power-sensor)*"
      },
      "cse7761": {
        "dependencies": [
          "uart"
        ],
        "docs": "The `cse7761` sensor platform allows you to use your CSE7761 voltage/current and power sensors with ESPHome. This sensor is commonly found in Sonoff Dual R3 v1.x.\n\n*See also: [CSE7761 Power Sensor](https://esphome.io/components/sensor/cse7761.html#cse7761-power-sensor)*"
      },
      "cse7766": {
        "dependencies": [
          "uart"
        ],
        "docs": "The `cse7766` sensor platform allows you to use your CSE7766 voltage/current and power sensors ([datasheet](https://itead.cc/wp-content/uploads/2022/05/CSE7766.pdf)) sensors with ESPHome. This sensor is commonly found in Sonoff POW R2. CSE7759B is similar to CSE7766 and works with this component.\n\n*See also: [CSE7766 Power Sensor](https://esphome.io/components/sensor/cse7766.html#cse7766-power-sensor)*"
      },
      "ct_clamp": {
        "docs": "The Current Transformer Clamp (`ct_clamp`) sensor allows you to hook up a CT Clamp to an analog voltage sensor (like the [ADC sensor](https://esphome.io/components/sensor/adc.html)) and convert the readings to measured single phase AC current.\n\n*See also: [CT Clamp Current Sensor](https://esphome.io/components/sensor/ct_clamp.html#ct-clamp-current-sensor)*"
      },
      "custom": {},
      "dallas": {},
      "dallas_temp": {
        "docs": "The `dallas_temp` component allows you to use [DS18B20](https://www.adafruit.com/product/374) ([datasheet](https://datasheets.maximintegrated.com/en/ds/DS18B20.pdf)) and similar 1-Wire temperature sensors.  A [1-Wire bus](https://esphome.io/components/one_wire.html#one-wire) is required to be set up in your configuration for this sensor to work.\n\n*See also: [Dallas Temperature Sensor](https://esphome.io/components/sensor/dallas_temp.html#dallas-temperature-sensor)*"
      },
      "daly_bms": {
        "docs": "A sensor platform to read BMS data\n\n*See also: [daly_bms Sensor](https://esphome.io/components/sensor/daly_bms.html#sensor)*"
      },
      "debug": {
        "dependencies": [
          "debug"
        ],
        "docs": "Configuration variables:\n\n*See also: [debug Sensor](https://esphome.io/components/debug.html#sensor)*"
      },
      "dht": {
        "docs": "The DHT Temperature+Humidity sensor allows you to use your\n\n*See also: [DHT Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht.html#dht-temperature-humidity-sensor)*"
      },
      "dht12": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `dht12` Temperature+Humidity sensor allows you to use your DHT12 ([datasheet](http://www.robototehnika.ru/file/DHT12.pdf), [electrodragon](http://www.electrodragon.com/product/dht12/)) I\u00b2C-based sensor with ESPHome. This sensor is also called AM2320 by some sellers.\n\n*See also: [DHT12 Temperature+Humidity Sensor](https://esphome.io/components/sensor/dht12.html#dht12-temperature-humidity-sensor)*"
      },
      "dps310": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `dps310` sensor platform allows you to use both the temperature and pressure sensors on your DPS310 atmospheric pressure sensor ([Adafruit](https://www.adafruit.com/product/4494)) with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) component is required to be set up in your configuration.\n\n*See also: [DPS310 Atmospheric Pressure Sensor](https://esphome.io/components/sensor/dps310.html#dps310-atmospheric-pressure-sensor)*"
      },
      "dsmr": {
        "docs": "Not all sensors are available on all devices.\n\n*See also: [dsmr Sensor](https://esphome.io/components/sensor/dsmr.html#sensor)*"
      },
      "duty_cycle": {
        "docs": "The duty cycle sensor allows you to measure for what percentage of time a signal on a GPIO pin is HIGH or LOW.\n\n*See also: [Duty Cycle Sensor](https://esphome.io/components/sensor/duty_cycle.html#duty-cycle-sensor)*"
      },
      "duty_time": {
        "docs": "The `duty_time` sensor allows you to track the total duty time of some object, for example, a light bulb, in seconds. Able to calculate the last turn-on time when an optional sensor `last_time` is included in the configuration.\n\n*See also: [Duty Time](https://esphome.io/components/sensor/duty_time.html#duty-time)*"
      },
      "ee895": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ee895` sensor platform allows you to use your EE895 CO\u2082 ([datasheet](https://www.epluse.com/fileadmin/data/product/ee895/BA_EE895.pdf), [E+E EE895](https://www.epluse.com/products/co2-measurement/co2-modules-and-probes/ee895/)) sensor with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work. We recommend the use of pull up resistors.\n\n*See also: [EE895 CO\u2082, Temperature and Pressure Sensor](https://esphome.io/components/sensor/ee895.html#ee895-co2-temperature-and-pressure-sensor)*"
      },
      "emc2101": {
        "dependencies": [
          "emc2101"
        ]
      },
      "ens160": {},
      "ens160_i2c": {
        "dependencies": [
          "i2c"
        ]
      },
      "ens160_spi": {
        "dependencies": [
          "spi"
        ]
      },
      "ens210": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ENS210` Temperature+Humidity sensor allows you to use your ENS210 ([datasheet](https://www.sciosense.com/wp-content/uploads/2021/01/ENS210.pdf)) i2c-based sensor with ESPHome.\n\n*See also: [ENS210 Temperature+Humidity Sensor](https://esphome.io/components/sensor/ens210.html#ens210-temperature-humidity-sensor)*"
      },
      "esp32_hall": {
        "dependencies": [
          "esp32"
        ],
        "docs": "The `esp32_hall` sensor platform allows you to use the integrated [hall effect sensor](https://en.wikipedia.org/wiki/Hall_effect_sensor) of the ESP32 chip to measure the magnitude and direction of magnetic field around the chip (with quite poor accuracy).\n\n*See also: [ESP32 Hall Sensor](https://esphome.io/components/sensor/esp32_hall.html#esp32-hall-sensor)*"
      },
      "ezo": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ezo` sensor platform allows you to use your EZO sensor circuits with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work. All embedded solutions from EZO can be found [here](https://atlas-scientific.com/embedded-solutions/). If a certain command is not supported directly, it can be executed with the `send_custom()` method call.\n\n*See also: [EZO sensor circuits](https://esphome.io/components/sensor/ezo.html#ezo-sensor-circuits)*"
      },
      "ezo_pmp": {
        "dependencies": [
          "ezo_pmp"
        ]
      },
      "fingerprint_grow": {
        "dependencies": [
          "fingerprint_grow"
        ],
        "docs": "**fingerprint_count**: The number of enrolled fingerprints stored on the reader. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n*See also: [fingerprint_grow Sensor](https://esphome.io/components/fingerprint_grow.html#sensor)*"
      },
      "fs3000": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The FS3000 Air Velocity sensor allows you to use your FS3000 ([datasheet](https://www.renesas.com/kr/en/document/dst/fs3000-datasheet?r=1395551), [sparkfun](https://www.sparkfun.com/products/18377)) sensors with ESPHome.\n\n*See also: [FS3000 Air Velocity Sensor](https://esphome.io/components/sensor/fs3000.html#fs3000-air-velocity-sensor)*"
      },
      "gcja5": {
        "dependencies": [
          "uart"
        ],
        "docs": "The `gcja5` sensor platform allows you to use your Panasonic SN-GCJA5 laser based particulate matter sensor ([datasheet](https://na.industrial.panasonic.com/products/sensors/air-quality-gas-flow-sensors/lineup/laser-type-pm-sensor/series/123557/model/123559)) sensors with ESPHome.\n\n*See also: [Panasonic SN-GCJA5 Particulate Matter Sensor](https://esphome.io/components/sensor/gcja5.html#panasonic-sn-gcja5-particulate-matter-sensor)*"
      },
      "gdk101": {
        "dependencies": [
          "gdk101"
        ],
        "docs": "A sensor platform to radiation data\n\n*See also: [gdk101 Sensor](https://esphome.io/components/sensor/gdk101.html#sensor)*"
      },
      "gp2y1010au0f": {
        "dependencies": [
          "output"
        ],
        "docs": "The `gp2y1010au0f` sensor platform allows you to use your Sharp GP2Y1010AU0F particulate matter sensor with ESPHome.\n\n*See also: [Sharp GP2Y1010AU0F PM2.5 Sensor](https://esphome.io/components/sensor/gp2y1010au0f.html#sharp-gp2y1010au0f-pm2-5-sensor)*"
      },
      "grove_gas_mc_v2": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `grove_gas_mc_v2` sensor platform allows you to use your [Grove Multichannel Gas Sensor V2](https://wiki.seeedstudio.com/Grove-Multichannel-Gas-Sensor-V2) with ESPHome. It exposes 4 different gas sensors for qualitatively measuring Nitrogen Dioxide (NO2), Carbon Monoxide (CO), Ethanol (C2H5OH), and Volatile Organic Compounds (VOCs).\n\n*See also: [Grove Multichannel Gas Sensor V2](https://esphome.io/components/sensor/grove_gas_mc_v2.html#grove-multichannel-gas-sensor-v2)*"
      },
      "growatt_solar": {
        "docs": "The `Growatt Inverter` sensor platform allows you to use growatt inverter data reading on modbus with ESPHome.\n\n*See also: [Growatt Solar](https://esphome.io/components/sensor/growatt_solar.html#growatt-solar)*"
      },
      "haier": {
        "docs": "Additional sensors for Haier Climate device. **These sensors are supported only by the hOn protocol**.\n\n*See also: [Haier Climate Sensors](https://esphome.io/components/sensor/haier.html#haier-climate-sensors)*"
      },
      "havells_solar": {
        "docs": "The `Havells Inverter` sensor platform allows you to use Havells inverter data reading on modbus ([website](https://www.havells.com/en/consumer/solar/solar-on-grid-inverter-and-solutions/solar-on-grid-inverter.html)) with ESPHome.\n\n*See also: [Havells Solar](https://esphome.io/components/sensor/havells_solar.html#havells-solar)*"
      },
      "hdc1080": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The HDC1080 Temperature+Humidity sensor allows you to use your HDC1080 ([datasheet](http://www.ti.com/lit/ds/symlink/hdc1080.pdf), [Adafruit](https://www.adafruit.com/product/2635)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [HDC1080 Temperature+Humidity Sensor](https://esphome.io/components/sensor/hdc1080.html#hdc1080-temperature-humidity-sensor)*"
      },
      "hlw8012": {
        "docs": "The `hlw8012` sensor platform allows you to use your HLW8012 voltage/current and power sensors ([datasheet](https://github.com/xoseperez/hlw8012/blob/master/docs/HLW8012.pdf)) sensors with ESPHome. This sensor is commonly found in Sonoff POWs. CSE7759 and BL0937 are similar to HLW8012 and work with this component. Beware that CSE7759B is different and should be used with the [CSE7766](https://esphome.io/components/sensor/cse7766.html) component.\n\n*See also: [HLW8012 Power Sensor](https://esphome.io/components/sensor/hlw8012.html#hlw8012-power-sensor)*"
      },
      "hm3301": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `HM3301` sensor platform allows you to use your HM3301 particulate matter sensor ([more info](http://wiki.seeedstudio.com/Grove-Laser_PM2.5_Sensor-HM3301)) sensors with ESPHome.\n\n*See also: [The Grove - Laser PM2.5 Sensor (HM3301)](https://esphome.io/components/sensor/hm3301.html#the-grove-laser-pm2-5-sensor-hm3301)*"
      },
      "hmc5883l": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `hmc5883l` allows you to use your HMC5883L triple-axis magnetometers ([datasheet](https://cdn-shop.adafruit.com/datasheets/HMC5883L_3-Axis_Digital_Compass_IC.pdf), [Adafruit](https://www.adafruit.com/product/1746)) with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [HMC5883L Magnetometer](https://esphome.io/components/sensor/hmc5883l.html#hmc5883l-magnetometer)*"
      },
      "homeassistant": {
        "dependencies": [
          "api"
        ],
        "docs": "The `homeassistant` sensor platform allows you to create sensors that import states from your Home Assistant instance using the [native API](https://esphome.io/components/api.html).\n\n*See also: [Home Assistant Sensor](https://esphome.io/components/sensor/homeassistant.html#home-assistant-sensor)*"
      },
      "honeywellabp": {
        "dependencies": [
          "spi"
        ],
        "docs": "The `honeywellabp` sensor platform allows you to use your Honeywell ABP ([website](https://sps.honeywell.com/us/en/products/sensing-and-iot/sensors/pressure-sensors/board-mount-pressure-sensors/basic-abp-series), [datasheet](https://prod-edam.honeywell.com/content/dam/honeywell-edam/sps/siot/en-us/products/sensors/pressure-sensors/board-mount-pressure-sensors/basic-abp-series/documents/sps-siot-basic-board-mount-pressure-abp-series-datasheet-32305128-ciid-155789.pdf?download=false), [Mouser](https://www.mouser.ca/new/honeywell/honeywell-abp-pressure-sensors/)) pressure and temperature sensors with ESPHome. The [SPI](https://esphome.io/components/spi.html#spi) is required to be set up in your configuration for this sensor to work\n\n*See also: [Honeywell ABP Pressure Sensors](https://esphome.io/components/sensor/honeywellabp.html#honeywell-abp-pressure-sensors)*"
      },
      "honeywellabp2_i2c": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `honeywellabp2_i2c` sensor platform allows you to use your Honeywell ABP ([website](https://sps.honeywell.com/us/en/products/advanced-sensing-technologies/healthcare-sensing/board-mount-pressure-sensors/basic-abp2-series), [datasheet](https://prod-edam.honeywell.com/content/dam/honeywell-edam/sps/siot/en-us/products/sensors/pressure-sensors/board-mount-pressure-sensors/basic-abp2-series/documents/sps-siot-abp2-series-datasheet-32350268-en.pdf?download=false)) pressure and temperature sensors with ESPHome. The [I2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work\n\n*See also: [Honeywell ABP 2 Pressure Sensors](https://esphome.io/components/sensor/honeywellabp2_i2c.html#honeywell-abp-2-pressure-sensors)*"
      },
      "honeywell_hih_i2c": {
        "dependencies": [
          "i2c"
        ],
        "docs": "Honeywell HumidIcon (I2C HIH series) Temperature & Humidity sensors with ESPHome ([website](https://sps.honeywell.com/us/en/products/advanced-sensing-technologies/healthcare-sensing/humidity-with-temperature-sensors), [datasheet](https://prod-edam.honeywell.com/content/dam/honeywell-edam/sps/siot/en-us/products/sensors/humidity-with-temperature-sensors/common/documents/sps-siot-humidity-sensors-line-guide-009034-7-en-ciid-54931.pdf?download=false)). The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [Honeywell HumidIcon (I2C HIH series) Temperature & Humidity Sensor](https://esphome.io/components/sensor/honeywell_hih_i2c.html#honeywell-humidicon-i2c-hih-series-temperature-humidity-sensor)*"
      },
      "hrxl_maxsonar_wr": {
        "dependencies": [
          "uart"
        ],
        "docs": "This sensor allows you to use HRXL MaxSonar WR series ultrasonic sensors by MaxBotix ([datasheet](https://www.maxbotix.com/documents/HRXL-MaxSonar-WR_Datasheet.pdf)) or the XL MaxSonar WR series ([datasheet](https://www.maxbotix.com/documents/XL-MaxSonar-WR_Datasheet.pdf)) with ESPHome to measure distances. Depending on the model, these sensors can measure in a range between 30 centimeters and 10 meters.\n\n*See also: [HRXL/XL MaxSonar WR Series](https://esphome.io/components/sensor/hrxl_maxsonar_wr.html#hrxl-xl-maxsonar-wr-series)*"
      },
      "hte501": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `hte501` sensor platform Temperature+Humidity sensor allows you to use your HTE501 ([datasheet](https://www.epluse.com/fileadmin/data/product/hte501/datasheet_HTE501.pdf) , [E+E HTE501](https://www.epluse.com/products/humidity-instruments/humidity-sensing-elements/hte501/)) sensor with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [HTE501 Temperature+Humidity Sensor](https://esphome.io/components/sensor/hte501.html#hte501-temperature-humidity-sensor)*"
      },
      "htu21d": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The HTU21D Temperature & Humidity component allows you to use HTU21D, Si7021 and SHT21 sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [HTU21D | Si7021 | SHT21 Temperature & Humidity Sensor](https://esphome.io/components/sensor/htu21d.html#htu21d-si7021-sht21-temperature-humidity-sensor)*"
      },
      "htu31d": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The HTU31D Temperature & Humidity component allows you to use HTU31D sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [HTU31D Temperature & Humidity Sensor](https://esphome.io/components/sensor/htu31d.html#htu31d-temperature-humidity-sensor)*"
      },
      "hx711": {
        "docs": "The `hx711` sensor platform allows you to use your HX711 load cell amplifier ([datasheet](https://www.mouser.com/ds/2/813/hx711_english-1022875.pdf), [SparkFun](https://www.sparkfun.com/products/13879)) with ESPHome\n\n*See also: [HX711 Load Cell Amplifier](https://esphome.io/components/sensor/hx711.html#hx711-load-cell-amplifier)*"
      },
      "hydreon_rgxx": {
        "docs": "The `hydreon_rgxx` sensor platform allows you to use rain sensors by Hydreon. Currently supported are the RG-9 and RG-15 sensors ([model comparison](https://rainsensors.com/products/model-comparison/)).\n\n*See also: [Hydreon Rain Sensor](https://esphome.io/components/sensor/hydreon_rgxx.html#hydreon-rain-sensor)*"
      },
      "hyt271": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The HYT271 Temperature & Humidity sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [HYT271 Temperature & Humidity Sensor](https://esphome.io/components/sensor/hyt271.html#hyt271-temperature-humidity-sensor)*"
      },
      "iaqcore": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The AMS iAQ-Core sensor allows you to use your ([datasheet](https://www.sciosense.com/wp-content/uploads/documents/iaQ-Core-Datasheet.pdf)) sensors with ESPHome.\n\n*See also: [AMS iAQ-Core Indoor Air Quality Sensor](https://esphome.io/components/sensor/iaqcore.html#ams-iaq-core-indoor-air-quality-sensor)*"
      },
      "ina219": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ina219` sensor platform allows you to use your INA219 High Side DC Current Sensor ([datasheet](https://cdn-learn.adafruit.com/downloads/pdf/adafruit-ina219-current-sensor-breakout.pdf), [Adafruit](https://www.adafruit.com/product/904)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [INA219 DC Current Sensor](https://esphome.io/components/sensor/ina219.html#ina219-dc-current-sensor)*"
      },
      "ina226": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ina226` sensor platform allows you to use your INA226 DC Current and Power Sensor ([datasheet](http://www.ti.com/lit/ds/symlink/ina226.pdf), [eBay](https://www.ebay.com/sch/i.html?_nkw=INA226)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [INA226 DC current and power sensor](https://esphome.io/components/sensor/ina226.html#ina226-dc-current-and-power-sensor)*"
      },
      "ina260": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ina260` sensor platform allows you to use your INA260 DC Current and Power Sensor ([datasheet](https://www.ti.com/lit/ds/symlink/ina260.pdf), [Adafruit](https://www.adafruit.com/product/4226)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [INA260 DC Current and Power sensor](https://esphome.io/components/sensor/ina260.html#ina260-dc-current-and-power-sensor)*"
      },
      "ina2xx_i2c": {
        "dependencies": [
          "i2c"
        ]
      },
      "ina2xx_spi": {
        "dependencies": [
          "spi"
        ]
      },
      "ina3221": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ina3221` sensor platform allows you to use your INA3221 3-Channel DC Current Sensor ([datasheet](http://www.ti.com/lit/ds/symlink/ina3221.pdf), [switchdoc](http://www.switchdoc.com/ina3221-breakout-board/)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [INA3221 3-Channel DC Current Sensor](https://esphome.io/components/sensor/ina3221.html#ina3221-3-channel-dc-current-sensor)*"
      },
      "inkbird_ibsth1_mini": {
        "dependencies": [
          "esp32_ble_tracker"
        ],
        "docs": "The `inkbird_ibsth1_mini` sensor platform lets you track the output of Inkbird IBS-TH1, IBS-TH1 Mini, and IBS-TH2 Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track the temperature, external temperature (non mini only), humidity and the battery level of the IBS-TH1 device every time the sensor sends out a BLE broadcast. Note that contrary to other implementations, ESPHome can track as many IBS-TH1/TH2 devices at once as you want.\n\n*See also: [Inkbird IBS-TH1, IBS-TH1 Mini, and IBS-TH2 BLE Sensor](https://esphome.io/components/sensor/inkbird_ibsth1_mini.html#inkbird-ibs-th1-ibs-th1-mini-and-ibs-th2-ble-sensor)*"
      },
      "integration": {
        "docs": "The `integration` sensor is a helper sensor that can integrate values from other sensors over time. This can for example be useful to integrate the values of a water flow sensor (in m^3/s) over time (result is in m^3).\n\n*See also: [Integration Sensor](https://esphome.io/components/sensor/integration.html#integration-sensor)*"
      },
      "internal_temperature": {
        "docs": "The `internal_temperature` sensor platform allows you to use the integrated temperature sensor of the ESP32, RP2040 and BK72XX chip.\n\n*See also: [Internal Temperature Sensor](https://esphome.io/components/sensor/internal_temperature.html#internal-temperature-sensor)*"
      },
      "jsn_sr04t": {
        "dependencies": [
          "uart"
        ],
        "docs": "This sensor allows you to use the JSN-SR04T and AJ_SR04M Waterproof Ultrasonic Range Finder **in Mode 1 and 2** with ESPHome to measure distances. This sensor can measure ranges between 25 centimeters and 600 centimeters with a resolution of 1 millimeter.\n\n*See also: [JSN-SR04T Waterproof Ultrasonic Range Finder](https://esphome.io/components/sensor/jsn_sr04t.html#jsn-sr04t-waterproof-ultrasonic-range-finder)*"
      },
      "kalman_combinator": {},
      "kamstrup_kmp": {
        "dependencies": [
          "uart"
        ],
        "docs": "The Kamstrup Meter Protocol (KMP) is used by certain Kamstrup utility meters and can be used to read measurements from the meter.\n\n*See also: [Kamstrup Meter Protocol [KMP]](https://esphome.io/components/sensor/kamstrup_kmp.html#kamstrup-meter-protocol-kmp)*"
      },
      "kmeteriso": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `kmeteriso` sensor platform allows you to use your KMeterISO ([product](https://docs.m5stack.com/en/unit/KMeterISO%20Unit), [M5Stack](https://docs.m5stack.com/en/unit/KMeterISO%20Unit)) K-Type thermocouple temperature sensor with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [M5Stack KMeterISO I2C K-Type probe temperature sensor](https://esphome.io/components/sensor/kmeteriso.html#m5stack-kmeteriso-i2c-k-type-probe-temperature-sensor)*"
      },
      "kuntze": {
        "docs": "The `kuntze` component allows you to integrate the Kuntze water measurement instrument in ESPHome. It uses [UART](https://esphome.io/components/uart.html#uart) (ModBUS) for communication.\n\n*See also: [Kuntze pool monitor](https://esphome.io/components/sensor/kuntze.html#kuntze-pool-monitor)*"
      },
      "ld2410": {
        "dependencies": [
          "ld2410"
        ],
        "docs": "The `ld2410` sensor allows you to use your [LD2410 Sensor to perform different measurements.\n\n*See also: [ld2410 Sensor](https://esphome.io/components/sensor/ld2410.html#sensor)*"
      },
      "ld2420": {
        "docs": "The `ld2420` sensor allows you to use your [LD2420 24Ghz mmWave Radar Sensor to approximate the distance between the sensor and an object moving within its field of detection.\n\n*See also: [ld2420 Sensor](https://esphome.io/components/sensor/ld2420.html#sensor)*"
      },
      "ld2450": {
        "dependencies": [
          "ld2450"
        ],
        "docs": "The `ld2450` sensor provides you with information about the states and attributes of detected targets.\n\n*See also: [ld2450 Sensor](https://esphome.io/components/sensor/ld2450.html#sensor)*"
      },
      "ltr390": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ltr390` sensor platform  allows you to use your LTR390 UV and ambient light sensor ([datasheet](https://optoelectronics.liteon.com/upload/download/DS86-2015-0004/LTR-390UV_Final_%20DS_V1%201.pdf), [Adafruit](https://www.adafruit.com/product/4831)) with ESPHome.\n\n*See also: [LTR390 UV and Ambient Light Sensor](https://esphome.io/components/sensor/ltr390.html#ltr390-uv-and-ambient-light-sensor)*"
      },
      "ltr501": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ltr501` sensor platform allows you to use a range of LiteOn ambient light and proximity sensors with ESPHome.\n\n*See also: [Lite-On Ambient Light & Proximity Sensors](https://esphome.io/components/sensor/ltr501.html#lite-on-ambient-light-proximity-sensors)*"
      },
      "ltr_als_ps": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ltr_als_ps` sensor platform allows you to use a range of LiteOn ambient light and proximity sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [Lite-On Ambient Light & Proximity Sensors](https://esphome.io/components/sensor/ltr_als_ps.html#lite-on-ambient-light-proximity-sensors)*"
      },
      "lvgl": {
        "docs": "The `lvgl` sensor platform creates a sensor component from an LVGL widget and requires [LVGL](https://esphome.io/components/lvgl/index.html) to be configured.\n\n*See also: [LVGL Sensor](https://esphome.io/components/sensor/lvgl.html#lvgl-sensor)*"
      },
      "m5stack_8angle": {
        "docs": "The `m5stack_8angle` platform allows to use the [m5angle]([https://docs.m5stack.com/en/unit/UNIT%208Angle](https://docs.m5stack.com/en/unit/UNIT%208Angle)) input device with ESPHome. It has 8 knobs, a switch and can individually drive 9 RGB LEDs.\n\n*See also: [M5Stack Unit 8 Angle](https://esphome.io/components/sensor/m5stack_8angle.html#m5stack-unit-8-angle)*"
      },
      "max17043": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The MAX17043 platform allows you to use a MAX17043 to more accurately monitor the remaining capacity of a LIPO battery ([datasheet](https://www.analog.com/en/products/max17043.html#documentation), [DFRobot](https://www.dfrobot.com/product-1734.html)) in ESPHome. It uses the [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) for communication (the address is fixed at 0x36).\n\n*See also: [Analog Devices MAX17043 battery fuel gauge](https://esphome.io/components/sensor/max17043.html#analog-devices-max17043-battery-fuel-gauge)*"
      },
      "max31855": {
        "docs": "The `max31855` temperature sensor allows you to use your MAX31855 thermocouple temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX31855.pdf)) with ESPHome\n\n*See also: [MAX31855 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31855.html#max31855-k-type-thermocouple-temperature-sensor)*"
      },
      "max31856": {
        "docs": "The `MAX31856` temperature sensor allows you to use your MAX31856 Thermocouple temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX31856.pdf)) with ESPHome.\n\n*See also: [MAX31856 Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max31856.html#max31856-thermocouple-temperature-sensor)*"
      },
      "max31865": {
        "dependencies": [
          "spi"
        ],
        "docs": "The `max31865` temperature sensor allows you to use your max31865 RTD temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX31865.pdf)) with ESPHome\n\n*See also: [MAX31865 Platinum RTD Temperature Sensor](https://esphome.io/components/sensor/max31865.html#max31865-platinum-rtd-temperature-sensor)*"
      },
      "max44009": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `max44009` sensor platform allows you to use your MAX44009 ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX44009.pdf)) ambient light sensor with ESPHome. This sensor features an ultra-wide 22-bit dynamic range from 0.045 lux to 188,000 lux. The [I\u00b2C bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MAX44009 Ambient Light Sensor](https://esphome.io/components/sensor/max44009.html#max44009-ambient-light-sensor)*"
      },
      "max6675": {
        "docs": "The `max6675` temperature sensor allows you to use your MAX6675 thermocouple temperature sensor ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX6675.pdf), [SainSmart](https://www.sainsmart.com/products/max6675-module-k-type-thermocouple-thermocouple-sensor-temperature-0-1024-for-arduino)) with ESPHome\n\n*See also: [MAX6675 K-Type Thermocouple Temperature Sensor](https://esphome.io/components/sensor/max6675.html#max6675-k-type-thermocouple-temperature-sensor)*"
      },
      "max9611": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `MAX9611` sensor platform allows you to use your MAX9611/MAX9612 ([datasheet](https://datasheets.maximintegrated.com/en/ds/MAX9611-MAX9612.pdf)) High-side current, voltage and temperature sensors with ESPHome.\n\n*See also: [MAX9611/9612 High Side Current+Voltage+Temperature Sensor](https://esphome.io/components/sensor/max9611.html#max9611-9612-high-side-current-voltage-temperature-sensor)*"
      },
      "mcp3008": {
        "dependencies": [
          "mcp3008"
        ],
        "docs": "The `mcp3008` sensor allows you to use your MCP3008 10-Bit A/D Converter sensors with ESPHome. First, setup a [MCP3008 Hub](https://esphome.io/components/sensor/mcp3008.html#mcp3008-component) for your MCP3008 sensor and then use this sensor platform to create individual sensors that will report the voltage to Home Assistant.\n\n*See also: [mcp3008 Sensor](https://esphome.io/components/sensor/mcp3008.html#sensor)*"
      },
      "mcp3204": {
        "dependencies": [
          "mcp3204"
        ],
        "docs": "The `mcp3204` sensor allows you to use your MCP3204 or MCP3208 12-Bit A/D Converter sensors with ESPHome. First, setup a [MCP3204 Hub](https://esphome.io/components/sensor/mcp3204.html#mcp3204-component) for your MCP3204/8 sensor and then use this sensor platform to create individual sensors that will report the voltage to Home Assistant.\n\n*See also: [mcp3204 Sensor](https://esphome.io/components/sensor/mcp3204.html#sensor)*"
      },
      "mcp9600": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `mcp9600` sensor platform allows you to use your MCP9600 and MCP9601 ([datasheet](https://cdn-learn.adafruit.com/assets/assets/000/105/040/original/MCP960X-Data-Sheet-20005426%281%29.pdf), [Adafruit](https://www.adafruit.com/product/4101)) to measure the temperature of a connected thermocouple while also measuring the ambient temperature around the sensor with ESPHome. [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MCP9600 Thermocouple Amplifier](https://esphome.io/components/sensor/mcp9600.html#mcp9600-thermocouple-amplifier)*"
      },
      "mcp9808": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The MCP9808 Temperature sensor allows you to use your MCP9808 ([datasheet](http://ww1.microchip.com/downloads/en/DeviceDoc/25095A.pdf), [Adafruit](https://www.adafruit.com/product/1782)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MCP9808 Temperature Sensor](https://esphome.io/components/sensor/mcp9808.html#mcp9808-temperature-sensor)*"
      },
      "mhz19": {
        "dependencies": [
          "uart"
        ],
        "docs": "The `mhz19` sensor platform allows you to use MH-Z19 CO_2 and temperature sensors ([Revspace](https://revspace.nl/MHZ19)) with ESPHome. The CO_2 measurement also works with the MH-Z16 and MH-Z14 sensors.\n\n*See also: [MH-Z19 CO_2 and Temperature Sensor](https://esphome.io/components/sensor/mhz19.html#mh-z19-co-2-and-temperature-sensor)*"
      },
      "micronova": {},
      "mics_4514": {
        "dependencies": [
          "i2c"
        ],
        "docs": "This component exposes the different gas concentration sensors from the [MiCS-4514](https://www.dfrobot.com/product-2417.html). This is a differnet sensor than the MICS-4514 being sold on AliExpress.\n\n*See also: [MiCS 4514 Gas Sensor](https://esphome.io/components/sensor/mics_4514.html#mics-4514-gas-sensor)*"
      },
      "mlx90393": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `mlx90393` sensor platform allows you to use your MLX90393 ([datasheet](https://media.melexis.com/-/media/files/documents/datasheets/mlx90393-datasheet-melexis.pdf), [Adafruit](https://www.adafruit.com/product/4022)) three axis magnetometer with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MLX90393 Triple-axis Magnetometer](https://esphome.io/components/sensor/mlx90393.html#mlx90393-triple-axis-magnetometer)*"
      },
      "mlx90614": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `mlx90614` sensor platform allows you to use your Melexis MLX90614 non-contact infrared thermometer ([Datasheet](https://www.melexis.com/en/documents/documentation/datasheets/datasheet-mlx90614), [Product Page](https://www.melexis.com/en/product/MLX90614/Digital-Plug-Play-Infrared-Thermometer-TO-Can)) with ESPHome. Sensor measures both ambient and object temperature that can be enabled independently.\n\n*See also: [MLX90614  non-contact thermometer](https://esphome.io/components/sensor/mlx90614.html#mlx90614-non-contact-thermometer)*"
      },
      "mmc5603": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `mmc5603` allows you to use your MMC5603 triple-axis magnetometers ([datasheet](https://cdn-learn.adafruit.com/assets/assets/000/113/957/original/MMC5603NJ_RevB_7-12-18.pdf?1659554945), [Adafruit](https://www.adafruit.com/product/5579)) with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MMC5603 Magnetometer](https://esphome.io/components/sensor/mmc5603.html#mmc5603-magnetometer)*"
      },
      "mmc5983": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `mmc5983` component allows you to use your MMC5983 triple-axis magnetometer ([datasheet](https://www.memsic.com/Public/Uploads/uploadfile/files/20220119/MMC5983MADatasheetRevA.pdf), [SparkFun](https://www.sparkfun.com/products/19921)) with ESPHome.\n\n*See also: [MMC5983 Magnetometer](https://esphome.io/components/sensor/mmc5983.html#mmc5983-magnetometer)*"
      },
      "modbus_controller": {
        "dependencies": [
          "modbus_controller"
        ],
        "docs": "The `modbus_controller` sensor platform creates a sensor from a modbus_controller component and requires [Modbus Controller](https://esphome.io/components/modbus_controller.html) to be configured.\n\n*See also: [Modbus Controller Sensor](https://esphome.io/components/sensor/modbus_controller.html#modbus-controller-sensor)*"
      },
      "mopeka_pro_check": {
        "dependencies": [
          "esp32_ble_tracker"
        ],
        "docs": "The `mopeka_pro_check` sensor platform lets you track the output of Mopeka Pro Check LP, Mopeka Pro Plus, Mopeka Pro Universal or Lippert Propane Tank Sensors,   Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track the tank level, distance, temperature, battery percentage, and sensor reading quality of a device every time the sensor sends out a BLE broadcast.  There are additional configuration options to control handling of poor quality readings and reporting reading quality issues.\n\n*See also: [Mopeka Pro Check BLE Sensor](https://esphome.io/components/sensor/mopeka_pro_check.html#mopeka-pro-check-ble-sensor)*"
      },
      "mopeka_std_check": {
        "dependencies": [
          "esp32_ble_tracker"
        ],
        "docs": "The `mopeka_std_check` sensor platform lets you track the output of Mopeka Standard Check LP Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track the tank level, distance, temperature, and battery percentage of a Mopeka Standard Check LP BLE device every time the sensor sends out a BLE broadcast.\n\n*See also: [Mopeka Standard Check BLE Sensor](https://esphome.io/components/sensor/mopeka_std_check.html#mopeka-standard-check-ble-sensor)*"
      },
      "mpl3115a2": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `mpl3115a2` sensor platform allows you to use your MPL3115A2 atmospheric pressure sensors ([datasheet](https://www.nxp.com/docs/en/data-sheet/MPL3115A2.pdf), [Adafruit](https://www.adafruit.com/product/1893))  temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MPL3115A2 Barometric Pressure/Altitude/Temperature Sensor](https://esphome.io/components/sensor/mpl3115a2.html#mpl3115a2-barometric-pressure-altitude-temperature-sensor)*"
      },
      "mpu6050": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `mpu6050` sensor platform allows you to use your MPU6050 Accelerometer/Gyroscope ([datasheet](https://www.invensense.com/wp-content/uploads/2015/02/MPU-6000-Datasheet1.pdf), [SparkFun](https://www.sparkfun.com/products/11028)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MPU6050 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6050.html#mpu6050-accelerometer-gyroscope-sensor)*"
      },
      "mpu6886": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `mpu6886` sensor platform allows you to use your MPU6886 Accelerometer/Gyroscope ([datasheet](https://m5stack.oss-cn-shenzhen.aliyuncs.com/resource/docs/datasheet/core/MPU-6886-000193%2Bv1.1_GHIC_en.pdf), [M5Stack](https://docs.m5stack.com/en/unit/imu)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MPU6886 Accelerometer/Gyroscope Sensor](https://esphome.io/components/sensor/mpu6886.html#mpu6886-accelerometer-gyroscope-sensor)*"
      },
      "mqtt_subscribe": {
        "dependencies": [
          "mqtt"
        ],
        "docs": "The `mqtt_subscribe` sensor platform allows you to get external data into ESPHome. The sensor will subscribe to messages on the given MQTT topic and parse each message into a floating point number.\n\n*See also: [MQTT Subscribe Sensor](https://esphome.io/components/sensor/mqtt_subscribe.html#mqtt-subscribe-sensor)*"
      },
      "ms5611": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ms5611` sensor platform allows you to use your MS5611 atmospheric pressure sensors ([hobbytronics](http://www.hobbytronics.co.uk/ms5611-altitude-sensor)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MS5611 Atmospheric Pressure Sensor](https://esphome.io/components/sensor/ms5611.html#ms5611-atmospheric-pressure-sensor)*"
      },
      "ms8607": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ms8607` sensor platform allows you to use your MS8607 ([datasheet](https://www.te.com/commerce/DocumentDelivery/DDEController?Action=srchrtrv&DocNm=MS8607-02BA01&DocType=DS&DocLang=English), [Adafruit](https://www.adafruit.com/product/4716)) temperature, pressure and humidity sensors with ESPHome. An [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [MS8607 Temperature+Pressure+Humidity Sensor](https://esphome.io/components/sensor/ms8607.html#ms8607-temperature-pressure-humidity-sensor)*"
      },
      "msa3xx": {
        "dependencies": [
          "msa3xx"
        ],
        "docs": "Acceleration data is available through sensors configuration. You can use shorthand notation like `acceleration_x: \"Acceleration X\"` or use regular notation. For regular notation only the **name** is required. All options from [Sensor](https://esphome.io/components/sensor/index.html#config-sensor).\n\n*See also: [msa3xx Sensor](https://esphome.io/components/sensor/msa3xx.html#sensor)*"
      },
      "nau7802": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `nau7802` sensor platform allows you to use your NAU7802 ADC ([datasheet](https://www.nuvoton.com/resource-files/NAU7802%20Data%20Sheet%20V1.7.pdf), [Adafruit](https://www.adafruit.com/product/4538)) with ESPHome. This ADC is typically used with strain gauges to act as a weight sensor.\n\n*See also: [NAU7802 24-bit ADC](https://esphome.io/components/sensor/nau7802.html#nau7802-24-bit-adc)*"
      },
      "nextion": {
        "docs": "The `nextion` sensor platform supports integers or floats (Xfloat). It can be a component, a variable or a waveform in the Nextion display. It is best to set the component\u2019s vscope to global in the Nextion Editor. This way the component will be available if the page is shown or not.\n\n*See also: [Nextion Sensor Component](https://esphome.io/components/sensor/nextion.html#nextion-sensor-component)*"
      },
      "npi19": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `npi19` sensor platform allows you to use your NPI-19 ([datasheet](https://www.amphenol-sensors.com/hubfs/AAS-920-699F-NovaSensor-NPI-19-I2C-061322-web.pdf), [product page](https://www.amphenol-sensors.com/en/novasensor/pressure-sensors/3358-npi-19-i2c)) pressure sensors with ESPHome.\n\n*See also: [NPI-19 Pressure Sensor](https://esphome.io/components/sensor/npi19.html#npi-19-pressure-sensor)*"
      },
      "ntc": {
        "docs": "The `ntc` platform is a helper sensor that allows you to convert resistance readings from a NTC thermistor to temperature readings.\n\n*See also: [NTC Sensor](https://esphome.io/components/sensor/ntc.html#ntc-sensor)*"
      },
      "opentherm": {
        "dependencies": [
          "opentherm"
        ],
        "docs": "The boiler can also report several numerical values, which are available through sensors. Your boiler may not support all of these values, in which case there won\u2019t be any value published to that sensor. The following sensors are available:\n\n*See also: [opentherm Sensor](https://esphome.io/components/opentherm.html#sensor)*"
      },
      "pid": {
        "docs": "Additionally, the PID climate platform provides an optional sensor platform to monitor the calculated PID parameters to help finding good PID values.\n\n*See also: [pid Sensor](https://esphome.io/components/climate/pid.html#pid-sensor)*"
      },
      "pipsolar": {
        "dependencies": [
          "uart"
        ],
        "docs": "All sensors are normal sensors\u2026 so all sensor variables are working to.\n\n*See also: [pipsolar Sensor](https://esphome.io/components/pipsolar.html#sensor)*"
      },
      "pm1006": {
        "dependencies": [
          "uart"
        ],
        "docs": "The `pm1006` sensor platform allows you to use Cubic PM1006 particulate matter sensors ([datasheet](http://www.jdscompany.co.kr/download.asp?gubun=07&filename=PM1006_LED_PARTICLE_SENSOR_MODULE_SPECIFICATIONS.pdf)) with ESPHome.\n\n*See also: [PM1006 Particulate Matter Sensor](https://esphome.io/components/sensor/pm1006.html#pm1006-particulate-matter-sensor)*"
      },
      "pm2005": {
        "dependencies": [
          "i2c"
        ]
      },
      "pmsa003i": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `pmsa003i` sensor platform  allows you to use your Plantower PMSA003I particulate matter sensor ([datasheet](https://cdn-shop.adafruit.com/product-files/4632/4505_PMSA003I_series_data_manual_English_V2.6.pdf), [Adafruit](https://www.adafruit.com/product/4632)) with ESPHome.\n\n*See also: [PMSA003I Particulate Matter Sensor](https://esphome.io/components/sensor/pmsa003i.html#pmsa003i-particulate-matter-sensor)*"
      },
      "pmsx003": {
        "dependencies": [
          "uart"
        ],
        "docs": "The `pmsx003` sensor platform allows you to use your Plantower PMS5003, PMS7003, \u2026 laser based particulate matter sensors ([datasheet](http://www.aqmd.gov/docs/default-source/aq-spec/resources-page/plantower-pms5003-manual_v2-3.pdf)) sensors with ESPHome.\n\n*See also: [PMSX003 Particulate Matter Sensor](https://esphome.io/components/sensor/pmsx003.html#pmsx003-particulate-matter-sensor)*"
      },
      "pmwcs3": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `pmwcs3` sensor platform allows you to use your PMWCS3 ([informations](https://tinovi.com/wp-content/uploads/2020/01/PM-WCS-3-I2C.pdf)) capacitive soil moisture and temperature sensor with ESPHome. The [I\u00b2C bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work. Wiring scheme: red is 3.3V, black & shield is GND, green is SDA and white is SCL. 2.2kOhm resistors are advised to pullup both SDA & SDA lines.\n\n*See also: [PMWCS3 Capacitive Soil Moisture and Temperature Sensor](https://esphome.io/components/sensor/pmwcs3.html#pmwcs3-capacitive-soil-moisture-and-temperature-sensor)*"
      },
      "pulse_counter": {
        "docs": "The pulse counter sensor allows you to count the number of pulses and the frequency of a signal on any pin.\n\n*See also: [Pulse Counter Sensor](https://esphome.io/components/sensor/pulse_counter.html#pulse-counter-sensor)*"
      },
      "pulse_meter": {
        "docs": "The pulse meter sensor allows you to count the number and frequency of pulses on any pin. It is intended to be a drop-in replacement for the [pulse counter component](https://esphome.io/components/sensor/pulse_counter.html). Rather than counting pulses over a fixed time interval, the pulse meter sensor measures the time between pulses. The precise manner in which this is done depends on the `internal_filter_mode` option. This leads to a higher resolution, especially for low pulse rates, as the pulse counter sensor is limited by the number of pulses within a time interval.\n\n*See also: [Pulse Meter Sensor](https://esphome.io/components/sensor/pulse_meter.html#pulse-meter-sensor)*"
      },
      "pulse_width": {
        "docs": "The `pulse_width` sensor allows you to measure how long a given digital signal is HIGH. For example this can be used to measure PWM signals to transmit some value over a simple protocol. The unit of measurement for this sensor is seconds.\n\n*See also: [Pulse Width Sensor](https://esphome.io/components/sensor/pulse_width.html#pulse-width-sensor)*"
      },
      "pvvx_mithermometer": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "pylontech": {
        "docs": "All values are reported for every Pylontech battery individually.\n\n*See also: [pylontech Sensor](https://esphome.io/components/pylontech.html#sensor)*"
      },
      "pzem004t": {
        "dependencies": [
          "uart"
        ],
        "docs": "This page is incomplete and could use some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:\n\n*See also: [Peacefair PZEM-004T Energy Monitor](https://esphome.io/components/sensor/pzem004t.html#peacefair-pzem-004t-energy-monitor)*"
      },
      "pzemac": {
        "docs": "This page is incomplete and could use some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:\n\n*See also: [Peacefair PZEM-004T V3 Energy Monitor](https://esphome.io/components/sensor/pzemac.html#peacefair-pzem-004t-v3-energy-monitor)*"
      },
      "pzemdc": {
        "docs": "This page is incomplete and could use some work. If you want to contribute, please read the [contributing guide](https://esphome.io/guides/contributing.html). This page is missing:\n\n*See also: [Peacefair PZEM-00X DC Energy Monitor](https://esphome.io/components/sensor/pzemdc.html#peacefair-pzem-00x-dc-energy-monitor)*"
      },
      "qmc5883l": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `qmc5883l` allows you to use your QMC5883L triple-axis magnetometers ([datasheet](http://wiki.sunfounder.cc/images/7/72/QMC5883L-Datasheet-1.0.pdf)) with ESPHome. This sensor is very simular to the [HMC5883L](https://esphome.io/components/sensor/hmc5883l.html#hmc5883l) sensor and is oftern found as a knock off replacement. The QMC5883L sensor performs on par to the HMC5883L sensor, though the configuration differs. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [QMC5883L Magnetometer](https://esphome.io/components/sensor/qmc5883l.html#qmc5883l-magnetometer)*"
      },
      "qmp6988": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `qmp6988` sensor platform allows you to use your QMP6988 ([datasheet](https://m5stack.oss-cn-shenzhen.aliyuncs.com/resource/docs/datasheet/unit/enviii/QMP6988%20Datasheet.pdf), [M5Stack](https://docs.m5stack.com/en/unit/envIII)) temperature and pressure sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [QMP6988 Temperature+Pressure Sensor](https://esphome.io/components/sensor/qmp6988.html#qmp6988-temperature-pressure-sensor)*"
      },
      "radon_eye_rd200": {
        "dependencies": [
          "ble_client"
        ],
        "docs": "Radon Eye RD200 tracks radon concentration over short periods (5 min interval) and longer periods (24h or month).\n\n*See also: [Radon Eye RD200 Sensor](https://esphome.io/components/sensor/radon_eye_ble.html#radon-eye-rd200-sensor)*"
      },
      "resistance": {
        "docs": "The `resistance` platform is a helper sensor that allows you to convert readings from a voltage sensor (such as the [ADC Sensor](https://esphome.io/components/sensor/adc.html)) into resistance readings in \u2126 (ohm).\n\n*See also: [Resistance Sensor](https://esphome.io/components/sensor/resistance.html#resistance-sensor)*"
      },
      "rotary_encoder": {
        "docs": "The `rotary_encoder` sensor platform allows you to use any continuous-rotation rotary encoders with ESPHome. These devices usually have two pins with which they encode the rotation. Every time the knob of the rotary encoder is turned, the signals of the two pins go HIGH and LOW in turn. See [this Arduino article](https://playground.arduino.cc/Main/RotaryEncoders) to gain a better understanding of these sensors.\n\n*See also: [Rotary Encoder Sensor](https://esphome.io/components/sensor/rotary_encoder.html#rotary-encoder-sensor)*"
      },
      "ruuvitag": {
        "dependencies": [
          "esp32_ble_tracker"
        ],
        "docs": "The `ruuvitag` sensor platform lets you track the output of RuuviTag Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track the temperature, humidity, acceleration and battery voltage of a RuuviTag device with RAWv1 protocol every time the sensor sends out a BLE broadcast. RAWv2 protocol is supported too. Then tx power, movement count and measurement sequence number are also tracked.\n\n*See also: [RuuviTag Open Source BLE Sensor](https://esphome.io/components/sensor/ruuvitag.html#ruuvitag-open-source-ble-sensor)*"
      },
      "scd30": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `scd30` sensor platform allows you to use your Sensirion SCD30 CO\u2082 ([datasheet](https://sensirion.com/media/documents/4EAF6AF8/61652C3C/Sensirion_CO2_Sensors_SCD30_Datasheet.pdf)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SCD30 CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd30.html#scd30-co2-temperature-and-relative-humidity-sensor)*"
      },
      "scd4x": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `scd4x` sensor platform  allows you to use your Sensirion SCD4X CO\u2082 ([datasheet](https://sensirion.com/media/documents/48C4B7FB/66E05452/CD_DS_SCD4x_Datasheet_D1.pdf)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SCD4X CO\u2082, Temperature and Relative Humidity Sensor](https://esphome.io/components/sensor/scd4x.html#scd4x-co2-temperature-and-relative-humidity-sensor)*"
      },
      "sdm_meter": {
        "docs": "The `sdm_meter` sensor platform allows you to use Eastron SDM modbus energy monitors ([website](http://www.eastrongroup.com/product_detail.php?id=170&menu1=&menu2=)) with ESPHome.\n\n*See also: [Eastron SDM Energy Monitor](https://esphome.io/components/sensor/sdm_meter.html#eastron-sdm-energy-monitor)*"
      },
      "sdp3x": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The SDP3x Differential Pressure sensor allows you to use your SDP3x ([datasheet](https://sensirion.com/media/documents/4D045D69/6375F34F/DP_DS_SDP3x_digital_D1.pdf), [sparkfun](https://www.sparkfun.com/products/17874)) or SDP800 Series ([datasheet](https://sensirion.com/media/documents/90500156/6167E43B/Sensirion_Differential_Pressure_Datasheet_SDP8xx_Digital.pdf)) sensors with ESPHome.\n\n*See also: [SDP3x / SDP800 Series Differential Pressure Sensor](https://esphome.io/components/sensor/sdp3x.html#sdp3x-sdp800-series-differential-pressure-sensor)*"
      },
      "sds011": {
        "dependencies": [
          "uart"
        ],
        "docs": "The `sds011` sensor platform allows you to use SDS011 particulate matter sensors ([datasheet](https://nettigo.pl/attachments/398)) with ESPHome.\n\n*See also: [SDS011 Particulate Matter Sensor](https://esphome.io/components/sensor/sds011.html#sds011-particulate-matter-sensor)*"
      },
      "seeed_mr24hpc1": {
        "docs": "The `seeed_mr24hpc1` sensor allows you to perform different measurements.\n\n*See also: [seeed_mr24hpc1 Sensor](https://esphome.io/components/seeed_mr24hpc1.html#sensor)*"
      },
      "seeed_mr60bha2": {
        "dependencies": [
          "seeed_mr60bha2"
        ],
        "docs": "The `seeed_mr60bha2` sensor allows you to perform different measurements.\n\n*See also: [seeed_mr60bha2 Sensor](https://esphome.io/components/seeed_mr60bha2.html#sensor)*"
      },
      "selec_meter": {
        "docs": "The `selec_meter` sensor platform allows you to use Selec Modbus energy monitors ([website](https://www.selec.com/product-details/energy-meter-direct-operated-em2m)) with ESPHome.\n\n*See also: [Selec Energy Monitor](https://esphome.io/components/sensor/selec_meter.html#selec-energy-monitor)*"
      },
      "sen0321": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `sen0321` sensor platform allows you to use your DFRobot ([product wiki](https://wiki.dfrobot.com/Gravity_IIC_Ozone_Sensor_(0-10ppm)%20SKU_SEN0321), [DFRobot](https://www.dfrobot.com/product-2005.html)) ozone sensors with ESPHome. The sensor is used in automatic mode where the sensor actively updates its measurements every 2 seconds. [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SEN0321 DFRobot Ozone Sensor](https://esphome.io/components/sensor/sen0321.html#sen0321-dfrobot-ozone-sensor)*"
      },
      "sen21231": {
        "dependencies": [
          "i2c"
        ],
        "docs": "[Person Sensor (SEN21231) from Useful Sensors](https://usefulsensors.com/person-sensor) has built in facial recognition that can detect how many people are facing the sensor and relative positions of the faces.\n\n*See also: [SEN21231 Person Sensor from Useful Sensors](https://esphome.io/components/sensor/sen21231.html#sen21231-person-sensor-from-useful-sensors)*"
      },
      "sen5x": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `sen5x` sensor platform allows you to use your Sensirion [SEN50](https://sensirion.com/products/catalog/SEN50/), [SEN54](https://sensirion.com/products/catalog/SEN54/) and [SEN55](https://sensirion.com/products/catalog/SEN55/) Environmental sensor ([datasheet](https://sensirion.com/media/documents/6791EFA0/62A1F68F/Sensirion_Datasheet_Environmental_Node_SEN5x.pdf)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work. This sensor supports both UART and I\u00b2C communication. Only I\u00b2C communication is implemented in this component.\n\n*See also: [Sen5x Series Environmental sensor](https://esphome.io/components/sensor/sen5x.html#sen5x-series-environmental-sensor)*"
      },
      "senseair": {
        "dependencies": [
          "uart"
        ],
        "docs": "The `senseair` sensor platform allows you to use SenseAir CO_2 sensor ([website](https://senseair.com/products/size-counts/s8-residential/)) with ESPHome.\n\n*See also: [SenseAir CO_2 Sensor](https://esphome.io/components/sensor/senseair.html#senseair-co-2-sensor)*"
      },
      "sfa30": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `sfa30` sensor platform  allows you to use your Sensirion SFA30 Formaldehyde ([datasheet](https://sensirion.com/media/documents/DEB1C6D6/63D92360/Sensirion_formaldehyde_sensors_datasheet_SFA30.pdf)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work. This sensor supports both UART and I\u00b2C communication. However, at the moment only I\u00b2C communication is implemented.\n\n*See also: [SFA30 Formaldehyde Sensor](https://esphome.io/components/sensor/sfa30.html#sfa30-formaldehyde-sensor)*"
      },
      "sgp30": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `sgp30` sensor platform allows you to use your Sensirion SGP30 multi-pixel gas ([datasheet](https://sensirion.com/media/documents/984E0DD5/61644B8B/Sensirion_Gas_Sensors_Datasheet_SGP30.pdf)) sensors or the SVM30 breakout-boards  ([product page](https://sensirion.com/products/catalog/SVM30/)) with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SGP30 CO\u2082 and Volatile Organic Compound Sensor](https://esphome.io/components/sensor/sgp30.html#sgp30-co2-and-volatile-organic-compound-sensor)*"
      },
      "sgp40": {},
      "sgp4x": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `sgp4x` sensor platform allows you to use your Sensirion SGP40 ([datasheet](https://sensirion.com/media/documents/296373BB/6203C5DF/Sensirion_Gas_Sensors_Datasheet_SGP40.pdf)) or SGP41 ([datasheet](https://sensirion.com/media/documents/5FE8673C/61E96F50/Sensirion_Gas_Sensors_Datasheet_SGP41.pdf)) with ESPHome. The type of sensor used is automatically detected. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SGP40 Volatile Organic Compound Sensor and SGP41 VOC and NOx Sensor](https://esphome.io/components/sensor/sgp4x.html#sgp40-volatile-organic-compound-sensor-and-sgp41-voc-and-nox-sensor)*"
      },
      "sht3xd": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `sht3xd` sensor platform Temperature+Humidity sensor allows you to use your Sensirion SHT31-D/SHT3x ([datasheet](https://cdn-shop.adafruit.com/product-files/2857/Sensirion_Humidity_SHT3x_Datasheet_digital-767294.pdf), [Adafruit](https://www.adafruit.com/product/2857) ) and SHT85 ([datasheet](https://sensirion.com/media/documents/4B40CEF3/640B2346/Sensirion_Humidity_Sensors_SHT85_Datasheet.pdf), [Sensirion](https://sensirion.com/products/catalog/SHT85/) ) sensors with Esphome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SHT3X-D Temperature+Humidity Sensor](https://esphome.io/components/sensor/sht3xd.html#sht3x-d-temperature-humidity-sensor)*"
      },
      "sht4x": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `sht4x` sensor platform  allows you to use your SHT4X temperature and humidity sensor ([datasheet](https://sensirion.com/media/documents/33FD6951/63E1087C/Datasheet_SHT4x_1.pdf), [Adafruit](https://www.adafruit.com/product/4885)) with ESPHome.\n\n*See also: [SHT4X Temperature and Humidity Sensor](https://esphome.io/components/sensor/sht4x.html#sht4x-temperature-and-humidity-sensor)*"
      },
      "shtcx": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `shtcx` sensor platform Temperature+Humidity sensor allows you to use your Sensirion SHTC1 ([datasheet](https://sensirion.com/media/documents/21BF77EA/63A5A411/Datasheet_SHTC1.pdf), [Sensirion STHC1](https://www.sensirion.com/en/environmental-sensors/humidity-sensors/digital-humidity-sensor-for-consumer-electronics-and-iot/)) and the newer SHTC3 ([datasheet](https://sensirion.com/media/documents/643F9C8E/63A5A436/Datasheet_SHTC3.pdf), [SparkFun](https://www.sparkfun.com/products/15074) ) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [SHTCx Temperature+Humidity Sensors](https://esphome.io/components/sensor/shtcx.html#shtcx-temperature-humidity-sensors)*"
      },
      "sim800l": {
        "dependencies": [
          "sim800l"
        ],
        "docs": "Configuration variables:\n\n*See also: [sim800l Sensor](https://esphome.io/components/sim800l.html#sensor)*"
      },
      "sm300d2": {
        "dependencies": [
          "uart"
        ],
        "docs": "The `sm300d2` sensor platform allows you to use the SM300D2 7-in-1 Air Quality Sensor with ESPHome.\n\n*See also: [SM300D2 7-in-1 Air Quality Sensor](https://esphome.io/components/sensor/sm300d2.html#sm300d2-7-in-1-air-quality-sensor)*"
      },
      "sml": {
        "docs": "**string**: Specify the OBIS code you want to retrieve data for from the device. The format must be (A-B:C.D.E, e.g. 1-0:1.8.0)\n\n*See also: [sml Sensor](https://esphome.io/components/sml.html#sensor)*"
      },
      "smt100": {
        "dependencies": [
          "uart"
        ],
        "docs": "The SMT100 sensor platform allows you to use the SMT100 soil moisture and temperature with ESPHome.\n\n*See also: [SMT100 Soil Moisture Sensor](https://esphome.io/components/sensor/smt100.html#smt100-soil-moisture-sensor)*"
      },
      "sps30": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `sps30` sensor platform allows you to use your Sensirion SPS30 ([datasheet](https://sensirion.com/media/documents/8600FF88/616542B5/Sensirion_PM_Sensors_Datasheet_SPS30.pdf)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work. This sensor supports both UART and I\u00b2C communication. However, at the moment only I\u00b2C communication is implemented.\n\n*See also: [SPS30 Particulate Matter Sensor](https://esphome.io/components/sensor/sps30.html#sps30-particulate-matter-sensor)*"
      },
      "sts3x": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `sts3x` sensor platform Temperature sensor allows you to use your Sensirion STS30-DIS, STS31-DIS or STS35-DIS ([datasheet](https://sensirion.com/media/documents/1DA31AFD/61641F76/Sensirion_Temperature_Sensors_STS3x_Datasheet.pdf), [Sensirion STS3x](https://www.sensirion.com/sts3x/)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [STS3X Temperature Sensor](https://esphome.io/components/sensor/sts3x.html#sts3x-temperature-sensor)*"
      },
      "sun": {
        "dependencies": [
          "sun"
        ],
        "docs": "Additionally, the sun component exposes its values over a sensor platform.\n\n*See also: [sun Sensor](https://esphome.io/components/sun.html#sun-sensor)*"
      },
      "sun_gtil2": {
        "docs": "**sun_gtil2_id** (*Optional*): Manually specify the ID of the sun_gtil2 instance if there are multiple.\n\n*See also: [sun_gtil2 Sensor](https://esphome.io/components/sun_gtil2.html#sensor)*"
      },
      "t6615": {
        "dependencies": [
          "uart"
        ],
        "docs": "The `t6615` sensor platform allows you to use T6613 and T6615 family sensors ([amphenol](https://amphenol-sensors.com/en/telaire/co2/525-co2-sensor-modules/319-t6615)) with ESPHome. T6613 sensors are unreferenced and require ABC to calibrate daily, while the T6615 sensors have a sealed reference gas and do not require ABC calibration. All ppm ranges are supported by this platform.\n\n*See also: [T6613/15 CO2 Sensors](https://esphome.io/components/sensor/t6615.html#t6613-15-co2-sensors)*"
      },
      "tc74": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The TC74 sensor platform allows you to use your TC74 ([datasheet](https://ww1.microchip.com/downloads/en/DeviceDoc/21462D.pdf), [Adafruit](https://www.adafruit.com/product/4375)) temperature sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [TC74 Temperature Sensor](https://esphome.io/components/sensor/tc74.html#tc74-temperature-sensor)*"
      },
      "tcs34725": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `tcs34725` sensor platform allows you to use your TCS34725 RGB color sensors ([datasheet](https://cdn-shop.adafruit.com/datasheets/TCS34725.pdf), [Adafruit](https://www.adafruit.com/product/1334)), color temperature and illuminance sensors with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [TCS34725 RGB Color Sensor](https://esphome.io/components/sensor/tcs34725.html#tcs34725-rgb-color-sensor)*"
      },
      "tee501": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `hte501` sensor platform Temperature sensor allows you to use your TEE501 ([datasheet](https://www.epluse.com/fileadmin/data/product/tee501/datasheet_TEE501.pdf), [E+E TEE501](https://www.epluse.com/products/temperature-measurement/temperature-sensing-element/tee501/)) sensor with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [TEE501 Temperature Sensor](https://esphome.io/components/sensor/tee501.html#tee501-temperature-sensor)*"
      },
      "teleinfo": {
        "docs": "**string**: Specify the tag you want to retrieve from the Teleinformation.\n\n*See also: [teleinfo Sensor](https://esphome.io/components/sensor/teleinfo.html#sensor)*"
      },
      "tem3200": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `tem3200` sensor platform allows you to use your TE-M3200 ([datasheet](https://www.te.com/commerce/DocumentDelivery/DDEController?Action=showdoc&DocId=Data+Sheet%7FM3200%7FA20%7Fpdf%7FEnglish%7FENG_DS_M3200_A20.pdf), [product page](https://www.te.com/en/product-CAT-PTT0068.html)) pressure sensors with ESPHome.\n\n*See also: [TE-M3200 Pressure Sensor](https://esphome.io/components/sensor/tem3200.html#te-m3200-pressure-sensor)*"
      },
      "template": {
        "docs": "The `template` sensor platform allows you to create a sensor with templated values using [lambdas](https://esphome.io/automations/templates.html#config-lambda).\n\n*See also: [Template Sensor](https://esphome.io/components/sensor/template.html#template-sensor)*"
      },
      "tmp102": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The TMP102 Temperature sensor allows you to use your TMP102 ([Sparkfun](https://www.sparkfun.com/products/13314)) sensors with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [TMP102 Temperature Sensor](https://esphome.io/components/sensor/tmp102.html#tmp102-temperature-sensor)*"
      },
      "tmp1075": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The TMP1075 Temperature sensor allows you to use your TMP1075 ([datasheet](https://www.ti.com/lit/gpn/tmp1075)) sensors with ESPHome.\n\n*See also: [TMP1075 Temperature Sensor](https://esphome.io/components/sensor/tmp1075.html#tmp1075-temperature-sensor)*"
      },
      "tmp117": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The TMP117 Temperature sensor allows you to use your TMP117 ([datasheet](https://www.ti.com/lit/ds/symlink/tmp117.pdf), [sparkfun](https://www.sparkfun.com/products/15805)) sensors with ESPHome.\n\n*See also: [TMP117 Temperature Sensor](https://esphome.io/components/sensor/tmp117.html#tmp117-temperature-sensor)*"
      },
      "tof10120": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `tof10120` sensor platform allows you to use TOF10120 optical time of flight sensor ([datasheet](https://github.com/SoyM/TOF10120/blob/master/TOF10120.pdf)) with ESPHome to measure distances. The sensor works optically by emitting short infrared pulses and measuring the time it takes the light to be reflected back.\n\n*See also: [TOF10120 Time Of Flight Distance Sensor](https://esphome.io/components/sensor/tof10120.html#tof10120-time-of-flight-distance-sensor)*"
      },
      "total_daily_energy": {
        "dependencies": [
          "time"
        ],
        "docs": "The `total_daily_energy` sensor is a helper sensor that can use the power value of other sensors like the [HLW8012](https://esphome.io/components/sensor/hlw8012.html), [CSE7766](https://esphome.io/components/sensor/cse7766.html), [ATM90E32](https://esphome.io/components/sensor/atm90e32.html), etc and integrate it over time.\n\n*See also: [Total Daily Energy Sensor](https://esphome.io/components/sensor/total_daily_energy.html#total-daily-energy-sensor)*"
      },
      "tsl2561": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `tsl2561` sensor platform allows you to use your TSL2561 ([datasheet](https://cdn-shop.adafruit.com/datasheets/TSL2561.pdf), [Adafruit](https://www.adafruit.com/product/439)) ambient light sensor with ESPHome. The [I\u00b2C](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work.\n\n*See also: [TSL2561 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2561.html#tsl2561-ambient-light-sensor)*"
      },
      "tsl2591": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `tsl2591` sensor platform allows you to use the AMS TSL2591 ambient light sensor with ESPHome. Communication with the device is over [I\u00b2C](https://esphome.io/components/i2c.html#i2c), which must be present in your configuration.\n\n*See also: [TSL2591 Ambient Light Sensor](https://esphome.io/components/sensor/tsl2591.html#tsl2591-ambient-light-sensor)*"
      },
      "tuya": {
        "dependencies": [
          "tuya"
        ],
        "docs": "The `tuya` sensor platform creates a sensor from a tuya component and requires [Tuya MCU](https://esphome.io/components/tuya.html) to be configured.\n\n*See also: [Tuya Sensor](https://esphome.io/components/sensor/tuya.html#tuya-sensor)*"
      },
      "tx20": {
        "docs": "The `tx20` sensor platform allows you to use your TX20/TX23 wind direction and speed sensors with ESPHome. The only required pin is the black or brown cable (which is used to transmit data.) The red cable should be connected to VCC (3.3V), green initiates the data transfer when connected to GND and should therefore be directly connected to GND and the yellow cable should be always connected to ground. The difference from the TX20 to the TX23 seems to be that the green cable does not matter any more and the wind sensor is just sending a datagram every 2 seconds - pretty much the same as when the green cable was connected to GND in the TX20.\n\n*See also: [TX20/TX23 Wind Speed/Direction Sensor](https://esphome.io/components/sensor/tx20.html#tx20-tx23-wind-speed-direction-sensor)*"
      },
      "udp": {
        "dependencies": [
          "udp"
        ],
        "docs": "The `udp` sensor platform allows you to receive numeric sensor data directly from another ESPHome node.\n\n*See also: [UDP Sensor](https://esphome.io/components/sensor/udp.html#udp-sensor)*"
      },
      "ufire_ec": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ufire_ec` sensor platform allows you to use your uFire Isolated EC sensor with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work. It requires also to have a temperature sensor in the liquid tank; this can be on the same board or an external sensor linked to the uFire EC configuration.\n\n*See also: [uFire Isolated EC sensor](https://esphome.io/components/sensor/ufire_ec.html#ufire-isolated-ec-sensor)*"
      },
      "ufire_ise": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `ufire_ise` sensor platform allows you to use your uFire ISE pH sensor with ESPHome. The [I\u00b2C Bus](https://esphome.io/components/i2c.html#i2c) is required to be set up in your configuration for this sensor to work. It required also to have an temperature sensor in the liquid tank; this can be on the same board or external sensor linked to the uFire ISE pH configuration.\n\n*See also: [uFire ISE pH sensor](https://esphome.io/components/sensor/ufire_ise.html#ufire-ise-ph-sensor)*"
      },
      "ultrasonic": {
        "docs": "The ultrasonic distance sensor allows you to use simple ultrasonic sensors like the HC-SR04 ([datasheet](https://www.electroschematics.com/wp-content/uploads/2013/07/HC-SR04-datasheet-version-2.pdf), [SparkFun](https://www.sparkfun.com/products/13959)) with ESPHome to measure distances. These sensors usually can\u2019t measure anything more than about two meters and may sometimes make some annoying clicking sounds.\n\n*See also: [Ultrasonic Distance Sensor](https://esphome.io/components/sensor/ultrasonic.html#ultrasonic-distance-sensor)*"
      },
      "uponor_smatrix": {
        "dependencies": [
          "uponor_smatrix"
        ]
      },
      "uptime": {
        "docs": "The `uptime` sensor allows you to track the time the ESP has stayed up for in seconds. Time rollovers are automatically handled.\n\n*See also: [Uptime Sensor](https://esphome.io/components/sensor/uptime.html#uptime-sensor)*"
      },
      "vbus": {
        "docs": "Devices on a VBus are identified with a source address. There can be multiple devices on the same bus, each device type has a different address.\n\n*See also: [`custom` VBus sensors](https://esphome.io/components/vbus.html#custom-vbus-sensors)*"
      },
      "veml3235": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `veml3235` sensor platform allows you to use the Vishay VEML3235 ambient light sensor with ESPHome. Communication with the device is over [I\u00b2C](https://esphome.io/components/i2c.html#i2c), which must be present in your configuration.\n\n*See also: [VEML3235 Ambient Light Sensor](https://esphome.io/components/sensor/veml3235.html#veml3235-ambient-light-sensor)*"
      },
      "veml7700": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `veml7700` sensor platform allows you to use the Vishay VEML7700 and VEML6030 ambient light sensors with ESPHome. Communication with the device is over [I\u00b2C](https://esphome.io/components/i2c.html#i2c), which must be present in your configuration. VEML7700 and VEML6030 are basically the same but in different packages. The VEML7700 uses a fixed address of `0x10`, while the smaller VEML6030 can be configured to use either `0x10` or `0x48`.\n\n*See also: [VEML7700 and VEML6030 Ambient Light Sensors](https://esphome.io/components/sensor/veml7700.html#veml7700-and-veml6030-ambient-light-sensors)*"
      },
      "vl53l0x": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The `vl53l0x` sensor platform allows you to use VL53L0X optical time of flight ([datasheet](https://www.st.com/resource/en/datasheet/vl53l0x.pdf), [ST](https://www.st.com/en/imaging-and-photonics-solutions/vl53l0x.html)) with ESPHome to measure distances. The sensor works optically by emitting short infrared pulses and measuring the time it takes the light to be reflected back\n\n*See also: [VL53L0X Time Of Flight Distance Sensor](https://esphome.io/components/sensor/vl53l0x.html#vl53l0x-time-of-flight-distance-sensor)*"
      },
      "wifi_signal": {
        "dependencies": [
          "wifi"
        ],
        "docs": "The `wifi_signal` sensor platform allows you to read the signal strength of the currently connected [WiFi Access Point](https://esphome.io/components/wifi.html).\n\n*See also: [WiFi Signal Sensor](https://esphome.io/components/sensor/wifi_signal.html#wifi-signal-sensor)*"
      },
      "wireguard": {
        "dependencies": [
          "wireguard"
        ]
      },
      "xgzp68xx": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The XGZP68xx Differential Pressure sensor allows you to use digital differential pressure sensors such as the 6899D ([datasheet](https://cfsensor.com/wp-content/uploads/2022/11/XGZP6899D-Pressure-Sensor-V2.8.pdf)) or 6897D Series ([datasheet](https://cfsensor.com/wp-content/uploads/2022/11/XGZP6897D-Pressure-Sensor-V2.7.pdf)) sensors with ESPHome. The sensors pressure ranges are specified in the datasheets.\n\n*See also: [CFSensor XGZP68xx Series Differential Pressure Sensor](https://esphome.io/components/sensor/xgzp68xx.html#cfsensor-xgzp68xx-series-differential-pressure-sensor)*"
      },
      "xiaomi_cgd1": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "xiaomi_cgdk2": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "xiaomi_cgg1": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "xiaomi_gcls002": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "xiaomi_hhccjcy01": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "xiaomi_hhccjcy10": {
        "dependencies": [
          "esp32_ble_tracker"
        ],
        "docs": "MiFlora, tuya (pink) version, measures temperature, moisture, ambient light and nutrient levels in the soil.\n\n*See also: [HHCCJCY10 Xiaomi MiFlora (Pink version)](https://esphome.io/components/sensor/xiaomi_hhccjcy10.html#hhccjcy10-xiaomi-miflora-pink-version)*"
      },
      "xiaomi_hhccpot002": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "xiaomi_jqjcy01ym": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "xiaomi_lywsd02": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "xiaomi_lywsd02mmc": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "xiaomi_lywsd03mmc": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "xiaomi_lywsdcgq": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "xiaomi_mhoc303": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "xiaomi_mhoc401": {
        "dependencies": [
          "esp32_ble_tracker"
        ]
      },
      "xiaomi_miscale": {
        "dependencies": [
          "esp32_ble_tracker"
        ],
        "docs": "The `xiaomi_miscale` sensor platform lets you track the output of Xiaomi Bluetooth Low Energy devices using the [ESP32 Bluetooth Low Energy Tracker Hub](https://esphome.io/components/esp32_ble_tracker.html). This component will track, for example, the weight of the device every time the sensor sends out a BLE broadcast. Contrary to other implementations, `xiaomi_miscale` listens passively to advertisement packets and does not pair with the device. Hence ESPHome has no impact on battery life.\n\n*See also: [Xiaomi Miscale Sensors](https://esphome.io/components/sensor/xiaomi_miscale.html#xiaomi-miscale-sensors)*"
      },
      "xiaomi_miscale2": {},
      "xiaomi_rtcgq02lm": {
        "dependencies": [
          "xiaomi_rtcgq02lm"
        ]
      },
      "zio_ultrasonic": {
        "dependencies": [
          "i2c"
        ],
        "docs": "The Zio Ultrasonic Distance sensor allows you to use your compatible ([datasheet](https://cdn.sparkfun.com/datasheets/Sensors/Proximity/HCSR04.pdf), [sparkfun](https://www.sparkfun.com/products/17777)) sensors with ESPHome.\n\n*See also: [Zio Ultrasonic Distance Sensor](https://esphome.io/components/sensor/zio_ultrasonic.html#zio-ultrasonic-distance-sensor)*"
      },
      "zyaura": {
        "docs": "The ZyAura CO2 & Temperature & Humidity sensor allows you to use your [ZGm05(3)(U)](http://www.zyaura.com/products/ZGm05.asp) ([MT8057](https://masterkit.ru/shop/1266110), [MT8057S](https://medgadgets.ru/shop/kit-mt8057.html)), [ZG1683R(U)](http://www.zyaura.com/products/ZG1683R.asp) ([MT8060](https://masterkit.ru/shop/1921398)), [ZG1583RUD](http://www.zyaura.com/products/ZG1583RUD.asp) monitors with ESPHome.\n\n*See also: [ZyAura CO2 & Temperature & Humidity Sensor](https://esphome.io/components/sensor/zyaura.html#zyaura-co2-temperature-humidity-sensor)*"
      }
    },
    "schemas": {
      "SENSOR_SCHEMA": {
        "type": "schema",
        "schema": {
          "extends": [
            "core.ENTITY_BASE_SCHEMA",
            "core.MQTT_COMPONENT_SCHEMA"
          ],
          "config_vars": {
            "web_server": {
              "key": "Optional",
              "type": "schema",
              "schema": {
                "config_vars": {
                  "web_server_id": {
                    "key": "Optional",
                    "use_id_type": "web_server::WebServer",
                    "type": "use_id"
                  },
                  "sorting_weight": {
                    "key": "Optional"
                  },
                  "sorting_group_id": {
                    "key": "Optional",
                    "use_id_type": "int",
                    "type": "use_id"
                  }
                }
              }
            },
            "mqtt_id": {
              "key": "Optional",
              "id_type": {
                "class": "mqtt::MQTTSensorComponent",
                "parents": [
                  "mqtt::MQTTComponent",
                  "Component"
                ]
              }
            },
            "id": {
              "key": "GeneratedID",
              "id_type": {
                "class": "sensor::Sensor",
                "parents": [
                  "EntityBase"
                ]
              },
              "docs": "**string**: Manually specify the ID for code generation. At least one of **id** and **name** must be specified.\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "unit_of_measurement": {
              "key": "Optional",
              "type": "string",
              "docs": "**string**: Manually set the unit of measurement the sensor should advertise its values with. This does not actually do any maths (conversion between units).\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "accuracy_decimals": {
              "key": "Optional",
              "type": "integer",
              "docs": "**int**: Manually set the number of decimals to use when reporting values. This does not impact the actual value reported to Home Assistant, it just sets the number of decimals to use when displaying it.\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "device_class": {
              "key": "Optional",
              "type": "enum",
              "values": {
                "apparent_power": null,
                "aqi": null,
                "atmospheric_pressure": null,
                "battery": null,
                "carbon_dioxide": null,
                "carbon_monoxide": null,
                "conductivity": null,
                "current": null,
                "data_rate": null,
                "data_size": null,
                "date": null,
                "distance": null,
                "duration": null,
                "": null,
                "energy": null,
                "energy_storage": null,
                "frequency": null,
                "gas": null,
                "humidity": null,
                "illuminance": null,
                "irradiance": null,
                "moisture": null,
                "monetary": null,
                "nitrogen_dioxide": null,
                "nitrogen_monoxide": null,
                "nitrous_oxide": null,
                "ozone": null,
                "ph": null,
                "pm1": null,
                "pm10": null,
                "pm25": null,
                "power": null,
                "power_factor": null,
                "precipitation": null,
                "precipitation_intensity": null,
                "pressure": null,
                "reactive_power": null,
                "signal_strength": null,
                "sound_pressure": null,
                "speed": null,
                "sulphur_dioxide": null,
                "temperature": null,
                "timestamp": null,
                "volatile_organic_compounds": null,
                "volatile_organic_compounds_parts": null,
                "voltage": null,
                "volume": null,
                "volume_flow_rate": null,
                "volume_storage": null,
                "water": null,
                "weight": null,
                "wind_speed": null
              },
              "docs": "**string**: The device class for the sensor. See [https://www.home-assistant.io/integrations/sensor/#device-class](https://www.home-assistant.io/integrations/sensor/#device-class) for a list of available options. Set to `\"\"` to remove the default device class of a sensor.\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "state_class": {
              "key": "Optional",
              "type": "enum",
              "values": {
                "": null,
                "measurement": null,
                "total_increasing": null,
                "total": null
              },
              "docs": "**string**: The state class for the sensor. See [https://developers.home-assistant.io/docs/core/entity/sensor/#available-state-classes](https://developers.home-assistant.io/docs/core/entity/sensor/#available-state-classes) for a list of available options. Set to `\"\"` to remove the default state class of a sensor.\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "entity_category": {},
            "force_update": {
              "key": "Optional",
              "default": "False",
              "type": "boolean",
              "docs": "**boolean**: If true, this option will force the frontend (usually Home Assistant) to create a state changed event when the sensor updates even if the value stayed the same. Some applications like Grafana require this when working with Home Assistant, but beware it can significantly increase the database size. Defaults to `false`.\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "expire_after": {
              "key": "Optional",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              },
              "docs": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Manually set the time in which the sensor values should be marked as \u201cexpired\u201d/\u201cunknown\u201d. Not providing any value means no expiry.\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "filters": {
              "key": "Optional",
              "type": "registry",
              "is_list": true,
              "registry": "sensor.filter",
              "docs": "Specify filters to use for some basic transforming of values. See [Sensor Filters](https://esphome.io/components/sensor/index.html#sensor-filters) for more information.\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "on_value": {
              "key": "Optional",
              "type": "trigger",
              "docs": "**[Automation](https://esphome.io/automations/index.html#automation)**: An automation to perform when a new value is published. See [on_value](https://esphome.io/components/sensor/index.html#sensor-on-value).\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "on_raw_value": {
              "key": "Optional",
              "type": "trigger",
              "docs": "**[Automation](https://esphome.io/automations/index.html#automation)**: An automation to perform when a raw value is received that hasn\u2019t passed through any filters. See [on_raw_value](https://esphome.io/components/sensor/index.html#sensor-on-raw-value).\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            },
            "on_value_range": {
              "key": "Optional",
              "type": "trigger",
              "schema": {
                "config_vars": {
                  "above": {
                    "key": "Optional",
                    "templatable": true,
                    "docs": "**float**: The minimum for the trigger.\n\n*See also: [lambda](https://esphome.io/components/sensor/index.html#on-value-range)*"
                  },
                  "below": {
                    "key": "Optional",
                    "templatable": true,
                    "docs": "**float**: The maximum for the trigger.\n\n*See also: [lambda](https://esphome.io/components/sensor/index.html#on-value-range)*"
                  },
                  "then": {
                    "type": "trigger"
                  }
                }
              },
              "has_required_var": true,
              "docs": "**[Automation](https://esphome.io/automations/index.html#automation)**: An automation to perform when a published value transition from outside to a range to inside. See [on_value_range](https://esphome.io/components/sensor/index.html#sensor-on-value-range).\n\n*See also: [Sensor Component](https://esphome.io/components/sensor/index.html#base-sensor-configuration)*"
            }
          }
        }
      },
      "QUANTILE_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "window_size": {
              "key": "Optional",
              "default": "5",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: The number of values over which to calculate the quantile when pushing out a value. Defaults to `5`.\n\n*See also: [quantile](https://esphome.io/components/sensor/index.html#quantile)*"
            },
            "send_every": {
              "key": "Optional",
              "default": "5",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: How often a sensor value should be pushed out. For example, in above configuration the quantile is calculated after every 4th received sensor value, over the last 7 received values. Defaults to `5`.\n\n*See also: [quantile](https://esphome.io/components/sensor/index.html#quantile)*"
            },
            "send_first_at": {
              "key": "Optional",
              "default": "1",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: By default, the very first raw value on boot is immediately published. With this parameter you can specify when the very first value is to be sent. Must be smaller than or equal to `send_every` Defaults to `1`.\n\n*See also: [quantile](https://esphome.io/components/sensor/index.html#quantile)*"
            },
            "quantile": {
              "key": "Optional",
              "default": "0.9",
              "data_type": "zero_to_one_float",
              "docs": "**float**: value from 0 to 1 to determine which quantile to pick. Defaults to `.9`.\n\n*See also: [quantile](https://esphome.io/components/sensor/index.html#quantile)*"
            }
          }
        }
      },
      "MEDIAN_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "window_size": {
              "key": "Optional",
              "default": "5",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: The number of values over which to calculate the median when pushing out a value. This number should be odd if you want an actual received value pushed out. Defaults to `5`.\n\n*See also: [median](https://esphome.io/components/sensor/index.html#median)*"
            },
            "send_every": {
              "key": "Optional",
              "default": "5",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: How often a sensor value should be pushed out. For example, in above configuration the median is calculated after every 4th received sensor value, over the last 7 received values. Defaults to `5`.\n\n*See also: [median](https://esphome.io/components/sensor/index.html#median)*"
            },
            "send_first_at": {
              "key": "Optional",
              "default": "1",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: By default, the very first raw value on boot is immediately published. With this parameter you can specify when the very first value is to be sent. Must be smaller than or equal to `send_every` Defaults to `1`.\n\n*See also: [median](https://esphome.io/components/sensor/index.html#median)*"
            }
          }
        }
      },
      "MIN_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "window_size": {
              "key": "Optional",
              "default": "5",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: The number of values over which to calculate the min/max when pushing out a value. Defaults to `5`.\n\n*See also: [min](https://esphome.io/components/sensor/index.html#min)*"
            },
            "send_every": {
              "key": "Optional",
              "default": "5",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: How often a sensor value should be pushed out. For example, in above configuration the min is calculated after every 4th received sensor value, over the last 7 received values. Defaults to `5`.\n\n*See also: [min](https://esphome.io/components/sensor/index.html#min)*"
            },
            "send_first_at": {
              "key": "Optional",
              "default": "1",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: By default, the very first raw value on boot is immediately published. With this parameter you can specify when the very first value is to be sent. Must be smaller than or equal to `send_every` Defaults to `1`.\n\n*See also: [min](https://esphome.io/components/sensor/index.html#min)*"
            }
          }
        }
      },
      "MAX_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "window_size": {
              "key": "Optional",
              "default": "5",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: The number of values over which to calculate the min/max when pushing out a value. Defaults to `5`.\n\n*See also: [max](https://esphome.io/components/sensor/index.html#max)*"
            },
            "send_every": {
              "key": "Optional",
              "default": "5",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: How often a sensor value should be pushed out. For example, in above configuration the max is calculated after every 4th received sensor value, over the last 7 received values. Defaults to `5`.\n\n*See also: [max](https://esphome.io/components/sensor/index.html#max)*"
            },
            "send_first_at": {
              "key": "Optional",
              "default": "1",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: By default, the very first raw value on boot is immediately published. With this parameter you can specify when the very first value is to be sent. Must be smaller than or equal to `send_every` Defaults to `1`.\n\n*See also: [max](https://esphome.io/components/sensor/index.html#max)*"
            }
          }
        }
      },
      "SLIDING_AVERAGE_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "window_size": {
              "key": "Optional",
              "default": "15",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: The number of values over which to perform an average when pushing out a value.\n\n*See also: [sliding_window_moving_average](https://esphome.io/components/sensor/index.html#sliding-window-moving-average)*"
            },
            "send_every": {
              "key": "Optional",
              "default": "15",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: How often a sensor value should be pushed out. For example, in above configuration the weighted average is only pushed out on every 15th received sensor value.\n\n*See also: [sliding_window_moving_average](https://esphome.io/components/sensor/index.html#sliding-window-moving-average)*"
            },
            "send_first_at": {
              "key": "Optional",
              "default": "1",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: By default, the very first raw value on boot is immediately published. With this parameter you can specify when the very first value is to be sent. Defaults to `1`.\n\n*See also: [sliding_window_moving_average](https://esphome.io/components/sensor/index.html#sliding-window-moving-average)*"
            }
          }
        }
      },
      "EXPONENTIAL_AVERAGE_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "alpha": {
              "key": "Optional",
              "default": "0.1",
              "data_type": "positive_float",
              "docs": "**float**: The forget factor/alpha value of the filter. A higher value includes more details in the output while a lower value removes more noise. Defaults to `0.1`.\n\n*See also: [exponential_moving_average](https://esphome.io/components/sensor/index.html#exponential-moving-average)*"
            },
            "send_every": {
              "key": "Optional",
              "default": "15",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: How often a sensor value should be pushed out. Defaults to `15`.\n\n*See also: [exponential_moving_average](https://esphome.io/components/sensor/index.html#exponential-moving-average)*"
            },
            "send_first_at": {
              "key": "Optional",
              "default": "1",
              "type": "integer",
              "data_type": "positive_not_null_int",
              "docs": "**int**: By default, the very first raw value on boot is immediately published. With this parameter you can specify when the very first value is to be sent. Defaults to `1`.\n\n*See also: [exponential_moving_average](https://esphome.io/components/sensor/index.html#exponential-moving-average)*"
            }
          }
        }
      },
      "DELTA_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "value": {
              "key": "Required",
              "data_type": "positive_float"
            },
            "type": {
              "key": "Optional",
              "default": "absolute",
              "type": "enum",
              "values": {
                "absolute": null,
                "percentage": null
              }
            }
          }
        }
      },
      "TIMEOUT_SCHEMA": {
        "type": "schema",
        "maybe": "timeout",
        "schema": {
          "config_vars": {
            "timeout": {
              "key": "Required",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              }
            },
            "value": {
              "key": "Optional",
              "default": "nan",
              "templatable": true
            }
          }
        }
      },
      "CLAMP_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "min_value": {
              "key": "Optional",
              "default": "NaN",
              "docs": "**float**: The lower bound of the range.\n\n*See also: [clamp](https://esphome.io/components/sensor/index.html#clamp)*"
            },
            "max_value": {
              "key": "Optional",
              "default": "NaN",
              "docs": "**float**: The upper bound of the range.\n\n*See also: [clamp](https://esphome.io/components/sensor/index.html#clamp)*"
            },
            "ignore_out_of_range": {
              "key": "Optional",
              "default": "False",
              "type": "boolean",
              "docs": "**bool**: If true, ignores all sensor values out of the range. Defaults to `false`.\n\n*See also: [clamp](https://esphome.io/components/sensor/index.html#clamp)*"
            }
          }
        }
      },
      "SENSOR_IN_RANGE_CONDITION_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "sensor::Sensor",
              "type": "use_id"
            },
            "above": {
              "key": "Optional",
              "docs": "**float**: The minimum for the condition.\n\n*See also: [lambda](https://esphome.io/components/sensor/index.html#sensor-in-range-condition)*"
            },
            "below": {
              "key": "Optional",
              "docs": "**float**: The maximum for the condition.\n\n*See also: [lambda](https://esphome.io/components/sensor/index.html#sensor-in-range-condition)*"
            }
          }
        }
      }
    },
    "condition": {
      "in_range": {
        "type": "schema",
        "schema": {
          "extends": [
            "sensor.SENSOR_IN_RANGE_CONDITION_SCHEMA"
          ]
        },
        "docs": "This condition passes if the state of the given sensor is inside a range.\n\n*See also: [`sensor.in_range` Condition](https://esphome.io/components/sensor/index.html#sensor-in-range-condition)*"
      }
    },
    "filter": {
      "offset": {
        "templatable": true,
        "docs": "Adds a value to each sensor value. The value may be a constant or a lambda returning a float.\n\n*See also: [`offset`](https://esphome.io/components/sensor/index.html#offset)*"
      },
      "multiply": {
        "templatable": true,
        "docs": "Multiplies each value by a templatable value.\n\n*See also: [`multiply`](https://esphome.io/components/sensor/index.html#multiply)*"
      },
      "filter_out": {
        "templatable": true,
        "docs": "**number**: Filter out specific values to be displayed. For example to filter out the value `85.0`\n\n*See also: [`filter_out`](https://esphome.io/components/sensor/index.html#filter-out)*"
      },
      "quantile": {
        "type": "schema",
        "schema": {
          "extends": [
            "sensor.QUANTILE_SCHEMA"
          ]
        },
        "docs": "A [simple moving quantile](https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/quantile.htm) over the last few values. This can be used to filter outliers from the received sensor data. A large window size will make the filter slow to react to input changes.\n\n*See also: [`quantile`](https://esphome.io/components/sensor/index.html#quantile)*"
      },
      "median": {
        "type": "schema",
        "schema": {
          "extends": [
            "sensor.MEDIAN_SCHEMA"
          ]
        },
        "docs": "A [simple moving median](https://en.wikipedia.org/wiki/Median_filter#Worked_1D_example) over the last few values. This can be used to filter outliers from the received sensor data. A large window size will make the filter slow to react to input changes.\n\n*See also: [`median`](https://esphome.io/components/sensor/index.html#median)*"
      },
      "skip_initial": {
        "type": "integer",
        "data_type": "positive_not_null_int",
        "docs": "A simple skip filter; `skip_initial: N` skips the first `N` sensor readings and passes on the rest. This can be used when the sensor needs a few readings to \u2018warm up\u2019. After the initial readings have been skipped, this filter does nothing.\n\n*See also: [`skip_initial`](https://esphome.io/components/sensor/index.html#skip-initial)*"
      },
      "min": {
        "type": "schema",
        "schema": {
          "extends": [
            "sensor.MIN_SCHEMA"
          ]
        },
        "docs": "A moving minimum over the last few values. A large window size will make the filter slow to react to input changes.\n\n*See also: [`min`](https://esphome.io/components/sensor/index.html#min)*"
      },
      "max": {
        "type": "schema",
        "schema": {
          "extends": [
            "sensor.MAX_SCHEMA"
          ]
        },
        "docs": "A moving maximum over the last few values. A large window size will make the filter slow to react to input changes.\n\n*See also: [`max`](https://esphome.io/components/sensor/index.html#max)*"
      },
      "sliding_window_moving_average": {
        "type": "schema",
        "schema": {
          "extends": [
            "sensor.SLIDING_AVERAGE_SCHEMA"
          ]
        },
        "docs": "A [simple moving average](https://en.wikipedia.org/wiki/Moving_average#Simple_moving_average) over the last few values. It can be used to have a short update interval on the sensor but only push out an average on a specific interval (thus increasing resolution).\n\n*See also: [`sliding_window_moving_average`](https://esphome.io/components/sensor/index.html#sliding-window-moving-average)*"
      },
      "exponential_moving_average": {
        "type": "schema",
        "schema": {
          "extends": [
            "sensor.EXPONENTIAL_AVERAGE_SCHEMA"
          ]
        },
        "docs": "A simple [exponential moving average](https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average) over the last few values. It can be used to have a short update interval on the sensor but only push out an average on a specific interval (thus increasing resolution).\n\n*See also: [`exponential_moving_average`](https://esphome.io/components/sensor/index.html#exponential-moving-average)*"
      },
      "throttle_average": {
        "type": "schema",
        "schema": {
          "extends": [
            "core.positive_time_period_milliseconds"
          ]
        },
        "docs": "An average over the `specified time period`, potentially throttling incoming values. When this filter gets incoming values, it sums up all values and pushes out the average after the `specified time period` passed. There are two edge cases to consider within the `specified time period`:\n\n*See also: [`throttle_average`](https://esphome.io/components/sensor/index.html#throttle-average)*"
      },
      "lambda": {
        "docs": "Perform a simple mathematical operation over the sensor values. The input value is `x` and the result of the lambda is used as the output (use `return`).\n\n*See also: [`lambda`](https://esphome.io/components/sensor/index.html#lambda)*"
      },
      "delta": {
        "type": "schema",
        "schema": {
          "extends": [
            "sensor.DELTA_SCHEMA"
          ]
        },
        "docs": "This filter stores the last value passed through this filter and only passes incoming values through if incoming value is sufficiently different from the previously passed one. This difference can be calculated in two ways an absolute difference or a percentage difference.\n\n*See also: [`delta`](https://esphome.io/components/sensor/index.html#delta)*"
      },
      "or": {
        "type": "registry",
        "is_list": true,
        "registry": "sensor.filter",
        "docs": "Pass forward a value with the first child filter that returns. Below example will only pass forward values that are *either* at least 1s old or are if the absolute difference is at least 5.0.\n\n*See also: [`or`](https://esphome.io/components/sensor/index.html#or)*"
      },
      "throttle": {
        "type": "schema",
        "schema": {
          "extends": [
            "core.positive_time_period_milliseconds"
          ]
        },
        "docs": "Throttle the incoming values. When this filter gets an incoming value, it checks if the last incoming value is at least `specified time period` old. If it is not older than the configured value, the value is not passed forward.\n\n*See also: [`throttle`](https://esphome.io/components/sensor/index.html#throttle)*"
      },
      "heartbeat": {
        "type": "schema",
        "schema": {
          "extends": [
            "core.positive_time_period_milliseconds"
          ]
        },
        "docs": "Send the value periodically with the specified time interval. If the sensor value changes during the interval the interval will not reset. The last value of the sensor will be sent.\n\n*See also: [`heartbeat`](https://esphome.io/components/sensor/index.html#heartbeat)*"
      },
      "timeout": {
        "type": "schema",
        "schema": {
          "extends": [
            "sensor.TIMEOUT_SCHEMA"
          ]
        },
        "docs": "After the first value has been sent, if no subsequent value is published within the `specified time period`, send a templatable value which defaults to `NaN`. Especially useful when data is derived from some other communication channel, e.g. a serial port, which can potentially be interrupted.\n\n*See also: [`timeout`](https://esphome.io/components/sensor/index.html#timeout)*"
      },
      "debounce": {
        "type": "schema",
        "schema": {
          "extends": [
            "core.positive_time_period_milliseconds"
          ]
        },
        "docs": "Only send values if the last incoming value is at least `specified time period` old. For example if two values come in at almost the same time, this filter will only output the last value and only after the specified time period has passed without any new incoming values.\n\n*See also: [`debounce`](https://esphome.io/components/sensor/index.html#debounce)*"
      },
      "calibrate_linear": {
        "type": "schema",
        "maybe": "datapoints",
        "schema": {
          "config_vars": {
            "datapoints": {
              "key": "Required",
              "is_list": true,
              "docs": "The list of datapoints.\n\n*See also: [calibrate_linear](https://esphome.io/components/sensor/index.html#calibrate-linear)*"
            },
            "method": {
              "key": "Optional",
              "default": "least_squares",
              "type": "enum",
              "values": {
                "least_squares": null,
                "exact": null
              },
              "docs": "**string**: The method for calculating the linear function(s). One of `least_squares` or `exact`. Defaults to `least_squares`.\n\n*See also: [calibrate_linear](https://esphome.io/components/sensor/index.html#calibrate-linear)*"
            }
          }
        },
        "docs": "Calibrate your sensor values by using values you measured with an accurate \u201ctruth\u201d source.\n\n*See also: [`calibrate_linear`](https://esphome.io/components/sensor/index.html#calibrate-linear)*"
      },
      "calibrate_polynomial": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "datapoints": {
              "key": "Required",
              "is_list": true
            },
            "degree": {
              "key": "Required",
              "type": "integer",
              "data_type": "positive_int"
            }
          }
        },
        "docs": "Calibrate your sensor values by fitting them to a polynomial functions. This is similar to the `calibrate_linear` filter, but also allows for higher-order functions like quadratic polynomials.\n\n*See also: [`calibrate_polynomial`](https://esphome.io/components/sensor/index.html#calibrate-polynomial)*"
      },
      "clamp": {
        "type": "schema",
        "schema": {
          "extends": [
            "sensor.CLAMP_SCHEMA"
          ]
        },
        "docs": "Limits the value to the range between `min_value` and `max_value`. By default, sensor values outside these bounds will be set to `min_value` or `max_value`, respectively. If `ignore_out_of_range` is true, then sensor values outside those bounds will be ignored. If `min_value` is not set, there is no lower bound; if `max_value` is not set there is no upper bound.\n\n*See also: [`clamp`](https://esphome.io/components/sensor/index.html#clamp)*"
      },
      "round": {
        "type": "schema",
        "maybe": "accuracy_decimals",
        "schema": {
          "config_vars": {
            "accuracy_decimals": {
              "key": "Required",
              "type": "integer",
              "data_type": "uint8_t"
            }
          }
        },
        "docs": "Rounds the value to the given decimal places.\n\n*See also: [`round`](https://esphome.io/components/sensor/index.html#round)*"
      },
      "round_to_multiple_of": {
        "type": "schema",
        "maybe": "multiple",
        "schema": {
          "config_vars": {
            "multiple": {
              "key": "Required",
              "type": "schema",
              "schema": {}
            }
          }
        },
        "docs": "Rounds the value to the nearest multiple. Takes a float greater than zero.\n\n*See also: [`round_to_multiple_of`](https://esphome.io/components/sensor/index.html#round-to-multiple-of)*"
      }
    }
  }
}