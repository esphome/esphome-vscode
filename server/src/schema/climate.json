{
  "climate": {
    "components": {
      "anova": {
        "dependencies": [
          "ble_client"
        ],
        "docs": "The `anova` climate platform creates a climate device which can be used to control a BLE Anova sous-vide stick. Whilst not strictly a climate device, the concept of keeping something to a set temperature applies equally here.\n\n*See also: [Anova Cooker](https://esphome.io/components/climate/anova.html#anova-cooker)*"
      },
      "ballu": {},
      "bang_bang": {
        "docs": "The `bang_bang` climate platform allows you to regulate a value with a [bang-bang controller](https://en.wikipedia.org/wiki/Bang%E2%80%93bang_control) (also called hysteresis controller).\n\n*See also: [Bang Bang Climate Controller](https://esphome.io/components/climate/bang_bang.html#bang-bang-climate-controller)*"
      },
      "bedjet": {
        "dependencies": [
          "bedjet"
        ],
        "docs": "The `climate` platform exposes the BedJet\u2019s climate-related functionality, including setting the mode and target temperature.\n\n*See also: [bedjet Climate](https://esphome.io/components/climate/bedjet.html#bedjet-climate)*"
      },
      "climate_ir_lg": {
        "docs": "Additional configuration is available for this platform\n\n*See also: [climate_ir_lg Climate](https://esphome.io/components/climate/climate_ir.html#climate-ir-lg-climate)*"
      },
      "coolix": {},
      "custom": {
        "docs": "This integration can be used to create custom climate devices in ESPHome using the C++ (Arduino) API.\n\n*See also: [Custom Climate](https://esphome.io/components/climate/custom.html#custom-climate)*"
      },
      "daikin": {},
      "daikin_brc": {
        "docs": "The Daikin BRC remotes are used by the ceiling cassette model of Daikin heatpumps.\n\n*See also: [daikin_brc Climate](https://esphome.io/components/climate/climate_ir.html#daikin-brc-climate)*"
      },
      "delonghi": {
        "docs": "Currently supports the protocol used by some Delonghi portable units\n\n*See also: [delonghi Climate](https://esphome.io/components/climate/climate_ir.html#delonghi-climate)*"
      },
      "fujitsu_general": {},
      "heatpumpir": {},
      "hitachi_ac344": {},
      "hitachi_ac424": {},
      "midea": {
        "dependencies": [
          "climate",
          "uart",
          "wifi"
        ],
        "docs": "The `midea` component creates a Midea air conditioner climate device.\n\n*See also: [Midea Air Conditioner](https://esphome.io/components/climate/midea.html#midea-air-conditioner)*"
      },
      "midea_ac": {},
      "midea_ir": {
        "docs": "These air conditioners support two protocols: Midea and Coolix. Therefore, when using an IR receiver, it considers both protocols and publishes the received states.\n\n*See also: [midea_ir Climate](https://esphome.io/components/climate/climate_ir.html#midea-ir-climate)*"
      },
      "mitsubishi": {},
      "pid": {
        "docs": "The `pid` climate platform allows you to regulate a value with a [PID controller](https://en.wikipedia.org/wiki/PID_controller).\n\n*See also: [PID Climate](https://esphome.io/components/climate/pid.html#pid-climate)*"
      },
      "tcl112": {},
      "thermostat": {
        "docs": "The `thermostat` climate platform allows you to control a climate control system in much the same manner as a physical thermostat. Its operation is similar to the [bang-bang](https://esphome.io/components/climate/bang_bang.html) controller; a sensor measures a value (the air temperature) and the controller will try to keep this value within a range defined by the set point(s). To do this, the controller can activate devices like a heating unit and/or a cooling unit to change the value observed by the sensor. When configured for both heating and cooling, it is essentially two [bang-bang](https://esphome.io/components/climate/bang_bang.html) controllers in one; it differs, however, in that interaction with the thermostat component is nearly identical to that of a real thermostat.\n\n*See also: [Thermostat Climate Controller](https://esphome.io/components/climate/thermostat.html#thermostat-climate-controller)*"
      },
      "toshiba": {
        "docs": "Additional configuration is available for this model.\n\n*See also: [toshiba Climate](https://esphome.io/components/climate/climate_ir.html#toshiba-climate)*"
      },
      "tuya": {
        "dependencies": [
          "tuya"
        ],
        "docs": "The `tuya` climate platform creates a climate device from a tuya component.\n\n*See also: [Tuya Climate](https://esphome.io/components/climate/tuya.html#tuya-climate)*"
      },
      "whirlpool": {
        "docs": "Additional configuration is available for this model.\n\n*See also: [whirlpool Climate](https://esphome.io/components/climate/climate_ir.html#whirlpool-climate)*"
      },
      "whynter": {
        "docs": "Additional configuration is available for this platform\n\n*See also: [whynter Climate](https://esphome.io/components/climate/climate_ir.html#whynter-climate)*"
      },
      "yashima": {}
    },
    "schemas": {
      "CLIMATE_SCHEMA": {
        "type": "schema",
        "schema": {
          "extends": [
            "core.ENTITY_BASE_SCHEMA",
            "core.MQTT_COMMAND_COMPONENT_SCHEMA"
          ],
          "config_vars": {
            "id": {
              "key": "GeneratedID",
              "id_type": {
                "class": "climate::Climate",
                "parents": [
                  "EntityBase"
                ]
              }
            },
            "mqtt_id": {
              "key": "Optional",
              "id_type": {
                "class": "mqtt::MQTTClimateComponent",
                "parents": [
                  "mqtt::MQTTComponent",
                  "Component"
                ]
              }
            },
            "visual": {
              "key": "Optional",
              "default": "{}",
              "type": "schema",
              "schema": {
                "config_vars": {
                  "min_temperature": {
                    "key": "Optional",
                    "docs": "**float**: The minimum temperature the climate device can reach. Used to set the range of the frontend gauge.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
                  },
                  "max_temperature": {
                    "key": "Optional",
                    "docs": "**float**: The maximum temperature the climate device can reach. Used to set the range of the frontend gauge.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
                  },
                  "temperature_step": {
                    "key": "Optional",
                    "docs": "**float**: The granularity with which the target temperature can be controlled.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
                  }
                }
              },
              "docs": "Visual settings for the climate device - these do not affect operation and are solely for controlling how the climate device shows up in the frontend.\n  * **min_temperature** (*Optional*, float): The minimum temperature the climate device can reach. Used to set the range of the frontend gauge.\n  \n  * **max_temperature** (*Optional*, float): The maximum temperature the climate device can reach. Used to set the range of the frontend gauge.\n  \n  * **temperature_step** (*Optional*, float): The granularity with which the target temperature can be controlled.\n  \n  \n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "action_state_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to publish climate device action changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "away_command_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to receive away mode commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "away_state_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to publish away mode changes on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "current_temperature_state_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to publish current temperature changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "fan_mode_command_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to receive fan mode commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "fan_mode_state_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to publish fan mode changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "mode_command_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to receive climate device mode commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "mode_state_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to publish climate device mode changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "swing_mode_command_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to receive swing mode commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "swing_mode_state_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to publish swing mode changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "target_temperature_command_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to receive target temperature commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "target_temperature_state_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to publish target temperature changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "target_temperature_high_command_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to receive higher target temperature commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "target_temperature_high_state_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to publish higher target temperature changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "target_temperature_low_command_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to receive lower target temperature commands on.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "target_temperature_low_state_topic": {
              "key": "Optional",
              "docs": "**string**: The topic to publish lower target temperature changes to.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#base-climate-configuration)*"
            },
            "on_state": {
              "key": "Optional",
              "type": "trigger"
            }
          }
        }
      }
    },
    "action": {
      "control": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "Required",
              "use_id_type": "climate::Climate",
              "type": "use_id",
              "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: The ID of the climate device to control.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
            },
            "mode": {
              "key": "Optional",
              "templatable": true,
              "type": "enum",
              "values": [
                "OFF",
                "HEAT_COOL",
                "COOL",
                "HEAT",
                "DRY",
                "FAN_ONLY",
                "AUTO"
              ],
              "docs": "**string, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Put the climate device in a specific mode. One of\n  * `OFF` - The device is manually set to off, the device is inactive.\n  \n  * `AUTO` - The device is should adjust the temperature dynamically. For example based on a schedule, or learned behavior.\n  \n  * `HEAT` - The device is set to heat to reach a target temperature.\n  \n  * `COOL` - The device is set to cool to reach a target temperature.\n  \n  * `HEAT_COOL` - The device should heat/cool to maintain a target temperature.\n  \n  * `FAN_ONLY` - The device only has the fan enabled, no heating or cooling is taking place.\n  \n  * `DRY` - The device is set to dry/humidity mode.\n  \n  \n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*",
              "values_docs": {
                "OFF": "The device is manually set to off, the device is inactive.",
                "AUTO": "The device is should adjust the temperature dynamically. For example based on a schedule, or learned behavior.",
                "HEAT": "The device is set to heat to reach a target temperature.",
                "COOL": "The device is set to cool to reach a target temperature.",
                "HEAT_COOL": "The device should heat/cool to maintain a target temperature.",
                "FAN_ONLY": "The device only has the fan enabled, no heating or cooling is taking place.",
                "DRY": "The device is set to dry/humidity mode."
              }
            },
            "target_temperature": {
              "key": "Optional",
              "templatable": true,
              "docs": "**float, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set the target temperature of a climate device.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
            },
            "target_temperature_low": {
              "key": "Optional",
              "templatable": true,
              "docs": "**float, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set the lower target temperature of a climate device with a two-point target temperature.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
            },
            "target_temperature_high": {
              "key": "Optional",
              "templatable": true,
              "docs": "**float, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set the higher target temperature of a climate device with a two-point target temperature.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
            },
            "away": {
              "key": "Optional",
              "templatable": true,
              "type": "boolean",
              "docs": "**boolean, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set the away mode of the climate device.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
            },
            "fan_mode": {
              "key": "Optional",
              "templatable": true,
              "type": "enum",
              "values": [
                "ON",
                "OFF",
                "AUTO",
                "LOW",
                "MEDIUM",
                "HIGH",
                "MIDDLE",
                "FOCUS",
                "DIFFUSE"
              ],
              "docs": "**string, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set the fan mode of the climate device. One of `ON`, `OFF`, `AUTO`, `LOW`, `MEDIUM`, `HIGH`, `MIDDLE`, `FOCUS`, `DIFFUSE`.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
            },
            "custom_fan_mode": {
              "key": "Optional",
              "templatable": true,
              "type": "string",
              "docs": "**string, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set one of the supported custom_fan_modes of the climate device.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
            },
            "preset": {
              "key": "Optional",
              "templatable": true,
              "type": "enum",
              "values": [
                "NONE",
                "ECO",
                "AWAY",
                "BOOST",
                "COMFORT",
                "HOME",
                "SLEEP",
                "ACTIVITY"
              ],
              "docs": "**string, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set the preset of the climate device. One of `ECO`, `AWAY`, `BOOST`, `COMFORT`, `HOME`, `SLEEP`, `ACTIVITY`.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
            },
            "custom_preset": {
              "key": "Optional",
              "templatable": true,
              "type": "string",
              "docs": "**string, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set one of the supported custom_presets of the climate device.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
            },
            "swing_mode": {
              "key": "Optional",
              "templatable": true,
              "type": "enum",
              "values": [
                "OFF",
                "BOTH",
                "VERTICAL",
                "HORIZONTAL"
              ],
              "docs": "**string, [templatable](https://esphome.io/guides/automations.html#config-templatable)**: Set the swing mode of the climate device. One of `OFF`, `BOTH`, `VERTICAL`, `HORIZONTAL`.\n\n*See also: [Climate Component](https://esphome.io/components/climate/index.html#climate-control-action)*"
            }
          }
        },
        "docs": "This is an [Action](https://esphome.io/guides/automations.html#config-action) for setting parameters for climate devices.\n\n*See also: [`climate.control` Action](https://esphome.io/components/climate/index.html#climate-control-action)*"
      }
    }
  }
}